/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 05:27:07 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionType_ESTest extends FunctionType_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      String string0 = errorFunctionType0.toDebugHashCodeString();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals("function (this:{1977786857}, {12}, {12}, {12}): {1977786857}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNominalType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noType0);
      
      String string0 = noType0.toDebugHashCodeString();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNominalType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.hasCachedValues());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals("function (this:me, {9}): me", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "RZoNr?~D", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      FunctionType functionType1 = (FunctionType)functionType0.getPropertyType("bind");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNoObjectType());
      assertTrue(functionType1.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      
      String string0 = functionType1.toDebugHashCodeString();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNoObjectType());
      assertTrue(functionType1.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertEquals("function ({({-1594156838},{11},{6})}): {9}", string0);
      assertNotNull(string0);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(instanceObjectType0);
      
      noResolvedType0.setPrototypeBasedOn((ObjectType) instanceObjectType0, (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)errorFunctionType0.resolveInternal(simpleErrorReporter0, instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isRecordType());
      assertTrue(errorFunctionType1.isConstructor());
      assertFalse(errorFunctionType1.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isUnionType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertFalse(errorFunctionType1.isNominalType());
      assertFalse(errorFunctionType1.isEnumType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isVoidType());
      assertFalse(errorFunctionType1.isAllType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isTemplateType());
      assertTrue(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertTrue(errorFunctionType1.hasCachedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertNotNull(errorFunctionType1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("]\"bV?N An/", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(1, immutableList0.size());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = functionType0.defineProperty("function (this:{1764487530}): {9}", errorFunctionType0, true, (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
      
      errorFunctionType0.setImplementedInterfaces(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(1, immutableList0.size());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      FunctionType functionType1 = (FunctionType)functionType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.isResolved());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.isResolved());
      assertTrue(functionType1.isInterface());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isRecordType());
      assertTrue(functionType1.canBeCalled());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isNoObjectType());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalConstructor());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNullType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(functionType0, functionType1);
      assertSame(functionType1, functionType0);
      assertNotNull(functionType1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("]\"bV?N An/", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      String string0 = functionType0.toDebugHashCodeString();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals("function (this:{1764487530}): {9}", string0);
      assertNotNull(string0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      FunctionType functionType1 = (FunctionType)functionType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isResolved());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.isFunctionType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertTrue(functionType1.isInterface());
      assertFalse(functionType1.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.isResolved());
      assertFalse(functionType1.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(functionType0, functionType1);
      assertSame(functionType1, functionType0);
      assertNotNull(functionType1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.isSubtype(noResolvedType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      
      boolean boolean1 = noResolvedType0.hasCachedValues();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isNominalConstructor());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.resetImplicitPrototype(functionType0, functionType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "]\"bV?N An/", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isUnionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(instanceObjectType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      noResolvedType0.setPrototypeBasedOn((ObjectType) instanceObjectType0, (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      functionType0.clearCachedValues();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      Node node0 = new Node(1, 0, 0);
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertEquals(1, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(node0);
      
      boolean boolean0 = noResolvedType0.hasImplementedInterfaces();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      
      noResolvedType0.setSource(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertEquals(1, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, true);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNominalType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(instanceObjectType0);
      
      Node node0 = instanceObjectType0.getPropertyNode("Unknown class name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNominalType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNull(node0);
      
      noResolvedType0.setSource((Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      Node node0 = new Node(1, 0, 0);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals(1, node0.getType());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(node0);
      
      noResolvedType0.setPrototypeBasedOn((ObjectType) noResolvedType0, node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals(1, node0.getType());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      noResolvedType0.setSource(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals(1, node0.getType());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "bind", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      functionType0.setSource((Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.canBeCalled());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noObjectType0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(noObjectType0, noObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasInstanceType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("]\"bV?N An/", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.isSubtype(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.getBindReturnType(0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      String string0 = functionType0.toStringHelper(true);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals("function (...[?]): ?", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isEnumType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isNominalConstructor());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNoObjectType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isStringValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(numberType0);
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)numberType0.autoboxesTo();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isEnumType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isNominalConstructor());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNoObjectType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isStringValueType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertTrue(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(instanceObjectType0);
      
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[2] = (JSType) numberType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) instanceObjectType0, true, jSTypeArray0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isEnumType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isNominalConstructor());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNoObjectType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isStringValueType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertTrue(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertEquals(3, jSTypeArray0.length);
      
      // Undeclared exception!
      try { 
        functionType0.toStringHelper(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("ORDINARY", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      String string0 = functionType0.toStringHelper(true);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals("function (this:ORDINARY): ?", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "fpnctio7 (this:{1764487530}): {9}", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoResolvedType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      FunctionType functionType1 = (FunctionType)functionType0.getPropertyType("bind");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoResolvedType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      
      String string0 = functionType1.toStringHelper(false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoResolvedType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertEquals("function ((fpnctio7 (this:{1764487530}): {9}|null)=): ?", string0);
      assertNotNull(string0);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_FUNCTION_TYPE;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[3];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative0;
      jSTypeNativeArray0[2] = jSTypeNative0;
      ErrorFunctionType errorFunctionType0 = (ErrorFunctionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertEquals(3, jSTypeNativeArray0.length);
      
      String string0 = errorFunctionType0.toStringHelper(false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals("function (new:EvalError, *=, *=, *=): EvalError", string0);
      assertNotNull(string0);
      assertEquals(3, jSTypeNativeArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("]\"bV?N An/", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isTemplateType());
      assertEquals(1, immutableList0.size());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList0);
      
      functionType0.setImplementedInterfaces(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isTemplateType());
      assertEquals(1, immutableList0.size());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(nullType0);
      
      NoType noType0 = (NoType)nullType0.restrictByNotNullOrUndefined();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isVoidType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noType0);
      
      Node node0 = Node.newString("P `7 *Vg/", 0, 1);
      assertNull(node0.getSourceFileName());
      assertTrue(node0.isString());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertNotNull(node0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isVoidType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertNull(node0.getSourceFileName());
      assertTrue(node0.isString());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      FunctionType functionType1 = functionType0.supAndInfHelper(noType0, true);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isVoidType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertNull(node0.getSourceFileName());
      assertTrue(node0.isString());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      
      String string0 = functionType1.toDebugHashCodeString();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isVoidType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertNull(node0.getSourceFileName());
      assertTrue(node0.isString());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals("{18}", string0);
      assertNotNull(string0);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "1", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isRecordType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isParameterizedType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNominalConstructor());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isEnumType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      
      FunctionType functionType2 = (FunctionType)functionType1.getLeastSupertype(functionType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isRecordType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isParameterizedType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNominalConstructor());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isEnumType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isParameterizedType());
      assertFalse(functionType2.isVoidType());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isNoResolvedType());
      assertTrue(functionType2.isOrdinaryFunction());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isNominalConstructor());
      assertFalse(functionType2.isNullType());
      assertFalse(functionType2.isNoType());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.isCheckedUnknownType());
      assertFalse(functionType2.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isReturnTypeInferred());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isAllType());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.isTemplateType());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.hasCachedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType0, functionType2);
      assertSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertSame(functionType2, functionType1);
      assertNotSame(functionType2, functionType0);
      assertNotNull(functionType2);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "RZoNr?~D", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      FunctionType functionType1 = (FunctionType)functionType0.getPropertyType("bind");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.canBeCalled());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isAllType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isResolved());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      
      FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.canBeCalled());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isAllType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isResolved());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.hasCachedValues());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isReturnTypeInferred());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isTemplateType());
      assertFalse(functionType2.isParameterizedType());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isNullType());
      assertFalse(functionType2.isAllType());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.isNominalConstructor());
      assertTrue(functionType2.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isVoidType());
      assertFalse(functionType2.isCheckedUnknownType());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType2, functionType0);
      assertNotSame(functionType2, functionType1);
      assertNotNull(functionType2);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("ORDINARY", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      boolean boolean0 = functionType0.isSubtype(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noObjectType0);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(instanceObjectType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      noResolvedType0.setPrototypeBasedOn((ObjectType) instanceObjectType0, (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoObjectType noObjectType1 = (NoObjectType)noResolvedType0.getTopMostDefiningType("Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noObjectType1.isNominalType());
      assertFalse(noObjectType1.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noObjectType1.getPropertiesCount());
      assertFalse(noObjectType1.isEnumType());
      assertFalse(noObjectType1.isStringValueType());
      assertFalse(noObjectType1.isUnionType());
      assertFalse(noObjectType1.isEnumElementType());
      assertFalse(noObjectType1.isNoResolvedType());
      assertFalse(noObjectType1.isNominalConstructor());
      assertFalse(noObjectType1.isVoidType());
      assertTrue(noObjectType1.matchesStringContext());
      assertTrue(noObjectType1.matchesObjectContext());
      assertEquals(0, noObjectType1.getExtendedInterfacesCount());
      assertFalse(noObjectType1.isTemplateType());
      assertTrue(noObjectType1.hasCachedValues());
      assertTrue(noObjectType1.matchesNumberContext());
      assertFalse(noObjectType1.isParameterizedType());
      assertFalse(noObjectType1.isReturnTypeInferred());
      assertFalse(noObjectType1.isResolved());
      assertNull(noObjectType1.getReferenceName());
      assertFalse(noObjectType1.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType1.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType1.canBeCalled());
      assertFalse(noObjectType1.isInterface());
      assertTrue(noObjectType1.isConstructor());
      assertTrue(noObjectType1.isNoObjectType());
      assertFalse(noObjectType1.isAllType());
      assertFalse(noObjectType1.isFunctionType());
      assertFalse(noObjectType1.isOrdinaryFunction());
      assertFalse(noObjectType1.isNoType());
      assertFalse(noObjectType1.isBooleanValueType());
      assertFalse(noObjectType1.isNullType());
      assertFalse(noObjectType1.isFunctionPrototypeType());
      assertFalse(noObjectType1.isNumberValueType());
      assertTrue(noObjectType1.hasInstanceType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(noObjectType1, noObjectType0);
      assertNotNull(noObjectType1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "]\"bV?N An/", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isAllType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(instanceObjectType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      noResolvedType0.setPrototypeBasedOn((ObjectType) instanceObjectType0, (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isAllType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)noResolvedType0.getTopMostDefiningType("Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isParameterizedType());
      assertFalse(noResolvedType1.isStringValueType());
      assertFalse(noResolvedType1.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.hasCachedValues());
      assertTrue(noResolvedType1.canBeCalled());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isTemplateType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isEnumElementType());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isInterface());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(noResolvedType0, noResolvedType1);
      assertSame(noResolvedType1, noResolvedType0);
      assertNotNull(noResolvedType1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.getBindReturnType(0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      // Undeclared exception!
      try { 
        functionType0.getTopMostDefiningType("Not declared as a constructor");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("]\"bV?N An/", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(1, immutableList0.size());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(immutableList0);
      
      functionType0.setExtendedInterfaces(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(1, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(1, immutableList0.size());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = functionType0.defineProperty("function (this:{1764487530}): {9}", errorFunctionType0, true, (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(1, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
      
      FunctionType functionType1 = (FunctionType)functionType0.getTopMostDefiningType("function (this:{1764487530}): {9}");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(1, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isRecordType());
      assertEquals(1, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.isInterface());
      assertFalse(functionType1.isBooleanValueType());
      assertTrue(functionType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isOrdinaryFunction());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isAllType());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isReturnTypeInferred());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(functionType0, functionType1);
      assertSame(functionType1, functionType0);
      assertNotNull(functionType1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNominalType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.matchesNumberContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(nullType0);
      
      NoType noType0 = (NoType)nullType0.restrictByNotNullOrUndefined();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNominalType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.canBeCalled());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noType0);
      
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) noType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) nullType0, jSTypeArray0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNominalType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertEquals(1, jSTypeArray0.length);
      
      ObjectType objectType0 = FunctionType.getTopDefiningInterface(functionType0, "com.google.common.collect.Sets$SetView");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNominalType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNull(objectType0);
      assertEquals(1, jSTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "]\"bV?N An/", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      
      // Undeclared exception!
      try { 
        functionType1.getSuperClassConstructor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Node node0 = Node.newString("thisType", 40, 40);
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertEquals(40, node0.getLineno());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals(40, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertTrue(node0.isString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(163880, node0.getSourcePosition());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotNull(node0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertEquals(40, node0.getLineno());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals(40, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertTrue(node0.isString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(163880, node0.getSourcePosition());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      
      FunctionType functionType1 = jSTypeRegistry1.createFunctionType((JSType) functionType0, node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertEquals(40, node0.getLineno());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals(40, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertTrue(node0.isString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(163880, node0.getSourcePosition());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isResolved());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.canBeCalled());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(functionType0, functionType1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(functionType1.equals((Object)functionType0));
      
      JSType.TypePair jSType_TypePair0 = functionType0.getTypesUnderShallowEquality(functionType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertEquals(40, node0.getLineno());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals(40, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertTrue(node0.isString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(163880, node0.getSourcePosition());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.hasInstanceType());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isResolved());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.canBeCalled());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(functionType0, functionType1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(functionType1, functionType0);
      assertNotNull(jSType_TypePair0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(functionType1.equals((Object)functionType0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = Node.newString("Date", 4, 1078);
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals(17462, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertEquals(1078, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertEquals(4, node0.getLineno());
      assertFalse(node0.isFunction());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotNull(node0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "l2=1b4:xk(:ovx8dhL");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, node0);
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals(17462, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertEquals(1078, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertEquals(4, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isVoidType());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, node0);
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals(17462, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertEquals(1078, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertEquals(4, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType1.isBooleanValueType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isNullType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isEnumType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.hasInstanceType());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      
      FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals(17462, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertEquals(1078, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertEquals(4, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType1.isBooleanValueType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isNullType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isEnumType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.hasInstanceType());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isReturnTypeInferred());
      assertTrue(functionType2.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isNullType());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isCheckedUnknownType());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.isVoidType());
      assertTrue(functionType2.isOrdinaryFunction());
      assertFalse(functionType2.isNominalConstructor());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.hasCachedValues());
      assertFalse(functionType2.isParameterizedType());
      assertFalse(functionType2.isAllType());
      assertFalse(functionType2.isTemplateType());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType2, functionType1);
      assertNotSame(functionType2, functionType0);
      assertNotNull(functionType2);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType1));
      assertFalse(functionType2.equals((Object)functionType0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      JSTypeNative jSTypeNative1 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[5];
      jSTypeNativeArray0[0] = jSTypeNative1;
      jSTypeNativeArray0[1] = jSTypeNative0;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_FUNCTION_TYPE;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[3];
      JSTypeNative jSTypeNative1 = JSTypeNative.ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative1;
      jSTypeNativeArray0[1] = jSTypeNative0;
      jSTypeNativeArray0[2] = jSTypeNative0;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType0);
      assertEquals(3, jSTypeNativeArray0.length);
      
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, true, jSTypeArray0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertEquals(3, jSTypeNativeArray0.length);
      assertEquals(1, jSTypeArray0.length);
      
      String string0 = functionType0.toStringHelper(false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals("function (new:{...}, ...[Function]): Function", string0);
      assertNotNull(string0);
      assertEquals(3, jSTypeNativeArray0.length);
      assertEquals(1, jSTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isEnumType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(recordType0);
      
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) recordType0;
      jSTypeArray0[1] = (JSType) recordType0;
      jSTypeArray0[2] = (JSType) recordType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) recordType0, jSTypeArray0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNominalConstructor());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isEnumType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertEquals(3, jSTypeArray0.length);
      
      Node node0 = Node.newString("Named type with empty name component", 1, 1);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDo());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals(4097, node0.getSourcePosition());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertNotNull(node0);
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType(jSTypeArray0[0], node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDo());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals(4097, node0.getSourcePosition());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isRecordType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoObjectType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isResolved());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isStringValueType());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertEquals(3, jSTypeArray0.length);
      assertFalse(functionType1.equals((Object)functionType0));
      
      FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNominalConstructor());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isEnumType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDo());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals(4097, node0.getSourcePosition());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(functionType1.hasInstanceType());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isRecordType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoObjectType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isResolved());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType2.isReturnTypeInferred());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isNullType());
      assertTrue(functionType2.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.isAllType());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.isParameterizedType());
      assertFalse(functionType2.isTemplateType());
      assertTrue(functionType2.hasCachedValues());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isCheckedUnknownType());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isVoidType());
      assertFalse(functionType2.isNominalConstructor());
      assertFalse(functionType2.isNoType());
      assertTrue(functionType2.isOrdinaryFunction());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isNumberValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertSame(functionType0, functionType2);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType2, functionType1);
      assertSame(functionType2, functionType0);
      assertNotNull(functionType2);
      assertEquals(3, jSTypeArray0.length);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType1));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isParameterizedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(recordType0);
      
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) recordType0;
      jSTypeArray0[1] = (JSType) recordType0;
      jSTypeArray0[2] = (JSType) recordType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) recordType0, jSTypeArray0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNominalType());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertEquals(3, jSTypeArray0.length);
      
      Node node0 = Node.newString("Named type with empty name component", 1, 1);
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals(4097, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertNotNull(node0);
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType(jSTypeArray0[0], node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals(4097, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isEnumType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNominalType());
      assertTrue(functionType1.isFunctionType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.canBeCalled());
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertEquals(3, jSTypeArray0.length);
      assertFalse(functionType1.equals((Object)functionType0));
      
      FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, false);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNominalType());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals(4097, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isEnumType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNominalType());
      assertTrue(functionType1.isFunctionType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isParameterizedType());
      assertTrue(functionType2.hasCachedValues());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.isVoidType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isNoResolvedType());
      assertTrue(functionType2.isOrdinaryFunction());
      assertFalse(functionType2.isNominalConstructor());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isNullType());
      assertFalse(functionType2.isCheckedUnknownType());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isTemplateType());
      assertTrue(functionType2.isFunctionType());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isAllType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType0, functionType2);
      assertSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType2, functionType0);
      assertSame(functionType2, functionType1);
      assertNotNull(functionType2);
      assertEquals(3, jSTypeArray0.length);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(recordType0);
      
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) recordType0;
      jSTypeArray0[1] = (JSType) recordType0;
      jSTypeArray0[2] = (JSType) recordType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) recordType0, jSTypeArray0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isNominalConstructor());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertEquals(3, jSTypeArray0.length);
      
      Node node0 = Node.newString("Named type with empty name component", 1, 1);
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(4097, node0.getSourcePosition());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertNotNull(node0);
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType(jSTypeArray0[0], node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(4097, node0.getSourcePosition());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isVoidType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isConstructor());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isUnionType());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertEquals(3, jSTypeArray0.length);
      assertFalse(functionType1.equals((Object)functionType0));
      
      FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isNominalConstructor());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(4097, node0.getSourcePosition());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isVoidType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isConstructor());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType2.isParameterizedType());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isNominalType());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.isReturnTypeInferred());
      assertTrue(functionType2.hasCachedValues());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isAllType());
      assertFalse(functionType2.isTemplateType());
      assertFalse(functionType2.isNullType());
      assertFalse(functionType2.isInterface());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertTrue(functionType2.isOrdinaryFunction());
      assertFalse(functionType2.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isVoidType());
      assertFalse(functionType2.isCheckedUnknownType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType2, functionType1);
      assertSame(functionType2, functionType0);
      assertNotNull(functionType2);
      assertEquals(3, jSTypeArray0.length);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(nullType0);
      
      NoType noType0 = (NoType)nullType0.restrictByNotNullOrUndefined();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isEnumType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noType0);
      
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) noType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) nullType0, jSTypeArray0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isVoidType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertEquals(1, jSTypeArray0.length);
      
      Node node0 = Node.newString("prototype", 8448, 310);
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(8448, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(310, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertEquals(34603318, node0.getSourcePosition());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertNotNull(node0);
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) noType0, node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isEnumType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(8448, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(310, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertEquals(34603318, node0.getSourcePosition());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isNoType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isRecordType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isUnionType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      
      FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isEnumType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(8448, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(310, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertEquals(34603318, node0.getSourcePosition());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isNoType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isRecordType());
      assertTrue(functionType1.canBeCalled());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isUnionType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isAllType());
      assertFalse(functionType2.isNullType());
      assertFalse(functionType2.isTemplateType());
      assertTrue(functionType2.isFunctionType());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertTrue(functionType2.isOrdinaryFunction());
      assertFalse(functionType2.isReturnTypeInferred());
      assertFalse(functionType2.isVoidType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.isCheckedUnknownType());
      assertTrue(functionType2.hasCachedValues());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.isParameterizedType());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isNominalConstructor());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isEnumElementType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertSame(functionType1, functionType2);
      assertSame(functionType2, functionType1);
      assertNotSame(functionType2, functionType0);
      assertNotNull(functionType2);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isInterface());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(nullType0);
      
      NoType noType0 = (NoType)nullType0.restrictByNotNullOrUndefined();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isInterface());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noType0);
      
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) noType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noType0, jSTypeArray0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isInterface());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isResolved());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertEquals(1, jSTypeArray0.length);
      
      Node node0 = Node.newString("P `7 *Vg/", 0, 1);
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertTrue(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotNull(node0);
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) noType0, node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isInterface());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isResolved());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertTrue(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isNominalType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isRecordType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isReturnTypeInferred());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      
      FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isInterface());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.hasCachedValues());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isResolved());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertTrue(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isNominalType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isRecordType());
      assertTrue(functionType1.canBeCalled());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isReturnTypeInferred());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isNullType());
      assertTrue(functionType2.isOrdinaryFunction());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isAllType());
      assertFalse(functionType2.isVoidType());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.isNominalConstructor());
      assertFalse(functionType2.isCheckedUnknownType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.hasCachedValues());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isTemplateType());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.isReturnTypeInferred());
      assertFalse(functionType2.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType2, functionType0);
      assertNotSame(functionType2, functionType1);
      assertNotNull(functionType2);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType1));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) voidType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, jSTypeArray0[0], (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, jSTypeArray0[0], (JSType) voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertEquals(7, immutableList0.size());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList0);
      assertEquals(2, jSTypeArray0.length);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSTypeArray0[0], (List<JSType>) immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertEquals(7, immutableList0.size());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertEquals(2, jSTypeArray0.length);
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, false, jSTypeArray0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertEquals(7, immutableList0.size());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNominalType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isResolved());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isInterface());
      assertTrue(functionType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertEquals(2, jSTypeArray0.length);
      assertFalse(functionType1.equals((Object)functionType0));
      
      FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertEquals(7, immutableList0.size());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNominalType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isResolved());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isInterface());
      assertTrue(functionType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotNull(functionType2);
      assertEquals(2, jSTypeArray0.length);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType1));
      assertFalse(functionType2.equals((Object)functionType0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("ALWAYS_FALSE", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      FunctionType functionType1 = (FunctionType)functionType0.getPropertyType("bind");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isAllType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isVoidType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      
      FunctionType functionType2 = jSTypeRegistry0.createFunctionType((JSType) functionType1, (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isAllType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isVoidType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isAllType());
      assertFalse(functionType2.isNullType());
      assertTrue(functionType2.isOrdinaryFunction());
      assertFalse(functionType2.isTemplateType());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.isReturnTypeInferred());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isVoidType());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.hasCachedValues());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isParameterizedType());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isCheckedUnknownType());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isEnumElementType());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType2, functionType0);
      assertNotSame(functionType2, functionType1);
      assertNotNull(functionType2);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType1));
      
      FunctionType functionType3 = functionType1.supAndInfHelper(functionType2, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isAllType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isVoidType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isAllType());
      assertFalse(functionType2.isNullType());
      assertTrue(functionType2.isOrdinaryFunction());
      assertFalse(functionType2.isTemplateType());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.isReturnTypeInferred());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isVoidType());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.hasCachedValues());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isParameterizedType());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isCheckedUnknownType());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isEnumElementType());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isNominalConstructor());
      assertFalse(functionType3.isParameterizedType());
      assertFalse(functionType3.isNoResolvedType());
      assertFalse(functionType3.isConstructor());
      assertFalse(functionType3.isNominalType());
      assertFalse(functionType3.hasInstanceType());
      assertFalse(functionType3.isCheckedUnknownType());
      assertFalse(functionType3.hasCachedValues());
      assertFalse(functionType3.isNoType());
      assertFalse(functionType3.isNoObjectType());
      assertFalse(functionType3.isStringValueType());
      assertFalse(functionType3.isEnumType());
      assertFalse(functionType3.isFunctionPrototypeType());
      assertFalse(functionType3.isVoidType());
      assertFalse(functionType3.isBooleanValueType());
      assertFalse(functionType3.isNumberValueType());
      assertFalse(functionType3.isRecordType());
      assertFalse(functionType3.isUnionType());
      assertFalse(functionType3.isTemplateType());
      assertFalse(functionType3.isAllType());
      assertFalse(functionType3.isInterface());
      assertFalse(functionType3.isReturnTypeInferred());
      assertFalse(functionType3.isResolved());
      assertTrue(functionType3.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType3.getPossibleToBooleanOutcomes());
      assertFalse(functionType3.isNullType());
      assertTrue(functionType3.isOrdinaryFunction());
      assertEquals(0, functionType3.getExtendedInterfacesCount());
      assertFalse(functionType3.isEnumElementType());
      assertFalse(functionType3.isNominalConstructor());
      assertTrue(functionType3.canBeCalled());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType0, functionType3);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType1, functionType3);
      assertNotSame(functionType2, functionType0);
      assertNotSame(functionType2, functionType3);
      assertNotSame(functionType2, functionType1);
      assertNotSame(functionType3, functionType1);
      assertNotSame(functionType3, functionType0);
      assertNotSame(functionType3, functionType2);
      assertNotNull(functionType3);
      assertFalse(functionType0.equals((Object)functionType2));
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType2));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType1));
      assertFalse(functionType3.equals((Object)functionType1));
      assertFalse(functionType3.equals((Object)functionType0));
      assertFalse(functionType3.equals((Object)functionType2));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      Node node0 = Node.newString("Named type with empty name component", 1, 0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node0);
      
      Iterable<ObjectType> iterable0 = errorFunctionType0.getImplementedInterfaces();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(iterable0);
      
      boolean boolean0 = errorFunctionType0.defineProperty("prototype", noResolvedType0, true, node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNominalConstructor());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesStringContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(booleanType0);
      
      boolean boolean0 = errorFunctionType0.defineProperty("prototype", booleanType0, false, (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNominalConstructor());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesStringContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      FunctionType functionType1 = functionType0.getBindReturnType(444);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.hasInstanceType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isAllType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.getBindReturnType(5760);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.getBindReturnType(0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      FunctionType functionType1 = functionType0.supAndInfHelper(noResolvedType0, true);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      
      FunctionType functionType2 = functionType1.supAndInfHelper(noResolvedType0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isUnionType());
      assertTrue(functionType2.isConstructor());
      assertFalse(functionType2.isResolved());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isStringValueType());
      assertEquals(Integer.MAX_VALUE, functionType2.getPropertiesCount());
      assertFalse(functionType2.hasCachedValues());
      assertFalse(functionType2.isParameterizedType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isReturnTypeInferred());
      assertFalse(functionType2.isNullType());
      assertTrue(functionType2.matchesObjectContext());
      assertFalse(functionType2.isOrdinaryFunction());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isTemplateType());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertTrue(functionType2.isNoResolvedType());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isNominalConstructor());
      assertNull(functionType2.getReferenceName());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isAllType());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.isVoidType());
      assertTrue(functionType2.matchesNumberContext());
      assertFalse(functionType2.isFunctionType());
      assertTrue(functionType2.matchesStringContext());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isRecordType());
      assertTrue(functionType2.hasInstanceType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isNumberValueType());
      assertTrue(functionType2.isNullable());
      assertFalse(functionType2.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(noResolvedType0, functionType2);
      assertSame(functionType2, noResolvedType0);
      assertNotNull(functionType2);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.getBindReturnType((-1741250976));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "apply");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      FunctionType functionType0 = (FunctionType)errorFunctionType0.getPropertyType("apply");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Node node0 = Node.newString(105, "new:", 105, 105);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertEquals(430185, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertEquals(105, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertTrue(node0.isFunction());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "new:", node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertEquals(430185, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertEquals(105, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertTrue(node0.isFunction());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      UnknownType unknownType0 = (UnknownType)functionType0.getPropertyType("ZoNru");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertEquals(430185, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertEquals(105, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertTrue(node0.isFunction());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.matchesObjectContext());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isAllType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.hasDisplayName());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isVoidType());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(unknownType0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "fpnctio7 (this:{1764487530}): {9}", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isAllType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      FunctionType functionType1 = (FunctionType)functionType0.getPropertyType("call");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isBooleanValueType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isEnumType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isParameterizedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("]\"bV?N An/", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = functionType0.defineProperty("function (this:{1764487530}): {9}", errorFunctionType0, true, (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)functionType0.getPropertyType("function (this:{1764487530}): {9}");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertFalse(errorFunctionType1.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType1.isConstructor());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isUnionType());
      assertFalse(errorFunctionType1.isRecordType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertFalse(errorFunctionType1.isVoidType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isStringValueType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isNominalType());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertFalse(errorFunctionType1.hasCachedValues());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertNotNull(errorFunctionType1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      try { 
        noResolvedType0.setExtendedInterfaces((List<ObjectType>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "]\"bV?N An/", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(1, immutableList0.size());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList0);
      
      functionType0.setExtendedInterfaces(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(1, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(1, immutableList0.size());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      Iterable<ObjectType> iterable0 = functionType0.getAllExtendedInterfaces();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(1, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      Iterable<ObjectType> iterable0 = noResolvedType0.getAllImplementedInterfaces();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("ALWAYS_FALSE", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      Iterable<ObjectType> iterable0 = functionType0.getAllImplementedInterfaces();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNoObjectType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(recordType0);
      
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[1] = (JSType) recordType0;
      jSTypeArray0[2] = (JSType) recordType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) recordType0, jSTypeArray0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNoObjectType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNominalConstructor());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertEquals(3, jSTypeArray0.length);
      
      Node node0 = Node.newString("Named type with empty name component", 1, 1);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertEquals(4097, node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertNotNull(node0);
      
      boolean boolean0 = functionType0.defineProperty("prototype", jSTypeArray0[1], false, node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNoObjectType());
      assertTrue(recordType0.isFunctionPrototypeType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.hasReferenceName());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNominalConstructor());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertEquals(4097, node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertTrue(boolean0);
      assertEquals(3, jSTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("ALWAYS_FALSE", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      FunctionType functionType1 = (FunctionType)functionType0.getPropertyType("bind");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType1.isRecordType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isAllType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isEnumType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isBooleanValueType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      
      functionType0.setPrototypeBasedOn((ObjectType) functionType1, (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isRecordType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isAllType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isEnumType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isBooleanValueType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noType0);
      
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1, nodeArray0);
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertEquals(1, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(node0);
      assertEquals(0, nodeArray0.length);
      
      boolean boolean0 = noType0.setPrototype((ObjectType) null, node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isVoidType());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertEquals(1, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertFalse(boolean0);
      assertEquals(0, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      Set<String> set0 = noResolvedType0.getOwnPropertyNames();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      boolean boolean0 = noResolvedType0.hasImplementedInterfaces();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
      
      Set<String> set0 = noResolvedType0.getOwnPropertyNames();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)FunctionType.getTopDefiningInterface(errorFunctionType0, "prototype");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType1.isTemplateType());
      assertTrue(errorFunctionType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertFalse(errorFunctionType1.isRecordType());
      assertFalse(errorFunctionType1.isInterface());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertTrue(errorFunctionType1.isConstructor());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isUnionType());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertFalse(errorFunctionType1.isNominalType());
      assertFalse(errorFunctionType1.isVoidType());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertTrue(errorFunctionType1.hasCachedValues());
      assertFalse(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertNotNull(errorFunctionType1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Node node0 = Node.newString("thisType", 40, 40);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertEquals(40, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertEquals(40, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(163880, node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertNotNull(node0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertEquals(40, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertEquals(40, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(163880, node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      int int0 = functionType0.getMaxArguments();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertEquals(40, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertEquals(40, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(163880, node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isUnionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      int int0 = errorFunctionType0.getMaxArguments();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isUnionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEnumType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isUnionType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(allType0);
      
      JSType[] jSTypeArray0 = new JSType[1];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, false, jSTypeArray0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEnumType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isUnionType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertEquals(1, jSTypeArray0.length);
      
      int int0 = functionType0.getMinArguments();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEnumType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isUnionType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, int0);
      assertEquals(1, jSTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      int int0 = errorFunctionType0.getMinArguments();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesNumberContext());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noType0);
      
      int int0 = noType0.getMinArguments();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesNumberContext());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "braceless_type");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.hasImplementedInterfaces();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("fpnctio7 (this:{1764487530}): {9}", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      boolean boolean0 = functionType0.hasImplementedInterfaces();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      ArrayList<ObjectType> arrayList0 = new ArrayList<ObjectType>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((ObjectType) noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
      
      noResolvedType0.setImplementedInterfaces(arrayList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean1 = noResolvedType0.hasImplementedInterfaces();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createInterfaceType((String) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "com.google.common.collect.ImmutableEntry");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("com.google.common.collect.ImmutableEntry", templateType0.getReferenceName());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(templateType0);
      
      JSType[] jSTypeArray0 = new JSType[9];
      jSTypeArray0[0] = (JSType) templateType0;
      jSTypeArray0[1] = (JSType) templateType0;
      jSTypeArray0[2] = (JSType) templateType0;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(modificationVisitor0);
      
      JSType jSType0 = modificationVisitor0.caseStringType();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isTemplateType());
      assertEquals("string", jSType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNominalConstructor());
      assertTrue(jSType0.isStringValueType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.matchesStringContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType0);
      
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = (JSType) templateType0;
      jSTypeArray0[5] = (JSType) templateType0;
      jSTypeArray0[6] = (JSType) templateType0;
      jSTypeArray0[7] = (JSType) templateType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSTypeArray0[1], jSTypeArray0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertEquals(9, jSTypeArray0.length);
      
      jSTypeArray0[8] = (JSType) functionType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertEquals(9, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(83, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDec());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotNull(node0);
      assertEquals(9, jSTypeArray0.length);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createInterfaceType("Function", node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Node node0 = Node.newNumber(797.574541);
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createConstructorType("com.google.javascript.rhino.jstype.PrototypeObjectType", node0, node0, (JSType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      List<FunctionType> list0 = noResolvedType0.getSubTypes();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      Iterable<ObjectType> iterable0 = noResolvedType0.getOwnImplementedInterfaces();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Node node0 = Node.newString(105, "new:", 105, 105);
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isComma());
      assertEquals(430185, node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertEquals(105, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertTrue(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "new:", node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isComma());
      assertEquals(430185, node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertEquals(105, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertTrue(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isVoidType());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isComma());
      assertEquals(430185, node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertEquals(105, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertTrue(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isBooleanValueType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isAllType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isReturnTypeInferred());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      int int0 = noResolvedType0.getExtendedInterfacesCount();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("ORDINARY", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      FunctionType functionType1 = (FunctionType)functionType0.getPropertyType("bind");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isEnumType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNullType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isVoidType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isReturnTypeInferred());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      
      boolean boolean0 = functionType0.isSubtype(functionType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoResolvedType());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isEnumType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNullType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isVoidType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isReturnTypeInferred());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(boolean0);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.canBeCalled();
      assertTrue(boolean0);
      assertFalse(noResolvedType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.isInstanceType();
      assertFalse(noType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      errorFunctionType0.isReturnTypeInferred();
      assertFalse(errorFunctionType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.hasEqualCallType(noResolvedType0);
      assertFalse(noResolvedType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, errorFunctionType0);
      modificationVisitor0.caseParameterizedType(parameterizedType0);
      assertFalse(errorFunctionType0.isInterface());
  }
}

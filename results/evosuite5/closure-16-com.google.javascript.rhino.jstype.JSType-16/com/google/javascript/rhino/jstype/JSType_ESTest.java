/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 21:54:25 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isParameterizedType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(recordType0);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) recordType0, (JSType) recordType0, (JSType) recordType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isParameterizedType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isResolved());
      assertEquals(3, immutableList0.size());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) recordType0, (List<JSType>) immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isParameterizedType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoResolvedType());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isResolved());
      assertEquals(3, immutableList0.size());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.canBeCalled());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      FunctionType functionType1 = (FunctionType)functionType0.resolveInternal(simpleErrorReporter0, recordType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isParameterizedType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoResolvedType());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertTrue(recordType0.isResolved());
      assertEquals(3, immutableList0.size());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isResolved());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertTrue(functionType1.isObject());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType1);
      assertSame(functionType0, functionType1);
      assertSame(functionType1, functionType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isTemplateType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(parameterizedType0);
      
      boolean boolean0 = noResolvedType0.isSubtype(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isTemplateType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumType());
      assertTrue(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(allType0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isVoidType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isFunctionType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(stringType0);
      
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isVoidType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isFunctionType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertTrue(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNoResolvedType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      boolean boolean0 = functionType0.isSubtype(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNoResolvedType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "rm<S?f<Zi<G2M%M");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.differsFrom(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "rm<S?f<Zi<G2M%M");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      UnknownType unknownType0 = (UnknownType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isObject());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isNominalType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(unknownType0);
      
      boolean boolean0 = errorFunctionType0.differsFrom(unknownType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isObject());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isNominalType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNominalConstructor());
      assertTrue(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(stringType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.differsFrom(stringType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      UnknownType unknownType0 = (UnknownType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNoType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(unknownType0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.canBeCalled());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(allType0);
      
      boolean boolean0 = unknownType0.differsFrom(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNoType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.canBeCalled());
      assertTrue(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isNoType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(allType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowInequality(allType0);
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isNoType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowInequality(voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.isNullable());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoResolvedType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(nullType0);
      
      JSType.TypePair jSType_TypePair0 = nullType0.getTypesUnderShallowInequality(nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.isNullable());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoResolvedType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isEnumElementType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(stringType0);
      
      JSType.TypePair jSType_TypePair0 = stringType0.getTypesUnderShallowInequality(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isTemplateType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isEnumElementType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNominalConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isParameterizedType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(nullType0);
      
      ImmutableList<NullType> immutableList0 = ImmutableList.of(nullType0, nullType0, nullType0, nullType0, nullType0, nullType0, nullType0, nullType0, nullType0, nullType0, nullType0);
      assertTrue(immutableList0.contains(nullType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNominalConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isParameterizedType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertEquals(11, immutableList0.size());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(immutableList0);
      
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      assertTrue(immutableList0.contains(nullType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNominalConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isParameterizedType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertEquals(11, immutableList0.size());
      assertEquals(11, immutableList1.size());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(immutableList1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList1);
      assertTrue(immutableList0.contains(nullType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNominalConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isParameterizedType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertEquals(11, immutableList0.size());
      assertEquals(11, immutableList1.size());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(unionType0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality(nullType0);
      assertTrue(immutableList0.contains(nullType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNominalConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isParameterizedType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertEquals(11, immutableList0.size());
      assertEquals(11, immutableList1.size());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(allType0);
      
      JSType.TypePair jSType_TypePair0 = allType0.getTypesUnderInequality(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isParameterizedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(nullType0);
      
      JSType.TypePair jSType_TypePair0 = nullType0.getTypesUnderShallowInequality(voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isParameterizedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
      
      JSType.TypePair jSType_TypePair1 = jSType_TypePair0.typeB.getTypesUnderEquality(voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isParameterizedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(jSType_TypePair1.equals((Object)jSType_TypePair0));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair1);
      assertNotSame(jSType_TypePair0, jSType_TypePair1);
      assertNotSame(jSType_TypePair1, jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isInterface());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      
      JSType jSType0 = voidType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isInterface());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNominalType());
      assertTrue(jSType0.isVoidType());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isInterface());
      assertEquals("undefined", jSType0.getDisplayName());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType0);
      assertSame(voidType0, jSType0);
      assertSame(jSType0, voidType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isRecordType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isAllType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(nullType0);
      
      NoType noType0 = (NoType)nullType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isRecordType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isAllType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isCheckedUnknownType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noType0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isEnumElementType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(stringType0);
      
      JSType jSType0 = stringType0.getLeastSupertype(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isEnumElementType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNominalConstructor());
      assertTrue(jSType0.matchesNumberContext());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isInterface());
      assertEquals("string", jSType0.getDisplayName());
      assertFalse(jSType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.isStringValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isAllType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType0);
      assertSame(stringType0, jSType0);
      assertSame(jSType0, stringType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isTemplateType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(recordType0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(stringType0);
      
      JSType.TypePair jSType_TypePair0 = recordType0.getTypesUnderShallowEquality(stringType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isTemplateType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isUnionType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(stringType0);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)stringType0.getGreatestSubtype(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isFunctionType());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.isNoType());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isInterface());
      assertTrue(noResolvedType1.canBeCalled());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType1);
      assertNotSame(noResolvedType0, noResolvedType1);
      assertNotSame(noResolvedType1, noResolvedType0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isEnumElementType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isFunctionType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(stringType0);
      
      JSType jSType0 = stringType0.getLeastSupertype(stringType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isEnumElementType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isFunctionType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isResolved());
      assertEquals("string", jSType0.getDisplayName());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.matchesNumberContext());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType0);
      assertSame(stringType0, jSType0);
      assertSame(jSType0, stringType0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isRecordType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(stringType0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noObjectType0);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType0);
      
      JSType jSType1 = stringType0.getLeastSupertype(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isRecordType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isResolved());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType1.isNoType());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isBooleanValueType());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isParameterizedType());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isOrdinaryFunction());
      assertFalse(jSType1.isFunctionType());
      assertFalse(jSType1.isStringValueType());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.isNominalType());
      assertFalse(jSType1.isEnumType());
      assertFalse(jSType1.isNominalConstructor());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isVoidType());
      assertFalse(jSType1.isAllType());
      assertTrue(jSType1.isUnionType());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.equals((Object)jSType0));
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType1);
      assertNotSame(jSType0, jSType1);
      assertNotSame(jSType1, jSType0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "JSDocInfo");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertEquals("JSDocInfo", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(enumElementType0);
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)enumElementType0.getLeastSupertype(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertEquals("JSDocInfo", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isTemplateType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertTrue(errorFunctionType1.canBeCalled());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType1.isConstructor());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isInterface());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isStringValueType());
      assertTrue(errorFunctionType1.hasCachedValues());
      assertTrue(errorFunctionType1.isObject());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertFalse(errorFunctionType1.isVoidType());
      assertFalse(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isRecordType());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.isUnionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType1);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isAllType());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesNumberContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(stringType0);
      
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isAllType());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType0);
      
      boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isEnumType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesStringContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(stringType0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noType0);
      
      JSType.TypePair jSType_TypePair0 = stringType0.getTypesUnderEquality(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isEnumType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesStringContext());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.hasCachedValues());
      assertTrue(noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumElementType());
      assertTrue(stringType0.isStringValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isRecordType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(stringType0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.matchesNumberContext());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noObjectType0);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.matchesNumberContext());
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType0);
      
      JSType.TypePair jSType_TypePair0 = stringType0.getTypesUnderEquality(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumElementType());
      assertTrue(stringType0.isStringValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isRecordType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.matchesNumberContext());
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
      
      noObjectType0.testForEquality(jSType_TypePair0.typeB);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumElementType());
      assertTrue(stringType0.isStringValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isRecordType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.matchesNumberContext());
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType0);
      
      JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderInequality(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
      
      jSType0.testForEquality(jSType_TypePair0.typeA);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(stringType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      UnknownType unknownType0 = (UnknownType)errorFunctionType0.getPropertyType("Unknown class name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(unknownType0);
      
      JSType.TypePair jSType_TypePair0 = stringType0.getTypesUnderEquality(unknownType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isAllType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isResolved());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNoType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(stringType0);
      
      ObjectType objectType0 = stringType0.dereference();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isAllType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isResolved());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNoType());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isFunctionType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(objectType0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noType0);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noType0, noType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(parameterizedType0);
      
      boolean boolean0 = parameterizedType0.canAssignTo(noType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isNullType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isInterface());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(stringType0);
      
      boolean boolean0 = stringType0.canAssignTo(voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isNullType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isInterface());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isEnumType());
      assertFalse(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesStringContext());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoObjectType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isEnumType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(stringType0);
      
      JSType jSType0 = stringType0.findPropertyType("Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesStringContext());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoObjectType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isEnumType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(allType0);
      
      JSType jSType0 = allType0.findPropertyType("com.google.javascipt.rhino.jstype.JSType$2");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "rm<S?f<Zi<G2M%M");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
      
      boolean boolean0 = jSType_TypePair0.typeA.equals(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesNumberContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      
      boolean boolean0 = voidType0.equals(simpleErrorReporter0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(stringType0);
      
      boolean boolean0 = JSType.isEquivalent(stringType0, stringType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertTrue(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = (NamedType)jSTypeRegistry0.createNamedType("}:p{@", "Not declared as a constructor", (-6871), 1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isInterface());
      assertEquals("}:p{@", namedType0.getReferenceName());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isConstructor());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(namedType0);
      
      boolean boolean0 = JSType.isEquivalent(namedType0, (JSType) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isInterface());
      assertEquals("}:p{@", namedType0.getReferenceName());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isConstructor());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isUnionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(stringType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      NoType noType0 = (NoType)stringType0.getGreatestSubtype(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isUnionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isObject());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noType0);
      
      boolean boolean0 = JSType.isEquivalent((JSType) null, noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isUnionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isObject());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isEnumElementType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(stringType0);
      
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(stringType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isEnumElementType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumType());
      assertTrue(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isAllType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isEnumElementType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(stringType0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Named type with empty name component", 52, 1728);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNominalConstructor());
      assertEquals("Not declared as a constructor", namedType0.getReferenceName());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isInterface());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isConstructor());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(namedType0);
      
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(namedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isAllType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isEnumElementType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNominalConstructor());
      assertEquals("Not declared as a constructor", namedType0.getReferenceName());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isInterface());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isConstructor());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isEnumType());
      assertTrue(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNull(templateType0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
      assertNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "JSDocInfo");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isConstructor());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNumberValueType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertEquals("JSDocInfo", enumElementType0.getReferenceName());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(enumElementType0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isStringValueType());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(booleanType0);
      
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderEquality(enumElementType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isConstructor());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isUnionType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNumberValueType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertEquals("JSDocInfo", enumElementType0.getReferenceName());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isStringValueType());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isInterface());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isResolved());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isCheckedUnknownType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(allType0);
      
      boolean boolean0 = allType0.isGlobalThisType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isInterface());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isResolved());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isCheckedUnknownType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "<a3FP!E}#f<");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isVoidType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isTemplateType());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertFalse(errorFunctionType1.hasCachedValues());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertTrue(errorFunctionType1.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType1.isRecordType());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isUnionType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isInterface());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertFalse(errorFunctionType1.isNominalType());
      assertFalse(errorFunctionType1.isNoType());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertTrue(errorFunctionType1.isObject());
      assertFalse(errorFunctionType1.isNullType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.equals((Object)errorFunctionType0));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType1);
      
      boolean boolean0 = errorFunctionType1.canTestForShallowEqualityWith(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isVoidType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isTemplateType());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertFalse(errorFunctionType1.hasCachedValues());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertTrue(errorFunctionType1.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType1.isRecordType());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isUnionType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isInterface());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertFalse(errorFunctionType1.isNominalType());
      assertFalse(errorFunctionType1.isNoType());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertTrue(errorFunctionType1.isObject());
      assertFalse(errorFunctionType1.isNullType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType0.equals((Object)errorFunctionType1));
      assertFalse(errorFunctionType1.equals((Object)errorFunctionType0));
      assertTrue(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(errorFunctionType0, errorFunctionType1);
      assertNotSame(errorFunctionType1, errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(jSType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(recordType0);
      assertTrue(recordType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      boolean boolean0 = errorFunctionType0.hasDisplayName();
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, stringType0);
      boolean boolean0 = indexedType0.hasDisplayName();
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isNoObjectType());
      assertTrue(indexedType0.isFunctionType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      String string0 = unionType0.toStringHelper(true);
      assertTrue(noResolvedType0.hasCachedValues());
      assertEquals("(?|null)", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = nullType0.getTypesUnderShallowInequality(voidType0);
      assertFalse(voidType0.isNullType());
      assertFalse(nullType0.isVoidType());
      
      boolean boolean0 = jSType_TypePair0.typeA.isFunctionPrototypeType();
      assertFalse(boolean0);
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      voidType0.clearResolved();
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      allType0.forceResolve(simpleErrorReporter0, noResolvedType0);
      assertFalse(noResolvedType0.isResolved());
      assertTrue(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      boolean boolean0 = voidType0.isNumberValueType();
      assertFalse(voidType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      boolean boolean0 = jSType0.isEnumType();
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      voidType0.matchConstraint(unknownType0);
      assertFalse(unknownType0.isResolved());
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.matchesInt32Context();
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(allType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.matchesUint32Context();
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      objectType0.getTypesUnderInequality(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(objectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      boolean boolean0 = allType0.isTheObjectType();
      assertFalse(allType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, errorFunctionType0);
      boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(proxyObjectType0.isAllType());
      assertTrue(proxyObjectType0.isFunctionType());
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isNoType());
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      boolean boolean0 = voidType0.isInstanceType();
      assertFalse(voidType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderEquality(recordType0);
      jSType_TypePair0.typeB.isNamedType();
      assertTrue(recordType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a type name");
      boolean boolean0 = templateType0.isOrdinaryFunction();
      assertFalse(templateType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        voidType0.isNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      boolean boolean0 = jSType0.hasDisplayName();
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      boolean boolean0 = voidType0.canBeCalled();
      assertFalse(voidType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isBooleanValueType();
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      voidType0.setValidator(predicate0);
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      boolean boolean0 = voidType0.isArrayType();
      assertFalse(boolean0);
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      boolean boolean0 = voidType0.isNominalConstructor();
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertFalse(boolean0);
      assertFalse(voidType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        voidType0.canTestForEqualityWith(voidType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      voidType0.unboxesTo();
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      boolean boolean0 = voidType0.isNumberObjectType();
      assertFalse(voidType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      boolean boolean0 = voidType0.isStringObjectType();
      assertFalse(voidType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      voidType0.toAnnotationString();
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      boolean boolean0 = voidType0.isDateType();
      assertFalse(boolean0);
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.isString();
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      JSType jSType0 = voidType0.collapseUnion();
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      boolean boolean0 = voidType0.isRegexpType();
      assertFalse(boolean0);
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test85()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      String string0 = voidType0.toDebugHashCodeString();
      assertFalse(voidType0.isResolved());
      assertEquals("{1}", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      voidType0.getJSDocInfo();
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      ObjectType objectType0 = errorFunctionType0.dereference();
      assertNotNull(objectType0);
      assertFalse(objectType0.isNoObjectType());
      assertTrue(objectType0.isFunctionType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      boolean boolean0 = voidType0.isBooleanObjectType();
      assertFalse(boolean0);
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      boolean boolean0 = voidType0.isStringValueType();
      assertFalse(voidType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Named type with empty name component", 52, 1728);
      assertFalse(namedType0.isResolved());
      
      JSType.safeResolve(namedType0, simpleErrorReporter0, namedType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      JSType jSType0 = errorFunctionType0.getPropertyType("Unknown class name");
      jSType0.getTypesUnderShallowEquality(errorFunctionType0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(jSType0.isNoType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(jSType0.isNoObjectType());
  }
}

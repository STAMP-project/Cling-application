/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 16:57:18 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LocalDateTime_ESTest extends LocalDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1490);
      localDateTime0.toString((String) null, locale0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Locale locale0 = Locale.ENGLISH;
      try { 
        localDateTime0.toString("Invalid encoding", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime(1286L, (DateTimeZone) fixedDateTimeZone0);
      localDateTime0.toString((String) null);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
      try { 
        localDateTime0.toString("Chronology must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        localDateTime0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.minusMillis(0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.minusMillis(292278993);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.minusSeconds(0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.minusSeconds((-1077));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime(1286L, (DateTimeZone) fixedDateTimeZone0);
      localDateTime0.minusMinutes(0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime(1286L, (DateTimeZone) fixedDateTimeZone0);
      localDateTime0.minusMinutes(1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1L));
      localDateTime0.minusHours(0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) julianChronology0);
      localDateTime0.minusHours((-1060));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.minusDays(0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) julianChronology0);
      localDateTime0.minusDays((-1060));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      localDateTime0.minusWeeks(0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.minusWeeks(44);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime(1286L, (DateTimeZone) fixedDateTimeZone0);
      localDateTime0.minusMonths(0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.minusMonths(20503125);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.minusYears(0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.minusYears(374);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusMillis(0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusMillis(464);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(4);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(1286L, (DateTimeZone) fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(5);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(1286L, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusHours(0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(1286L, (DateTimeZone) fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusHours((-573));
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusDays(0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusDays(4);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(2715);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(0);
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(2666);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusYears(0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(1286L, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusYears(470);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) julianChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Minutes minutes0 = Minutes.MIN_VALUE;
      assertEquals(Integer.MIN_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(minutes0, 0);
      assertEquals(4, localDateTime0.size());
      assertEquals(Integer.MIN_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded((ReadablePeriod) null, 1277);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gregorianChronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      LocalDateTime localDateTime1 = localDateTime0.withDurationAdded(duration0, 0);
      assertEquals(4, localDateTime0.size());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, 0);
      assertEquals(4, localDateTime0.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.withFieldAdded((DurationFieldType) null, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) julianChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.withField((DateTimeFieldType) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        localDateTime0.withField(dateTimeFieldType0, 3615);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3615 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withFields((ReadablePartial) null);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withFields(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, 2);
      assertEquals(4, localDateTime0.size());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      
      boolean boolean0 = localDateTime0.isBefore(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(4, localDateTime1.size());
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try { 
        localDateTime0.compareTo((ReadablePartial) localDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gJChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Date date0 = localDateTime0.toDate();
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      assertNotNull(strictChronology0);
      
      boolean boolean0 = localDateTime0.equals(strictChronology0);
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      assertEquals(4, localDateTime0.size());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfCeilingCopy();
      assertEquals(4, localDateTime0.size());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      
      Hours hours0 = Hours.MAX_VALUE;
      assertEquals(1, hours0.size());
      assertEquals(Integer.MAX_VALUE, hours0.getHours());
      assertNotNull(hours0);
      
      LocalDateTime localDateTime2 = localDateTime1.minus((ReadablePeriod) hours0);
      assertEquals(4, localDateTime0.size());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(4, localDateTime1.size());
      assertEquals(1, hours0.size());
      assertEquals(Integer.MAX_VALUE, hours0.getHours());
      assertEquals(4, localDateTime2.size());
      assertNotNull(localDateTime2);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      
      Date date0 = localDateTime2.toDate();
      assertEquals(4, localDateTime0.size());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(4, localDateTime1.size());
      assertEquals(1, hours0.size());
      assertEquals(Integer.MAX_VALUE, hours0.getHours());
      assertEquals(4, localDateTime2.size());
      assertEquals("Wed May 09 17:00:00 GMT 242971", date0.toString());
      assertNotNull(date0);
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = localDateTime0.isSupported((DurationFieldType) null);
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = localDateTime0.isSupported(durationFieldType0);
      assertEquals(4, localDateTime0.size());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(1286L, (DateTimeZone) fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = localDateTime0.isSupported((DateTimeFieldType) null);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(1286L, (DateTimeZone) fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.getValue(1530);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 1530
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.getFieldType((-650));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -650
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getDayOfWeek();
      assertEquals(4, localDateTime0.size());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Years years0 = Years.MAX_VALUE;
      assertEquals(Integer.MAX_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      // Undeclared exception!
      try { 
        localDateTime0.plus((ReadablePeriod) years0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2014 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.withTime((-3963), (-3963), 22, (-3963));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3963 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.withMinuteOfHour(1353);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1353 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getWeekyear();
      assertEquals(4, localDateTime0.size());
      assertEquals(2014, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.era();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekyear();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getCenturyOfEra();
      assertEquals(4, localDateTime0.size());
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withSecondOfMinute(14);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.withEra((-2146755192));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2146755192 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.withDate(53, 53, 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(5);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getMillisOfDay();
      assertEquals(4, localDateTime0.size());
      assertEquals(76881320, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(4, 4, 4, 4, 4, 4);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getYearOfEra();
      assertEquals(4, localDateTime0.size());
      assertEquals(2014, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadableDuration) null);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(1490);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) duration0);
      assertEquals(4, localDateTime0.size());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfWeek(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483647 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.withWeekOfWeekyear((-2147077465));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147077465 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(4, 4, 4, 4, 4);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.monthOfYear();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = new LocalDateTime(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertTrue(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getYearOfCentury();
      assertEquals(4, localDateTime0.size());
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.minuteOfHour();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfEra();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(fixedDateTimeZone0, fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.tz.FixedDateTimeZone
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfYear();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.withHourOfDay(2038);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2038 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.withMonthOfYear(1007);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1007 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getDayOfYear();
      assertEquals(4, localDateTime0.size());
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getEra();
      assertEquals(4, localDateTime0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfYear(1789569706);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1789569706 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.withYearOfCentury(1968);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1968 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getWeekOfWeekyear();
      assertEquals(4, localDateTime0.size());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalTime localTime0 = localDateTime0.toLocalTime();
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfSecond(0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfMonth(2303);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2303 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withYear((-13));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfDay(1674);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Date date0 = localDateTime0.toDate();
      assertEquals("Fri Feb 14 21:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime(1000L, (Chronology) gJChronology0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      LocalDateTime.Property localDateTime_Property0 = new LocalDateTime.Property(localDateTime0, skipDateTimeField0);
      LocalDateTime localDateTime1 = localDateTime_Property0.withMaximumValue();
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfSecond();
      Chronology chronology0 = localDateTime_Property0.getChronology();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundFloorCopy();
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1L));
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfDay();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfFloorCopy();
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfMonth();
      LocalDateTime localDateTime1 = localDateTime_Property0.addToCopy(4978125);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1L));
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.secondOfMinute();
      LocalDateTime localDateTime1 = localDateTime_Property0.getLocalDateTime();
      assertSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime(1000L, (Chronology) gJChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      LocalDateTime localDateTime1 = localDateTime_Property0.roundCeilingCopy();
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfEvenCopy();
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      LocalDateTime localDateTime1 = localDateTime_Property0.addWrapFieldToCopy(1900);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfCentury();
      LocalDateTime localDateTime1 = localDateTime_Property0.addToCopy((long) (-138));
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      LocalDateTime localDateTime1 = localDateTime_Property0.withMinimumValue();
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime(1286L, (DateTimeZone) fixedDateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("5 D+}B0OI,k,GQEk@1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"5 D+}B0OI,k,GQEk@1\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 11:42:34 GMT 2019
 */

package org.apache.commons.math.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator;
import org.apache.commons.math.ode.ContinuousOutputModel;
import org.apache.commons.math.ode.DummyStepInterpolator;
import org.apache.commons.math.ode.EulerStepInterpolator;
import org.apache.commons.math.ode.StepInterpolator;
import org.apache.commons.math.ode.ThreeEighthesStepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ContinuousOutputModel_ESTest extends ContinuousOutputModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertNotNull(classicalRungeKuttaStepInterpolator0);
      
      classicalRungeKuttaStepInterpolator0.currentTime = 3348.008417855371;
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      
      classicalRungeKuttaStepInterpolator0.previousTime = 3348.008417855371;
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator1 = new ClassicalRungeKuttaStepInterpolator();
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertNotNull(classicalRungeKuttaStepInterpolator1);
      
      classicalRungeKuttaStepInterpolator1.currentTime = 89.8712;
      assertEquals(89.8712, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, false);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(89.8712, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, false);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(89.8712, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, false);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(89.8712, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      
      classicalRungeKuttaStepInterpolator0.finalizeStep();
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator1));
      assertNotSame(classicalRungeKuttaStepInterpolator0, classicalRungeKuttaStepInterpolator1);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, true);
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator1));
      assertNotSame(classicalRungeKuttaStepInterpolator0, classicalRungeKuttaStepInterpolator1);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(3348.008417855371, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, false);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(3348.008417855371, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(89.8712, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, true);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(89.8712, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(89.8712, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, true);
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator1));
      assertNotSame(classicalRungeKuttaStepInterpolator0, classicalRungeKuttaStepInterpolator1);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(3348.008417855371, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime(1659.71);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      double double0 = continuousOutputModel0.getInitialTime();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[0];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertNotNull(dummyStepInterpolator0);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, false);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DummyStepInterpolator dummyStepInterpolator1 = new DummyStepInterpolator(doubleArray1, false);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertEquals(Double.NaN, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertNotNull(dummyStepInterpolator1);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, false);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      
      continuousOutputModel0.handleStep(dummyStepInterpolator1, false);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(dummyStepInterpolator1, dummyStepInterpolator0);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertNotNull(continuousOutputModel1);
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      
      continuousOutputModel0.setInterpolatedTime(0.0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(0.0, continuousOutputModel0.getInterpolatedTime(), 0.01);
      
      continuousOutputModel0.setInterpolatedTime(0.0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(0.0, continuousOutputModel0.getInterpolatedTime(), 0.01);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // state vector dimension mismatch
         //
         verifyException("org.apache.commons.math.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertNotNull(classicalRungeKuttaStepInterpolator0);
      
      classicalRungeKuttaStepInterpolator0.previousTime = 3348.00842;
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(3348.00842, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator1 = new ClassicalRungeKuttaStepInterpolator();
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertNotNull(classicalRungeKuttaStepInterpolator1);
      
      classicalRungeKuttaStepInterpolator1.currentTime = (-1691.9);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals((-1691.9), classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, false);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals((-1691.9), classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator1));
      assertNotSame(classicalRungeKuttaStepInterpolator0, classicalRungeKuttaStepInterpolator1);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(3348.00842, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, false);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals((-1691.9), classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, false);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals((-1691.9), classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      
      classicalRungeKuttaStepInterpolator1.previousTime = (-177.1992);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals((-177.1992), classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals((-1691.9), classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator1));
      assertNotSame(classicalRungeKuttaStepInterpolator0, classicalRungeKuttaStepInterpolator1);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(3348.00842, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, true);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals((-1691.9), continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals((-177.1992), classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals((-1691.9), classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator1));
      assertNotSame(classicalRungeKuttaStepInterpolator0, classicalRungeKuttaStepInterpolator1);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals((-1691.9), continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(3348.00842, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime((-3.75));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel1);
      
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      assertEquals(Double.NaN, eulerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(eulerStepInterpolator0.isForward());
      assertNotNull(eulerStepInterpolator0);
      
      continuousOutputModel1.handleStep(eulerStepInterpolator0, true);
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(eulerStepInterpolator0.isForward());
      
      continuousOutputModel0.append(continuousOutputModel1);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[0];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertNotNull(dummyStepInterpolator0);
      
      dummyStepInterpolator0.previousTime = 2322.0;
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(2322.0, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      
      dummyStepInterpolator0.storeTime(3270.0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(3270.0, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(2322.0, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(3270.0, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, false);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(2322.0, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(3270.0, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(3270.0, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(2322.0, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(3270.0, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel1);
      
      continuousOutputModel1.reset();
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      
      double double0 = continuousOutputModel1.getInitialTime();
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      
      continuousOutputModel1.handleStep(dummyStepInterpolator0, false);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(3270.0, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(2322.0, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(3270.0, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(2322.0, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(3270.0, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hole between time ranges
         //
         verifyException("org.apache.commons.math.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      continuousOutputModel0.append(continuousOutputModel0);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[0];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertNotNull(dummyStepInterpolator0);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, false);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      
      DummyStepInterpolator dummyStepInterpolator1 = new DummyStepInterpolator(doubleArray0, true);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertEquals(Double.NaN, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(dummyStepInterpolator1.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertNotNull(dummyStepInterpolator1);
      
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel1);
      
      continuousOutputModel1.handleStep(dummyStepInterpolator0, true);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      
      continuousOutputModel0.reset();
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator1, true);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(dummyStepInterpolator1, dummyStepInterpolator0);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(dummyStepInterpolator1.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      
      // Undeclared exception!
      try { 
        continuousOutputModel1.append(continuousOutputModel0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // propagation direction mismatch
         //
         verifyException("org.apache.commons.math.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedState();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertNotNull(classicalRungeKuttaStepInterpolator0);
      
      classicalRungeKuttaStepInterpolator0.currentTime = 3348.008417855371;
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      
      classicalRungeKuttaStepInterpolator0.previousTime = 3348.008417855371;
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator1 = new ClassicalRungeKuttaStepInterpolator();
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertNotNull(classicalRungeKuttaStepInterpolator1);
      
      classicalRungeKuttaStepInterpolator1.currentTime = 89.8712;
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(89.8712, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, false);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(89.8712, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      
      classicalRungeKuttaStepInterpolator1.previousTime = (-1842.0);
      assertEquals(89.8712, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals((-1842.0), classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator1));
      assertNotSame(classicalRungeKuttaStepInterpolator0, classicalRungeKuttaStepInterpolator1);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      
      double double0 = (-2388.981);
      StepInterpolator stepInterpolator0 = classicalRungeKuttaStepInterpolator0.doCopy();
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator1));
      assertFalse(stepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator1));
      assertFalse(stepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator0, classicalRungeKuttaStepInterpolator1);
      assertNotSame(classicalRungeKuttaStepInterpolator0, stepInterpolator0);
      assertNotSame(stepInterpolator0, classicalRungeKuttaStepInterpolator1);
      assertNotSame(stepInterpolator0, classicalRungeKuttaStepInterpolator0);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(3348.008417855371, stepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(stepInterpolator0.isForward());
      assertEquals(Double.NaN, stepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(3348.008417855371, stepInterpolator0.getPreviousTime(), 0.01);
      assertNotNull(stepInterpolator0);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, false);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)stepInterpolator0));
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, stepInterpolator0);
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(89.8712, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals((-1842.0), classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      assertEquals(Double.NaN, eulerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(eulerStepInterpolator0.isForward());
      assertNotNull(eulerStepInterpolator0);
      
      StepInterpolator stepInterpolator1 = eulerStepInterpolator0.doCopy();
      assertFalse(stepInterpolator1.equals((Object)eulerStepInterpolator0));
      assertNotSame(eulerStepInterpolator0, stepInterpolator1);
      assertNotSame(stepInterpolator1, eulerStepInterpolator0);
      assertEquals(Double.NaN, eulerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(eulerStepInterpolator0.isForward());
      assertEquals(Double.NaN, stepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, stepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, stepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(stepInterpolator1.isForward());
      assertNotNull(stepInterpolator1);
      
      continuousOutputModel0.handleStep(stepInterpolator1, true);
      assertFalse(eulerStepInterpolator0.equals((Object)stepInterpolator1));
      assertFalse(stepInterpolator1.equals((Object)eulerStepInterpolator0));
      assertNotSame(eulerStepInterpolator0, stepInterpolator1);
      assertNotSame(stepInterpolator1, eulerStepInterpolator0);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(eulerStepInterpolator0.isForward());
      assertEquals(Double.NaN, stepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, stepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, stepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(stepInterpolator1.isForward());
      
      ThreeEighthesStepInterpolator threeEighthesStepInterpolator0 = new ThreeEighthesStepInterpolator();
      assertTrue(threeEighthesStepInterpolator0.isForward());
      assertEquals(Double.NaN, threeEighthesStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, threeEighthesStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, threeEighthesStepInterpolator0.getCurrentTime(), 0.01);
      assertNotNull(threeEighthesStepInterpolator0);
      
      continuousOutputModel0.handleStep(threeEighthesStepInterpolator0, false);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(threeEighthesStepInterpolator0.isForward());
      assertEquals(Double.NaN, threeEighthesStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, threeEighthesStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, threeEighthesStepInterpolator0.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(eulerStepInterpolator0, true);
      assertFalse(eulerStepInterpolator0.equals((Object)stepInterpolator1));
      assertNotSame(eulerStepInterpolator0, stepInterpolator1);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(eulerStepInterpolator0.isForward());
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator1));
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)stepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator0, classicalRungeKuttaStepInterpolator1);
      assertNotSame(classicalRungeKuttaStepInterpolator0, stepInterpolator0);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime(722.792986951);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.EulerStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertNotNull(classicalRungeKuttaStepInterpolator0);
      
      classicalRungeKuttaStepInterpolator0.previousTime = 3348.008417855371;
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator1 = new ClassicalRungeKuttaStepInterpolator();
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertNotNull(classicalRungeKuttaStepInterpolator1);
      
      classicalRungeKuttaStepInterpolator1.currentTime = (-1691.9);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals((-1691.9), classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, false);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals((-1691.9), classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator1));
      assertNotSame(classicalRungeKuttaStepInterpolator0, classicalRungeKuttaStepInterpolator1);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, false);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals((-1691.9), classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, false);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals((-1691.9), classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator1));
      assertNotSame(classicalRungeKuttaStepInterpolator0, classicalRungeKuttaStepInterpolator1);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, false);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals((-1691.9), classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator1));
      assertNotSame(classicalRungeKuttaStepInterpolator0, classicalRungeKuttaStepInterpolator1);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime(2061.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertNotNull(classicalRungeKuttaStepInterpolator0);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      assertTrue(eulerStepInterpolator0.isForward());
      assertEquals(Double.NaN, eulerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getPreviousTime(), 0.01);
      assertNotNull(eulerStepInterpolator0);
      
      continuousOutputModel0.handleStep(eulerStepInterpolator0, true);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertTrue(eulerStepInterpolator0.isForward());
      assertEquals(Double.NaN, eulerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getPreviousTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertNotNull(classicalRungeKuttaStepInterpolator0);
      
      classicalRungeKuttaStepInterpolator0.previousTime = 3320.0;
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(3320.0, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator1 = new ClassicalRungeKuttaStepInterpolator();
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertNotNull(classicalRungeKuttaStepInterpolator1);
      
      classicalRungeKuttaStepInterpolator1.currentTime = (-1691.9);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals((-1691.9), classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, true);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertEquals((-1691.9), continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals((-1691.9), classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, true);
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator1));
      assertNotSame(classicalRungeKuttaStepInterpolator0, classicalRungeKuttaStepInterpolator1);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(3320.0, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime(2284.304577971295);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedTime();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      boolean boolean0 = continuousOutputModel0.requiresDenseOutput();
      assertTrue(boolean0);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[0];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertNotNull(dummyStepInterpolator0);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, false);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      
      continuousOutputModel0.setInterpolatedTime((-4.422011983080043));
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-4.422011983080043), continuousOutputModel0.getInterpolatedTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertNotNull(classicalRungeKuttaStepInterpolator0);
      
      classicalRungeKuttaStepInterpolator0.previousTime = 3320.0;
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(3320.0, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(3320.0, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(3320.0, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime(6.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertNotNull(classicalRungeKuttaStepInterpolator0);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      double double0 = continuousOutputModel0.getFinalTime();
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertNotNull(classicalRungeKuttaStepInterpolator0);
      
      classicalRungeKuttaStepInterpolator0.currentTime = 3348.008417855371;
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      
      classicalRungeKuttaStepInterpolator0.previousTime = 3348.008417855371;
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator1 = new ClassicalRungeKuttaStepInterpolator();
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertNotNull(classicalRungeKuttaStepInterpolator1);
      
      continuousOutputModel0.reset();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      
      classicalRungeKuttaStepInterpolator1.currentTime = 89.8712;
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals(89.8712, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, false);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals(89.8712, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      
      classicalRungeKuttaStepInterpolator1.previousTime = (-1842.0);
      assertEquals((-1842.0), classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals(89.8712, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, false);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals((-1842.0), classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals(89.8712, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      
      StepInterpolator stepInterpolator0 = classicalRungeKuttaStepInterpolator1.doCopy();
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertFalse(stepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator1));
      assertFalse(stepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, stepInterpolator0);
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertNotSame(stepInterpolator0, classicalRungeKuttaStepInterpolator1);
      assertNotSame(stepInterpolator0, classicalRungeKuttaStepInterpolator0);
      assertEquals((-1842.0), classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals(89.8712, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals((-1842.0), stepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(89.8712, stepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, stepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(stepInterpolator0.isForward());
      assertNotNull(stepInterpolator0);
      
      classicalRungeKuttaStepInterpolator0.currentTime = (-2388.981);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals((-2388.981), classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      
      classicalRungeKuttaStepInterpolator1.previousTime = (-2490.14);
      assertEquals((-2490.14), classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals(89.8712, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, false);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)stepInterpolator0));
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, stepInterpolator0);
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals((-2490.14), classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals(89.8712, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, false);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)stepInterpolator0));
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, stepInterpolator0);
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals((-2490.14), classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals(89.8712, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      
      classicalRungeKuttaStepInterpolator0.finalizeStep();
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator1));
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)stepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator0, classicalRungeKuttaStepInterpolator1);
      assertNotSame(classicalRungeKuttaStepInterpolator0, stepInterpolator0);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals((-2388.981), classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator1));
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)stepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator0, classicalRungeKuttaStepInterpolator1);
      assertNotSame(classicalRungeKuttaStepInterpolator0, stepInterpolator0);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals((-2388.981), classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator1, false);
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)stepInterpolator0));
      assertFalse(classicalRungeKuttaStepInterpolator1.equals((Object)classicalRungeKuttaStepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator1, stepInterpolator0);
      assertNotSame(classicalRungeKuttaStepInterpolator1, classicalRungeKuttaStepInterpolator0);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals((-2490.14), classicalRungeKuttaStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator1.isForward());
      assertEquals(89.8712, classicalRungeKuttaStepInterpolator1.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)classicalRungeKuttaStepInterpolator1));
      assertFalse(classicalRungeKuttaStepInterpolator0.equals((Object)stepInterpolator0));
      assertNotSame(classicalRungeKuttaStepInterpolator0, classicalRungeKuttaStepInterpolator1);
      assertNotSame(classicalRungeKuttaStepInterpolator0, stepInterpolator0);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(3348.008417855371, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals((-2388.981), classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime(442.2808072);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertNotNull(classicalRungeKuttaStepInterpolator0);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime(Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[4];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertNotNull(dummyStepInterpolator0);
      
      dummyStepInterpolator0.currentTime = 1702.5770671;
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(1702.5770671, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, false);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(1702.5770671, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      
      double double0 = continuousOutputModel0.getInitialTime();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      
      continuousOutputModel0.setInterpolatedTime(561.94823113);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(561.94823113, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[4];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertNotNull(dummyStepInterpolator0);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, false);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertNotNull(classicalRungeKuttaStepInterpolator0);
      
      classicalRungeKuttaStepInterpolator0.currentTime = (-263.93);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-263.93), classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-263.93), classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime(0.5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[0];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      dummyStepInterpolator0.previousTime = 393.438225121976;
      continuousOutputModel0.handleStep(dummyStepInterpolator0, false);
      continuousOutputModel0.setInterpolatedTime(3053.0);
      double double0 = continuousOutputModel0.getInitialTime();
      assertEquals(393.438225121976, double0, 0.01);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 15:05:32 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.InterpreterData;
import com.google.javascript.rhino.head.JavaScriptException;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Interpreter_ESTest extends Interpreter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Context.getCurrentContext();
      InterpreterData interpreterData0 = new InterpreterData(13, "language version", "language version", true);
      byte[] byteArray0 = new byte[8];
      Context.toString((Object) interpreterData0);
      byteArray0[0] = (byte) (-54);
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(0, "ush", "ush", true);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      Context context0 = new Context();
      JavaScriptException javaScriptException0 = null;
      try {
        javaScriptException0 = new JavaScriptException(context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Context.enter();
      InterpreterData interpreterData0 = new InterpreterData(13, "language version", "language version", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "language version");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-23);
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Context.getCurrentContext();
      InterpreterData interpreterData0 = new InterpreterData(13, "language version", "language version", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-39);
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Context context0 = new Context();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      context0.lastInterpreterFrame = (Object) nativeIterator_StopIteration0;
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Context.getCurrentContext();
      InterpreterData interpreterData0 = new InterpreterData(13, "language version", "language version", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)6;
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Context.getCurrentContext();
      InterpreterData interpreterData0 = new InterpreterData(13, "language version", "language version", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-48);
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      Context.getCurrentContext();
      InterpreterData interpreterData0 = new InterpreterData(13, "language version", "language version", true);
      byte[] byteArray0 = new byte[8];
      Context.toString((Object) interpreterData0);
      byteArray0[0] = (byte) (-62);
      interpreterData0.itsICode = byteArray0;
      // Undeclared exception!
      try { 
        interpreterData0.getLineNumbers();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/javascript/rhino/head/Interpreter
         //
         verifyException("com.google.javascript.rhino.head.InterpreterData", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Context.enter();
      InterpreterData interpreterData0 = new InterpreterData(13, "language version", "language version", true);
      byte[] byteArray0 = new byte[3];
      Boolean boolean0 = new Boolean("error reporter");
      byteArray0[2] = (byte)50;
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Context.enter();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData((-873), (String) null, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(571, "Number", "Number", true);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Context.getCurrentContext();
      InterpreterData interpreterData0 = new InterpreterData(13, "language version", "language version", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-38);
      byteArray0[0] = (byte) (-38);
      byteArray0[6] = (byte) (-38);
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = new Context();
      InterpreterData interpreterData0 = new InterpreterData(13, "language version", "language version", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-46);
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Context context0 = new Context();
      InterpreterData interpreterData0 = new InterpreterData(13, "language version", "language version", false);
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-10);
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Context.getCurrentContext();
      InterpreterData interpreterData0 = new InterpreterData(13, "language version", "language version", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Context.getCurrentContext();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) nativeContinuation0;
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = new Context();
      InterpreterData interpreterData0 = new InterpreterData(13, "language version", "language version", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-6);
      interpreterData0.itsICode = byteArray0;
  }
}

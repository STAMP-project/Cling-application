/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 04:27:51 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.ConsString;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "doubleValue");
      FunctionObject functionObject0 = new FunctionObject("doubleValue", method0, nativeContinuation0);
      boolean boolean0 = functionObject0.isVarArgsConstructor();
      assertEquals(48, methodArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "doubleValue");
      Context context0 = Context.enter();
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, nativeContinuation0);
      // Undeclared exception!
      try { 
        functionObject0.createObject(context0, nativeContinuation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.InstantiationException: java.lang.Integer
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "decode");
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeContinuation0);
      FunctionObject functionObject0 = new FunctionObject("decode", method0, nativeContinuation0);
      // Undeclared exception!
      try { 
        functionObject0.call((Context) null, nativeContinuation0, nativeContinuation0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.NumberFormatException: For input string: \"undefined\"
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toOctalString");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("toOctalString", method0, nativeContinuation0);
      Object[] objectArray0 = new Object[1];
      functionObject0.call((Context) null, nativeContinuation0, nativeContinuation0, objectArray0);
      assertEquals(48, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "doubleValue");
      FunctionObject functionObject0 = new FunctionObject("doubleValue", method0, nativeContinuation0);
      // Undeclared exception!
      try { 
        functionObject0.call((Context) null, nativeContinuation0, nativeContinuation0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"doubleValue\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "doubleValue");
      FunctionObject functionObject0 = new FunctionObject("doubleValue", method0, nativeContinuation0);
      // Undeclared exception!
      try { 
        functionObject0.call((Context) null, functionObject0, functionObject0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"doubleValue\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "doubleValue");
      FunctionObject functionObject0 = new FunctionObject("doubleValue", method0, nativeContinuation0);
      // Undeclared exception!
      try { 
        functionObject0.call((Context) null, nativeContinuation0, functionObject0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"doubleValue\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Context context0 = Context.enter();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Class<Boolean> class0 = Boolean.TYPE;
      Class<ConsString> class1 = ConsString.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeIterator_StopIteration0, (Object) class0, (Class<?>) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"com.google.javascript.rhino.head.ConsString\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "toUnsignedString");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Method \"toUnsignedString\" occurs multiple times in class \"java.lang.Integer\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Method[] methodArray0 = new Method[1];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "msg.varargs.ctor");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "doubleValue");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("doubleValue", method0, nativeContinuation0);
      functionObject0.getMethodOrConstructor();
      assertEquals(48, methodArray0.length);
      assertEquals(0, functionObject0.getLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toBinaryString");
      assertNotNull(method0);
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      FunctionObject functionObject0 = new FunctionObject((String) null, method0, nativeBoolean0);
      functionObject0.getFunctionName();
      assertEquals(48, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toBinaryString");
      FunctionObject functionObject0 = new FunctionObject("toBinaryString", method0, nativeContinuation0);
      // Undeclared exception!
      try { 
        functionObject0.hasInstance(nativeContinuation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: 'prototype' property of toBinaryString is not an object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Context context0 = new Context();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Class<Double> class0 = Double.TYPE;
      Double double0 = new Double((-1));
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeContinuation0, (Object) double0, (Class<?>) class0);
      assertEquals((-1.0), object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = Context.enter();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Class<Boolean> class0 = Boolean.TYPE;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeIterator_StopIteration0, (Object) null, (Class<?>) class0);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Context context0 = Context.enter();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeContinuation0, (Object) context0.VERSION_1_2, (Class<?>) class0);
      assertEquals(120, object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Double double0 = new Double(8);
      nativeContinuation0.defineProperty("{(o,<lVoJ*F60/n`h", (Object) double0, 4);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "decode");
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeContinuation0);
      FunctionObject functionObject0 = new FunctionObject("decode", method0, nativeContinuation0);
      // Undeclared exception!
      try { 
        functionObject0.call((Context) null, nativeContinuation0, nativeContinuation0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.NumberFormatException: For input string: \"{(o,<lVoJ*F60/n`h\"
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Context context0 = Context.enter();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeJavaTopPackage0, (Object) context0, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = Context.enter();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Class<Object> class0 = Object.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeIterator_StopIteration0, (Object) false, (Class<?>) class0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Context context0 = new Context();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Class<NativeIterator> class0 = NativeIterator.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeContinuation0, (Object) context0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Context context0 = Context.enter();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Class<Double> class0 = Double.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeIterator_StopIteration0, (Object) context0, (Class<?>) class0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Class<Boolean> class0 = Boolean.TYPE;
      Boolean boolean0 = Boolean.FALSE;
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) nativeContinuation0, (Object) boolean0, (Class<?>) class0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "decode");
      FunctionObject functionObject0 = new FunctionObject("decode", method0, nativeContinuation0);
      // Undeclared exception!
      try { 
        functionObject0.call((Context) null, nativeContinuation0, nativeContinuation0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.NumberFormatException: For input string: \"java.lang.reflect.Method@0000000004\"
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test24()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "doubleValue");
      FunctionObject functionObject0 = new FunctionObject("doubleValue", method0, nativeContinuation0);
      Class<NativeJavaClass> class1 = NativeJavaClass.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) functionObject0, class1, false);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"java.lang.Class\" in method \"com.google.javascript.rhino.head.NativeJavaClass\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "doubleValue");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("doubleValue", method0, nativeContinuation0);
      functionObject0.addAsConstructor(nativeContinuation0, nativeContinuation0);
      assertEquals(48, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "doubleValue");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("doubleValue", method0, nativeContinuation0);
      Object object0 = functionObject0.getInstanceIdValue(1);
      assertEquals(0, object0);
      assertEquals(48, methodArray0.length);
  }
}

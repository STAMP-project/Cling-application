/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 13:03:19 GMT 2019
 */

package org.mockito.asm.tree.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.Label;
import org.mockito.asm.Opcodes;
import org.mockito.asm.Type;
import org.mockito.asm.tree.FieldInsnNode;
import org.mockito.asm.tree.IincInsnNode;
import org.mockito.asm.tree.InsnNode;
import org.mockito.asm.tree.IntInsnNode;
import org.mockito.asm.tree.JumpInsnNode;
import org.mockito.asm.tree.LabelNode;
import org.mockito.asm.tree.LdcInsnNode;
import org.mockito.asm.tree.MethodInsnNode;
import org.mockito.asm.tree.MultiANewArrayInsnNode;
import org.mockito.asm.tree.TypeInsnNode;
import org.mockito.asm.tree.VarInsnNode;
import org.mockito.asm.tree.analysis.BasicInterpreter;
import org.mockito.asm.tree.analysis.BasicValue;
import org.mockito.asm.tree.analysis.SourceValue;
import org.mockito.asm.tree.analysis.Value;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BasicInterpreter_ESTest extends BasicInterpreter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicValue basicValue1 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.merge(basicValue1, basicValue0);
      assertNotSame(value0, basicValue1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.merge(basicValue0, basicValue0);
      assertSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode("(`0:\"}m>", 608);
      LinkedList<LdcInsnNode> linkedList0 = new LinkedList<LdcInsnNode>();
      // Undeclared exception!
      try { 
        basicInterpreter0.naryOperation(multiANewArrayInsnNode0, linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.mockito.asm.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      LabelNode labelNode0 = new LabelNode();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      // Undeclared exception!
      try { 
        basicInterpreter0.naryOperation(labelNode0, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.LabelNode cannot be cast to org.mockito.asm.tree.MethodInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(181);
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(180);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(179);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(178);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, (Value) null, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(177);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(176);
      SourceValue sourceValue0 = new SourceValue(11);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, sourceValue0, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(175);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(174);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(173);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(172, "Qrg.mockito.asm.Opcodes", "Qrg.mockito.asm.Opcodes", "Qrg.mockito.asm.Opcodes");
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(methodInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(171);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(170);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(169);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(168);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(167, "/V=K):V");
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(166);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(165, 165);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(164);
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(163);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(162);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(161);
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(160);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(159);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(158);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(157);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(156);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(155);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(154);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(153);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(152);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(151);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(150);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(149);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(148);
      SourceValue sourceValue0 = new SourceValue(7);
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, sourceValue0, sourceValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(147);
      SourceValue sourceValue0 = new SourceValue(11);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, sourceValue0, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(146);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(145);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(144);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(143);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(142);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(141, "org.mockito.asm.Opcodes", "org.mockito.asm.Opcodes", "org.mockito.asm.Opcodes");
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(methodInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(140, "ydYFPO,bUPm~4Y4k");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(139);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(138);
      SourceValue sourceValue0 = new SourceValue(11);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, sourceValue0, sourceValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(137);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(136, "I&X<%_");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(135);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(134);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(133);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IincInsnNode iincInsnNode0 = new IincInsnNode(858, 858);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(iincInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(131);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(130);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(129);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(128, 128);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(127);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(126);
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(125);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(124, (String) null);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(123);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(122);
      SourceValue sourceValue0 = new SourceValue(12);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, sourceValue0, sourceValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(121);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(120);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(119);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(118);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(117);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(116);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(115, "ydYFPO,bUPm~4Y4k");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(114);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(113);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(112);
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(111);
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(110, "<Rg&YG$zEvj_");
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(109, "org.mcki4o.asm.OpcodeX", "org.mcki4o.asm.OpcodeX", "org.mcki4o.asm.OpcodeX");
      Value value0 = basicInterpreter0.binaryOperation(methodInsnNode0, (Value) null, (Value) null);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(108);
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(107);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(106);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(105);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(104);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(103);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(102);
      SourceValue sourceValue0 = new SourceValue(11, insnNode0);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.binaryOperation(insnNode0, sourceValue0, sourceValue0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(101);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(100);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(99, "@?7my,Ivp3&_*u*L5e");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(98);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(97);
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(96);
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(95, "");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(typeInsnNode0, (Value) null, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(94);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, (Value) null, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(93, "J", "J", "J");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      SourceValue sourceValue0 = new SourceValue(5, fieldInsnNode0);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(fieldInsnNode0, sourceValue0, sourceValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(92);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(91);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(90);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(89);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(88);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(87);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(86);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(85);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(84);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(83);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(82, "h562/h0'bpQSIHQ=5b");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(81);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(80);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(79);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(78, "kaLL-4[F^MsWl%T^U>1");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(77);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(76);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(75);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.FLOAT_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(74, "#'&Is=J%");
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(typeInsnNode0, value0, value0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(73);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(72);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(71);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(70, "J", "J", "J");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(fieldInsnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(69);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(68);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(67, "kaLL-4[F^MsWl%T^U>1");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(66);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(65);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(64);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(63);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(62);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(61, "h562/h0'bpQSIHQ=5b");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(60, "&X<%_", "F", "F");
      SourceValue sourceValue0 = new SourceValue(5);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(fieldInsnNode0, sourceValue0, sourceValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(59);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(58);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(57, ".vsgA:38?6cKRhUdIg", ".vsgA:38?6cKRhUdIg", ".vsgA:38?6cKRhUdIg");
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(fieldInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(56);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(55);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(54);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(53);
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(52, "", "k<pxi}#Lx~;+h", "");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.binaryOperation(fieldInsnNode0, (Value) null, (Value) null);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(51, 51);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(50);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertTrue(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(49);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(48);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Label label0 = new Label();
      LabelNode labelNode0 = new LabelNode(label0);
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(47, labelNode0);
      SourceValue sourceValue0 = new SourceValue((-1014));
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.binaryOperation(jumpInsnNode0, sourceValue0, sourceValue0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 188);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 5);
      intInsnNode0.operand = 11;
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertTrue(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 7);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      intInsnNode0.operand = 10;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 7);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      intInsnNode0.operand = 9;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 7);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      intInsnNode0.operand = 8;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 7);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 7);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      intInsnNode0.operand = 6;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertTrue(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 5);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 188);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid array type
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(199, 126);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(198, 198);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode("RX&U", (-311));
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(multiANewArrayInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(196, 199);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(195, 195);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(194, 194);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(193, 7);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(192, 192);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.IntInsnNode cannot be cast to org.mockito.asm.tree.TypeInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(191, 4414);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(190);
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(189, 429);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(varInsnNode0, (Value) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.VarInsnNode cannot be cast to org.mockito.asm.tree.TypeInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(187);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(186, "");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(185, 185);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(varInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(184, "");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(183, 167);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(varInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Label label0 = new Label();
      LabelNode labelNode0 = new LabelNode(label0);
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(182, labelNode0);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(jumpInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(181, 181);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(varInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(180, 7);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.IntInsnNode cannot be cast to org.mockito.asm.tree.FieldInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(179, "h52/h'bpQSIHQ=5b");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(178, 123);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(177);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(176, 176);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(175, 2213);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(varInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(174, "h52/h'bpQSIHQ=5b");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(173, "");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(172, "");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(171, "h562/h0'bpQSIHQ=5b");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(170, "yFdYFPO,bUPm~4Y4k");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(169, 1576);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(168);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(167, 167);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(166, 5);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(165, 165);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(164, 188);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(163, 5);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(162, 3);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(161);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(160, 53);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(varInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(159, "HP}ph$$e}E.C", "HP}ph$$e}E.C", "HP}ph$$e}E.C");
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(fieldInsnNode0, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(158, 158);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(varInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(157, "");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(156, 156);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(155);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(154, "ydYFPO,bUPm~4Y4k");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(153, "h562/h0'bpQSIHQ=5b");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(152);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(151, 151);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(varInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(150, "`XC:`_Vs");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(149, 76);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(148, "Vr");
      SourceValue sourceValue0 = new SourceValue(1);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(typeInsnNode0, sourceValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(147, "K6&Pi[&$:N>N");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(146);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(145, (String) null, (String) null, (String) null);
      Value value0 = basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(144, "h562/h0'bpQSIHQ=5b");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(143, "H");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(142, "");
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(141, "org.mockitoXasm.Opc:des", "org.mockitoXasm.Opc:des", "org.mockitoXasm.Opc:des");
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(methodInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(140, "ydYFPO,bUPm~4Y4k");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(139);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(138, "[J", "[J", "[J");
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(137, "h562/h0'bpQSIHQ=5b");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(136, 136);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(135);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(insnNode0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.INT_TYPE;
      IntInsnNode intInsnNode0 = new IntInsnNode(134, 158);
      Value value0 = basicInterpreter0.newValue(type0);
      Value value1 = basicInterpreter0.unaryOperation(intInsnNode0, value0);
      assertNotSame(value0, value1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(133);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      IincInsnNode iincInsnNode0 = new IincInsnNode(152, 152);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(iincInsnNode0, (Value) null);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(131);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      LabelNode labelNode0 = new LabelNode();
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(130, labelNode0);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(jumpInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(129);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(128, 128);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(127, "", "", "");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(fieldInsnNode0, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(126);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(125);
      SourceValue sourceValue0 = new SourceValue(12);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, sourceValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(124);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      SourceValue sourceValue0 = new SourceValue(9);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, sourceValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(123);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(122, "`XC:`_Vs");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(121, "h562h0'ebpQSIH=5b");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(120, "h562/h0'bpQSIHQ=5b");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      LabelNode labelNode0 = new LabelNode();
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(119, labelNode0);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(jumpInsnNode0, basicValue0);
      assertSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(118, "org.mockito.asm.Opcodes", "org.mockito.asm.Opcodes", "org.mockito.asm.Opcodes");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.unaryOperation(methodInsnNode0, (Value) null);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(117);
      SourceValue sourceValue0 = new SourceValue(10);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.unaryOperation(insnNode0, sourceValue0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(116, "h562/h0'bpQSIHQ=5b");
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Type type0 = Type.getObjectType("I&X<%_");
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(type0);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(ldcInsnNode0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicInterpreter0);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(ldcInsnNode0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Long long0 = new Long(1217L);
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(long0);
      Value value0 = basicInterpreter0.newOperation(ldcInsnNode0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Double double0 = new Double(123);
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(double0);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.newOperation(ldcInsnNode0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Float float0 = new Float(820.0136217131);
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(float0);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(ldcInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Label label0 = new Label();
      LabelNode labelNode0 = new LabelNode(label0);
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(47, labelNode0);
      // Undeclared exception!
      try { 
        basicInterpreter0.newOperation(jumpInsnNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(187, "kaLL-4[F^MsWl%T^U>1");
      Value value0 = basicInterpreter0.newOperation(typeInsnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(178, 178);
      // Undeclared exception!
      try { 
        basicInterpreter0.newOperation(intInsnNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.IntInsnNode cannot be cast to org.mockito.asm.tree.FieldInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(168, 168);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(intInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Integer integer0 = Opcodes.UNINITIALIZED_THIS;
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(integer0);
      Value value0 = basicInterpreter0.newOperation(ldcInsnNode0);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(ldcInsnNode0, value0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(17);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.newOperation(insnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(16);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(insnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(15);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.newOperation(insnNode0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(14);
      Value value0 = basicInterpreter0.newOperation(insnNode0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(13);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(insnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      LabelNode labelNode0 = new LabelNode();
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(12, labelNode0);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(jumpInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(11, 11);
      Value value0 = basicInterpreter0.newOperation(intInsnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(10, 0);
      Value value0 = basicInterpreter0.newOperation(intInsnNode0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(8);
      Value value0 = basicInterpreter0.newOperation(insnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(7, (String) null);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(typeInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(6, "jgq(&.5WKbQ?$v_D2");
      Value value0 = basicInterpreter0.newOperation(typeInsnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(5);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(insnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(4, "org.mockito.asm.Opcodes", "org.mockito.asm.Opcodes", "org.mockito.asm.Opcodes");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.newOperation(fieldInsnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(3);
      Value value0 = basicInterpreter0.newOperation(insnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(2, 5);
      Value value0 = basicInterpreter0.newOperation(varInsnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(9, 5);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(varInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(1, (-1081));
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(varInsnNode0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 4);
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.DOUBLE_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Type type0 = Type.LONG_TYPE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.newValue(type0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.FLOAT_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(46, "#'&Is=J%");
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.binaryOperation(typeInsnNode0, value0, value0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Type type0 = Type.SHORT_TYPE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.newValue(type0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Type type0 = Type.CHAR_TYPE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newValue(type0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.VOID_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.newValue((Type) null);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.newValue(type0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(196, 199);
      Value value0 = basicInterpreter0.copyOperation(intInsnNode0, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      LabelNode labelNode0 = new LabelNode();
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.ternaryOperation(labelNode0, basicValue0, basicValue0, basicValue0);
      assertNull(value0);
  }
}

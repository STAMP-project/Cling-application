/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 22:32:26 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeJavaArray;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.Synchronizer;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "unwrap");
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "unwrap");
      FunctionObject functionObject0 = new FunctionObject("unwrap", method0, nativeJavaMethod0);
      functionObject0.isVarArgsConstructor();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "unwrap");
      BaseFunction baseFunction0 = new BaseFunction();
      FunctionObject functionObject0 = new FunctionObject("unwrap", method0, baseFunction0);
      // Undeclared exception!
      try { 
        functionObject0.createObject((Context) null, baseFunction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.InstantiationException: com.google.javascript.rhino.head.NativeJavaArray
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "unwrap");
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "unwrap");
      Class<BaseFunction> class1 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) nativeJavaMethod0, class1, false, false);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      baseFunction0.createObject(context0, nativeJavaMethod0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "unwrap");
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "unwrap");
      Class<BaseFunction> class1 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) nativeJavaMethod0, class1, true, true);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      IdFunctionObject idFunctionObject0 = baseFunction0.exportAsJSClass(4, importerTopLevel0, true);
      baseFunction0.call(context0, idFunctionObject0, importerTopLevel0, methodArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "wrap");
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "wrap");
      Class<BaseFunction> class1 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) nativeJavaMethod0, class1, false, false);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        baseFunction0.call(context0, nativeJavaMethod0, nativeJavaMethod0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "unwrap");
      BaseFunction baseFunction0 = new BaseFunction();
      FunctionObject functionObject0 = new FunctionObject("unwrap", method0, baseFunction0);
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, baseFunction0, baseFunction0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"unwrap\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "unwrap");
      BaseFunction baseFunction0 = new BaseFunction();
      FunctionObject functionObject0 = new FunctionObject("unwrap", method0, baseFunction0);
      NativeCall nativeCall0 = new NativeCall();
      // Undeclared exception!
      try { 
        functionObject0.call((Context) null, nativeCall0, baseFunction0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"unwrap\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "unwrap");
      BaseFunction baseFunction0 = new BaseFunction();
      FunctionObject functionObject0 = new FunctionObject("unwrap", method0, baseFunction0);
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, (Scriptable) null, (Scriptable) null, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"unwrap\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeBoolean0, (Object) nativeBoolean0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"java.lang.reflect.Method\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "put");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"put\" occurs multiple times in class \"com.google.javascript.rhino.head.NativeJavaArray\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Method[] methodArray0 = new Method[1];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, (String) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test11()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "unwrap");
      assertNotNull(method0);
      
      BaseFunction baseFunction0 = new BaseFunction();
      FunctionObject functionObject0 = new FunctionObject("unwrap", method0, baseFunction0);
      functionObject0.getMethodOrConstructor();
      assertEquals(0, functionObject0.getArity());
      assertEquals(13, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "unwrap");
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "unwrap");
      Class<BaseFunction> class1 = BaseFunction.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) nativeJavaMethod0, class1, false, false);
      functionObject0.getMethodOrConstructor();
      assertTrue(nativeJavaMethod0.isEmpty());
      assertEquals(13, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "unwrap");
      assertNotNull(method0);
      
      BaseFunction baseFunction0 = new BaseFunction();
      FunctionObject functionObject0 = new FunctionObject((String) null, method0, baseFunction0);
      functionObject0.getFunctionName();
      assertEquals(13, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test14()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "unwrap");
      assertNotNull(method0);
      
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "unwrap");
      FunctionObject functionObject0 = new FunctionObject("unwrap", method0, nativeJavaMethod0);
      functionObject0.getFunctionName();
      assertEquals(13, methodArray0.length);
      assertEquals(0, functionObject0.getArity());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Context context0 = Context.getContext();
      Class<Boolean> class0 = Boolean.TYPE;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) baseFunction0, (Object) null, (Class<?>) class0);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Class<Boolean> class0 = Boolean.TYPE;
      NativeString nativeString0 = new NativeString("error reporter");
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeString0, (Object) class0, 1);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) null, (Object) context0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test18()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "wrap");
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "wrap");
      FunctionObject functionObject0 = new FunctionObject("wrap", method0, nativeJavaMethod0);
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, (Scriptable) null, nativeJavaMethod0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      Context context0 = new Context();
      NativeString nativeString0 = new NativeString("language version");
      Class<Double> class0 = Double.TYPE;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeString0, (Object) context0, (Class<?>) class0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Double> class0 = Double.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Class<Boolean> class0 = Boolean.TYPE;
      NativeString nativeString0 = new NativeString("error reporter");
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeString0, (Object) nativeString0, (Class<?>) class0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test22()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      BaseFunction baseFunction0 = new BaseFunction();
      Context context0 = Context.getContext();
      Class<Boolean> class1 = Boolean.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) baseFunction0, (Object) class0, (Class<?>) class1);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      Class<Integer> class0 = Integer.TYPE;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeBoolean0, (Object) 13, (Class<?>) class0);
      assertEquals(13, object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "unwrap");
      //  // Unstable assertion: assertNotNull(method0);
      
      BaseFunction baseFunction0 = new BaseFunction();
      FunctionObject functionObject0 = new FunctionObject("msg.no.paren.cond", method0, baseFunction0);
      Context context0 = Context.enter();
      Synchronizer synchronizer0 = new Synchronizer(functionObject0);
      Class<String> class1 = String.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) synchronizer0, (Object) "msg.no.paren.cond", (Class<?>) class1);
      //  // Unstable assertion: assertEquals(13, methodArray0.length);
      //  // Unstable assertion: assertEquals("msg.no.paren.cond", object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test25()  throws Throwable  {
      Class<FunctionObject> class0 = FunctionObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "call");
      Delegator delegator0 = new Delegator();
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("call", method0, delegator0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"com.google.javascript.rhino.head.Context\" in method \"call\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "unwrap");
      //  // Unstable assertion: assertNotNull(method0);
      
      BaseFunction baseFunction0 = new BaseFunction();
      NativeWith nativeWith0 = new NativeWith(baseFunction0, baseFunction0);
      FunctionObject functionObject0 = new FunctionObject("unwrap", method0, nativeWith0);
      functionObject0.addAsConstructor(nativeWith0, baseFunction0);
      //  // Unstable assertion: assertEquals(13, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "unwrap");
      //  // Unstable assertion: assertNotNull(method0);
      
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "unwrap");
      FunctionObject functionObject0 = new FunctionObject("unwrap", method0, nativeJavaMethod0);
      int int0 = functionObject0.getLength();
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(13, methodArray0.length);
  }
}

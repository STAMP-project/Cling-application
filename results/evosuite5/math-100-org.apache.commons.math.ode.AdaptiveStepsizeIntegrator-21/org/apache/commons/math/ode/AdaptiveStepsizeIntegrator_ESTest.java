/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 10:31:03 GMT 2019
 */

package org.apache.commons.math.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.ContinuousOutputModel;
import org.apache.commons.math.ode.DormandPrince54Integrator;
import org.apache.commons.math.ode.FirstOrderConverter;
import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math.ode.GraggBulirschStoerIntegrator;
import org.apache.commons.math.ode.HighamHall54Integrator;
import org.apache.commons.math.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math.ode.SwitchingFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AdaptiveStepsizeIntegrator_ESTest extends AdaptiveStepsizeIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0E-12, 471.02912683, doubleArray0, doubleArray0);
      double double0 = dormandPrince54Integrator0.filterStep(1593.5, false);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2.170320545057803E-5, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(471.02912683, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0E-10, 2769.45441222, (double[]) null, doubleArray0);
      double double0 = dormandPrince54Integrator0.filterStep(0.0, true);
      assertEquals(1.0E-10, double0, 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5.262560605085703E-4, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2743.476, (-796.553757274), (-1076.953118496), (-796.553757274));
      try { 
        dormandPrince54Integrator0.filterStep((-1076.953118496), false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // minimal step size (2,743.476) reached, integration needs 1,076.953
         //
         verifyException("org.apache.commons.math.ode.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(51544.0, (-1076.953118496), doubleArray0, doubleArray0);
      double double0 = highamHall54Integrator0.filterStep((-4359.55719767), true);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1076.953118496, double0, 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 471.02912683;
      doubleArray0[1] = 2831.6;
      doubleArray0[2] = 471.02912683;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1020.91976, 821.2999304254706, 1098, 1020.91976);
      double double0 = dormandPrince54Integrator0.initializeStep(firstOrderConverter0, true, 10, doubleArray0, 1098, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(821.2999304254706, double0, 0.01);
      assertArrayEquals(new double[] {475.7394180983, 2859.9159999999997, 475.7394180983}, doubleArray0, 0.01);
      assertEquals(1020.91976, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(915.6862606034821, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[3];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(51544.0, (-1076.953118496), doubleArray0, doubleArray0);
      double double0 = highamHall54Integrator0.initializeStep(firstOrderConverter0, true, 0, doubleArray0, 187.446109086, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1076.953118496), 6.0, (-1076.953118496), (-1076.953118496));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 662.60138068642;
      double double0 = dormandPrince54Integrator0.initializeStep(firstOrderConverter0, false, 1, doubleArray1, (-3540.722255531), doubleArray1, doubleArray0, doubleArray0, doubleArray0);
      assertEquals((-1076.953118496), dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals((-1.0E-6), double0, 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0E-12, 471.02912683, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setInitialStepSize(471.02912683);
      double double0 = dormandPrince54Integrator0.initializeStep((FirstOrderDifferentialEquations) null, true, 2200, doubleArray0, 4448.482017958014, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(471.02912683, double0, 0.01);
      assertEquals(2.170320545057803E-5, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1076.953118496), 6.0, (-1076.953118496), (-1076.953118496));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[7];
      try { 
        dormandPrince54Integrator0.integrate(firstOrderConverter0, 6.0, doubleArray0, 2743.476, doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // dimensions mismatch: ODE problem has dimension 2, initial state vector has dimension 7
         //
         verifyException("org.apache.commons.math.ode.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-4359.55719767), 2743.476, 1496.329124855507, (-1076.953118496));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, (-1076.953118496), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2253.13455221), 471.02912683, doubleArray0, doubleArray0);
      highamHall54Integrator0.setInitialStepSize(681.2966462);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0E-10, 2769.45441222, (double[]) null, doubleArray0);
      dormandPrince54Integrator0.setInitialStepSize(1.0E-10);
      double double0 = dormandPrince54Integrator0.initializeStep((FirstOrderDifferentialEquations) null, false, (-88), (double[]) null, 1992.9, doubleArray0, (double[]) null, (double[]) null, (double[]) null);
      assertEquals((-1.0E-10), double0, 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5.262560605085703E-4, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(165.20045171727028, (-4359.55719767), doubleArray0, doubleArray0);
      highamHall54Integrator0.setInitialStepSize((-4359.55719767));
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-752.945469), (-752.945469), (-0.03714271806722689), (-9.194632392478356));
      double double0 = dormandPrince54Integrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(752.945469, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1702.101800476, (-2792.0), 0.2222222222222222, 1.0E-15);
      double double0 = graggBulirschStoerIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0E-10, 2769.45441222, (double[]) null, doubleArray0);
      dormandPrince54Integrator0.getStepHandler();
      assertEquals(5.262560605085703E-4, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-4359.55719767), 2743.476, 1496.329124855507, (-1076.953118496));
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.addSwitchingFunction(switchingFunction0, (-248.9154347), (-0.2014737481327276), (-1113));
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.322376179245283), 2511.079, (-1850.8901965), (-1850.8901965));
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      graggBulirschStoerIntegrator0.setStepHandler(continuousOutputModel0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }
}

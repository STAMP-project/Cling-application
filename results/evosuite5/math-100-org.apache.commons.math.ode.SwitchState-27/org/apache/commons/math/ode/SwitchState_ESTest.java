/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 12:06:58 GMT 2019
 */

package org.apache.commons.math.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.DummyStepInterpolator;
import org.apache.commons.math.ode.SwitchState;
import org.apache.commons.math.ode.SwitchingFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SwitchState_ESTest extends SwitchState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn(1.0, Double.NaN, 1.0, (-3356.1419), (-3356.1419)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 1.0, 1274, 1274);
      double[] doubleArray0 = new double[5];
      switchState0.stepAccepted((-3356.1419), doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.stepAccepted(0.0, doubleArray0);
      assertEquals((-3356.1419), switchState0.getEventTime(), 0.01);
      
      boolean boolean0 = switchState0.reset(1.0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, 0.0, 0.0, 1274);
      double[] doubleArray0 = new double[4];
      boolean boolean0 = switchState0.reset(0.0, doubleArray0);
      assertFalse(boolean0);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertFalse(switchState0.stop());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(16.066779237170508, Double.NaN, 16.066779237170508, (-3355.6218226455503), Double.NaN).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 16.066779237170508, 16.066779237170508, 1277);
      double[] doubleArray0 = new double[4];
      switchState0.reinitializeBegin(16.066779237170508, doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      switchState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(16.066779237170508, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      
      boolean boolean0 = switchState0.reset(670.0744255285274, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn(1.0, Double.NaN, 1.0, (-3356.1419), (-1177.5747837173371)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 0.0, 0.0, 1274);
      double[] doubleArray0 = new double[4];
      switchState0.stepAccepted(1.0, doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.stepAccepted(0.0, doubleArray0);
      boolean boolean0 = switchState0.stop();
      assertEquals(1.0, switchState0.getEventTime(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, 0.0, 0.0, 1274);
      boolean boolean0 = switchState0.stop();
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn(16.066779237170508, Double.NaN, 16.066779237170508, (-3355.6218226455503), Double.NaN).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 16.066779237170508, 16.066779237170508, 1277);
      double[] doubleArray0 = new double[4];
      switchState0.reinitializeBegin(16.066779237170508, doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.stepAccepted((-636.7), doubleArray0);
      assertEquals(16.066779237170508, switchState0.getEventTime(), 0.01);
      
      boolean boolean0 = switchState0.reset(670.0744255285274, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(16.066779237170508, Double.NaN, 16.066779237170508, (-3355.6218226455503), Double.NaN).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 16.066779237170508, 1277, 1277);
      double[] doubleArray0 = new double[2];
      switchState0.reinitializeBegin(16.066779237170508, doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      dummyStepInterpolator0.currentTime = (double) 1277;
      switchState0.evaluateStep(dummyStepInterpolator0);
      boolean boolean0 = switchState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(670.5279592468266, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3.5219323679207912, (-0.08333333333333333), 3.5219323679207912, (-3407.326085893751), (-0.08333333333333333)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 3.5219323679207912, 3.5219323679207912, 10);
      double[] doubleArray0 = new double[6];
      switchState0.reinitializeBegin((-3407.326085893751), doubleArray0);
      switchState0.stepAccepted((-3407.326085893751), doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      // Undeclared exception!
      try { 
        switchState0.evaluateStep(dummyStepInterpolator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Function values at endpoints do not have different signs.  Endpoints: [-3407.326085893751,NaN]  Values: [-3407.326085893751,-0.08333333333333333]
         //
         verifyException("org.apache.commons.math.analysis.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(16.066779237170508).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 16.066779237170508, 16.066779237170508, 1277);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      
      double[] doubleArray0 = new double[4];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      switchState0.evaluateStep(dummyStepInterpolator0);
      assertFalse(switchState0.stop());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(16.066779237170508, Double.NaN, 0.0, 0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 16.066779237170508, 16.066779237170508, 1277);
      double[] doubleArray0 = new double[2];
      switchState0.reinitializeBegin(16.066779237170508, doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      dummyStepInterpolator0.currentTime = (double) 1277;
      // Undeclared exception!
      try { 
        switchState0.evaluateStep(dummyStepInterpolator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Function values at endpoints do not have different signs.  Endpoints: [16.066779237170508,48.094738483997084]  Values: [0.0,0.0]
         //
         verifyException("org.apache.commons.math.analysis.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-2146613964)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, (-2146613964), (-2146613964), (-2146613964));
      switchState0.reinitializeBegin((-2146613964), (double[]) null);
      assertFalse(switchState0.stop());
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, 4039.2722, 4039.2722, 3);
      double double0 = switchState0.getEventTime();
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(switchState0.stop());
  }
}

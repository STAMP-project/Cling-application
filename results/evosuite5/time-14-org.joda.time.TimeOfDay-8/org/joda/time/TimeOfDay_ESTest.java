/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 02:59:37 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Months;
import org.joda.time.Period;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class TimeOfDay_ESTest extends TimeOfDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      TimeOfDay timeOfDay0 = new TimeOfDay(dateTimeZone0);
      Period period0 = Period.fieldDifference(timeOfDay0, timeOfDay0);
      TimeOfDay timeOfDay1 = timeOfDay0.minus(period0);
      assertNotSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(3, 3);
      Months months0 = Months.monthsBetween((ReadablePartial) timeOfDay0, (ReadablePartial) timeOfDay0);
      TimeOfDay timeOfDay1 = timeOfDay0.withPeriodAdded(months0, 0);
      assertSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((-187L));
      TimeOfDay timeOfDay1 = timeOfDay0.minus((ReadablePeriod) null);
      assertEquals(59, timeOfDay1.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(359L, (Chronology) gregorianChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withFieldAdded(durationFieldType0, 0);
      assertEquals(0, timeOfDay1.getHourOfDay());
      assertEquals(359, timeOfDay0.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) gregorianChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withFieldAdded(durationFieldType0, (-58));
      assertEquals(59, timeOfDay1.getMinuteOfHour());
      assertEquals(2, timeOfDay1.getSecondOfMinute());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      TimeOfDay timeOfDay0 = new TimeOfDay(1, 1, 1, 1);
      TimeOfDay timeOfDay1 = timeOfDay0.withField(dateTimeFieldType0, 1);
      assertSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      TimeOfDay timeOfDay1 = timeOfDay0.withField(dateTimeFieldType0, 1);
      assertEquals(1, timeOfDay1.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.withChronologyRetainFields((Chronology) null);
      assertSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      // Undeclared exception!
      try { 
        timeOfDay0.getField(787);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 787
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(mockDate0);
      assertEquals(320, timeOfDay0.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      String string0 = timeOfDay0.toString();
      assertEquals("T21:21:21.320", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.plusSeconds(1);
      assertEquals(22, timeOfDay1.getSecondOfMinute());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) buddhistChronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.minusMinutes(3);
      assertEquals(57, timeOfDay1.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      TimeOfDay timeOfDay1 = timeOfDay0.plusMinutes(2);
      assertEquals(2, timeOfDay1.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) gregorianChronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.plusMillis(1);
      assertEquals(1, timeOfDay1.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      Days days0 = Days.ONE;
      TimeOfDay timeOfDay1 = timeOfDay0.plus(days0);
      assertEquals(21, timeOfDay1.getHourOfDay());
      assertNotSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((Object) null);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) gregorianChronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.minusHours(1);
      assertEquals(23, timeOfDay1.getHourOfDay());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1, 1, 1);
      TimeOfDay timeOfDay1 = timeOfDay0.minusSeconds(1);
      assertEquals(0, timeOfDay1.getSecondOfMinute());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) gregorianChronology0);
      DateTime dateTime0 = timeOfDay0.MIDNIGHT.toDateTimeToday();
      assertEquals(1392332400000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) islamicChronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.withMillisOfSecond(1);
      assertEquals(1, timeOfDay1.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay((Object) null, islamicChronology0);
      assertEquals(21, timeOfDay0.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) islamicChronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.withHourOfDay(1);
      assertEquals(320, timeOfDay1.getMillisOfSecond());
      assertEquals(1, timeOfDay1.getHourOfDay());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((-187L));
      DateTimeFieldType[] dateTimeFieldTypeArray0 = timeOfDay0.getFieldTypes();
      assertEquals(4, dateTimeFieldTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1, 1, 1, 1);
      TimeOfDay timeOfDay1 = timeOfDay0.minusMillis(1);
      assertEquals(0, timeOfDay1.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1, 1, 1);
      TimeOfDay timeOfDay1 = timeOfDay0.plusHours(1);
      assertEquals(2, timeOfDay1.getHourOfDay());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      TimeOfDay timeOfDay0 = new TimeOfDay(1, 1, 1, islamicChronology0);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      assertEquals(4, timeOfDay0.size());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      
      timeOfDay0.toLocalTime();
      assertEquals(320, timeOfDay0.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      TimeOfDay timeOfDay1 = timeOfDay0.withMinuteOfHour(3);
      assertEquals(4, timeOfDay1.size());
      assertEquals(3, timeOfDay1.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1L);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      TimeOfDay timeOfDay1 = timeOfDay0.withChronologyRetainFields(ethiopicChronology0);
      assertEquals(1, timeOfDay1.getHourOfDay());
      assertEquals(4, timeOfDay1.size());
      assertEquals(0, timeOfDay1.getSecondOfMinute());
      assertNotSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) gregorianChronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withSecondOfMinute(1);
      assertEquals(1, timeOfDay1.getSecondOfMinute());
      assertEquals(4, timeOfDay1.size());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(21, timeOfDay0.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-1412L));
      assertEquals(4, timeOfDay0.size());
      assertEquals(59, timeOfDay0.getMinuteOfHour());
      assertEquals(23, timeOfDay0.getHourOfDay());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1, 1, (Chronology) null);
      assertEquals(4, timeOfDay0.size());
  }
}

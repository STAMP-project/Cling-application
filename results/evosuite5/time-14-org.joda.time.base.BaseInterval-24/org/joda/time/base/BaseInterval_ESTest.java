/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 23:09:20 GMT 2019
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BaseInterval_ESTest extends BaseInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableInterval.parse("< {Ug^X{' wOM<BC\"k>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: < {Ug^X{' wOM<BC\"k>
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableInstant) null);
      MutableInterval mutableInterval0 = new MutableInterval(interval0);
      assertEquals(1392409281320L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableInstant) null);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      MutableInterval mutableInterval0 = new MutableInterval(interval0, islamicChronology0);
      assertEquals(1392409281320L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateMidnight dateMidnight0 = new DateMidnight((-1L), (Chronology) buddhistChronology0);
      MutableInterval mutableInterval0 = new MutableInterval((ReadablePeriod) null, dateMidnight0);
      assertEquals((-86400000L), mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Months months0 = Months.NINE;
      DateMidnight dateMidnight0 = new DateMidnight();
      MutableInterval mutableInterval0 = new MutableInterval(months0, dateMidnight0);
      assertEquals(1368482400000L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Interval interval0 = new Interval((ReadableInstant) null, (ReadablePeriod) null);
      assertEquals(1392409281320L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(3339);
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, seconds0);
      assertEquals(1392412620320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      Interval interval0 = new Interval(dateMidnight0, dateMidnight0);
      assertEquals(1392332400000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTime dateTime0 = new DateTime((-948L), (Chronology) gregorianChronology0);
      Duration duration0 = new Duration(dateTime0, dateTime0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, duration0);
      assertEquals((-948L), mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Interval interval0 = new Interval((Object) null);
      assertEquals(1392409281320L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableInterval mutableInterval0 = new MutableInterval(duration0, mutableDateTime0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Instant instant0 = Instant.now();
      Interval interval0 = new Interval((ReadableInstant) null, instant0);
      long long0 = interval0.getEndMillis();
      assertEquals(1392409281320L, long0);
  }
}

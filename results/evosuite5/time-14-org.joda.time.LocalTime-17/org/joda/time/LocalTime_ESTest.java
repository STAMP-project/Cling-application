/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 19:28:03 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.field.SkipUndoDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LocalTime_ESTest extends LocalTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime_Property0);
      
      // Undeclared exception!
      try { 
        localTime_Property0.addNoWrapToCopy(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The addition exceeded the boundaries of LocalTime
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      LocalTime localTime0 = LocalTime.now((Chronology) islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime_Property0);
      
      LocalTime localTime1 = localTime_Property0.addNoWrapToCopy(1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = localTime0.toString((String) null, locale0);
      assertEquals(4, localTime0.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("00:00:00.000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      try { 
        localTime0.toString("&F-'CTARu8:cg", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: F
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      String string0 = localTime0.MIDNIGHT.toString((String) null);
      assertEquals(4, localTime0.size());
      assertEquals("00:00:00.000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.toString("b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      LocalTime.Property localTime_Property0 = localTime0.property(dateTimeFieldType0);
      assertEquals(4, localTime0.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(localTime_Property0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      LocalTime.Property localTime_Property0 = localTime0.property(dateTimeFieldType0);
      assertEquals(4, localTime0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(localTime_Property0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.MIDNIGHT.minusMillis(0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      LocalTime localTime0 = LocalTime.now((Chronology) islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusMillis(1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusSeconds(0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      LocalTime localTime0 = LocalTime.now((Chronology) islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusSeconds(1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.MIDNIGHT.minusMinutes(0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      LocalTime localTime0 = new LocalTime((long) 1, (Chronology) islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusMinutes((-140));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusHours(0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusHours(1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusMillis(0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusSeconds(0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusSeconds(4784);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.MIDNIGHT.plusMinutes(0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusMinutes(2145338309);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.MIDNIGHT.plusHours(0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      LocalTime localTime0 = LocalTime.now((Chronology) islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusHours(1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Years years0 = Years.TWO;
      assertEquals(2, years0.getYears());
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      LocalTime localTime1 = localTime0.withPeriodAdded(years0, 0);
      assertEquals(4, localTime0.size());
      assertEquals(2, years0.getYears());
      assertEquals(1, years0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      LocalTime localTime1 = localTime0.MIDNIGHT.withFieldAdded(durationFieldType0, (-554));
      assertEquals(4, localTime0.size());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.withFieldAdded(durationFieldType0, 1749);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'days' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.withFieldAdded((DurationFieldType) null, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, 0);
      assertEquals(4, localTime0.size());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        localTime0.withField(dateTimeFieldType0, 1952);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1952 for clockhourOfHalfday must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.withField((DateTimeFieldType) null, (-3114));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        localTime0.withField(dateTimeFieldType0, 999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 999 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.withFields((ReadablePartial) null);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusMillis(1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      
      int int0 = localTime1.compareTo((ReadablePartial) localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(1, int0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      boolean boolean0 = localTime0.MIDNIGHT.isEqual(localTime0);
      assertEquals(4, localTime0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = new LocalTime();
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
      assertTrue(localTime1.equals((Object)localTime0));
      
      boolean boolean0 = localTime1.isAfter(localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(boolean0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertTrue(localTime0.equals((Object)localTime1));
      assertTrue(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try { 
        localTime0.compareTo((ReadablePartial) localDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = LocalTime.now((Chronology) islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, localTime1.size());
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      
      int int0 = localTime1.compareTo((ReadablePartial) localTime0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(0, int0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusMillis(1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      
      LocalTime localTime2 = localTime0.withFields(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      
      boolean boolean0 = localTime2.equals(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertTrue(boolean0);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertTrue(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) 1);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      boolean boolean0 = localTime0.equals(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, localTime0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      boolean boolean0 = localTime0.MIDNIGHT.equals(localTime0);
      assertEquals(4, localTime0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      boolean boolean0 = localTime0.isSupported((DurationFieldType) null);
      assertEquals(4, localTime0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = localTime0.isSupported(dateTimeFieldType0);
      assertEquals(4, localTime0.size());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      boolean boolean0 = localTime0.isSupported((DateTimeFieldType) null);
      assertEquals(4, localTime0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.getValue(578);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 578
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.getField(2777);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 2777
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      LocalTime localTime0 = LocalTime.now((Chronology) islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = new LocalTime(1, 1, 1, 1);
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      
      boolean boolean0 = localTime0.equals(localTime1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(boolean0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(173L, (DateTimeZone) null);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.withSecondOfMinute((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1, 1, 1);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int int0 = localTime0.getHourOfDay();
      assertEquals(4, localTime0.size());
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.withMillisOfSecond(1131);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1131 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int int0 = localTime0.MIDNIGHT.getMillisOfSecond();
      assertEquals(4, localTime0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test59()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = new LocalTime(localTime0, (DateTimeZone) null);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
      assertTrue(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Days days0 = Days.MIN_VALUE;
      assertEquals(Integer.MIN_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      LocalTime localTime1 = localTime0.plus(days0);
      assertEquals(4, localTime0.size());
      assertEquals(Integer.MIN_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertTrue(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int int0 = localTime0.MIDNIGHT.getSecondOfMinute();
      assertEquals(4, localTime0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int int0 = localTime0.getMinuteOfHour();
      assertEquals(4, localTime0.size());
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.withMillisOfDay(1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  @Ignore
  public void test64()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = new LocalTime(localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
      assertTrue(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int int0 = localTime0.getMillisOfDay();
      assertEquals(4, localTime0.size());
      assertEquals(76881320, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1, 1);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.withMinuteOfHour(1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.MIDNIGHT.minus((ReadablePeriod) null);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.MIDNIGHT.withHourOfDay(0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTime dateTime0 = localTime0.toDateTimeToday();
      assertEquals(4, localTime0.size());
      assertEquals(1392332400000L, dateTime0.getMillis());
      assertNotNull(dateTime0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      LocalTime localTime1 = localTime_Property0.addWrapFieldToCopy(11);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      LocalTime localTime1 = localTime_Property0.getLocalTime();
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      LocalTime localTime1 = localTime_Property0.addCopy((long) Integer.MAX_VALUE);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(3165L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(islamicChronology0, dateTimeField0, 1);
      LocalTime.Property localTime_Property0 = new LocalTime.Property(localTime0, skipUndoDateTimeField0);
      LocalTime localTime1 = localTime_Property0.roundHalfCeilingCopy();
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      LocalTime localTime1 = localTime_Property0.roundHalfEvenCopy();
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.withMaximumValue();
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.roundCeilingCopy();
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      LocalTime localTime1 = localTime_Property0.roundHalfFloorCopy();
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      LocalTime localTime1 = localTime_Property0.addCopy(3721);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1616L), (Chronology) julianChronology0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for millisOfSecond is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      Chronology chronology0 = localTime_Property0.getChronology();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      LocalTime localTime1 = localTime_Property0.withMinimumValue();
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      LocalTime localTime1 = localTime_Property0.roundFloorCopy();
      assertSame(localTime1, localTime0);
  }
}

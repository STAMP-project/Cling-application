/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 21:04:27 GMT 2019
 */

package org.mockito.cglib.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.Label;
import org.mockito.asm.MethodVisitor;
import org.mockito.asm.Type;
import org.mockito.cglib.core.Block;
import org.mockito.cglib.core.ClassEmitter;
import org.mockito.cglib.core.CodeEmitter;
import org.mockito.cglib.core.Customizer;
import org.mockito.cglib.core.EmitUtils;
import org.mockito.cglib.core.MethodInfo;
import org.mockito.cglib.core.ObjectSwitchCallback;
import org.mockito.cglib.core.ProcessArrayCallback;
import org.mockito.cglib.core.Signature;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class EmitUtils_ESTest extends EmitUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(4586);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@)9-XWKS6`sq";
      stringArray0[1] = "@)9-XWKS6`sq";
      stringArray0[2] = "@)9-XWKS6`sq";
      stringArray0[3] = "@)9-XWKS6`sq";
      stringArray0[4] = "@)9-XWKS6`sq";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(4586, "@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("@)9-XWKS6`sq", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      Block block0 = codeEmitter0.begin_block();
      block0.end();
      // Undeclared exception!
      try { 
        EmitUtils.wrap_undeclared_throwable(codeEmitter0, block0, typeArray0, type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(0, "@)j9-XWKS6`sq", "@)j9-XWKS6`sq", "@)j9-XWKS6`sq", stringArray0);
      Signature signature0 = new Signature("@)j9-XWKS6`sq", "@)j9-XWKS6`sq");
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type[] typeArray0 = new Type[1];
      Type type0 = Type.INT_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 104, signature0, typeArray0);
      Block block0 = codeEmitter0.begin_block();
      block0.end();
      // Undeclared exception!
      try { 
        EmitUtils.wrap_undeclared_throwable(codeEmitter0, block0, typeArray0, type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4604);
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(4604, "@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Signature signature0 = new Signature("@)9-XWKS6`sq", "@)9-XWKS6`sq");
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, (Type[]) null);
      Block block0 = codeEmitter0.begin_block();
      block0.end();
      // Undeclared exception!
      try { 
        EmitUtils.wrap_undeclared_throwable(codeEmitter0, block0, (Type[]) null, type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      String[] stringArray0 = new String[0];
      Type[] typeArray0 = new Type[3];
      EmitUtils.add_properties(classEmitter0, stringArray0, typeArray0);
      assertEquals(3, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("b,Wb4M$nD", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 0, signature0, typeArray0);
      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();
      linkedList0.add((BigInteger) null);
      // Undeclared exception!
      try { 
        EmitUtils.constructor_switch(codeEmitter0, linkedList0, (ObjectSwitchCallback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4610);
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(4610, "@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq", stringArray0);
      Signature signature0 = new Signature("@)9-XWKS6`sq", "@)9-XWKS6`sq");
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, (Type[]) null);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = new EmitUtils.ArrayDelimiters("@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq");
      Type type0 = Type.getObjectType("@)9-XWKS6`sq");
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, customizer0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Type type0 = Type.VOID_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("bb4M$nD", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 2, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, (Customizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("b,Wb4M$nD", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 2, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, (Customizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Type type0 = Type.LONG_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("b,Wb4M$nD", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 2, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, (Customizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("b,Wb4M$nD", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 2, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, (Customizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Type type0 = Type.INT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("org.mockio.cglibcoe.EmitUils4", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 2, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = new EmitUtils.ArrayDelimiters("org.mockio.cglibcoe.EmitUils4", "org.mockio.cglibcoe.EmitUils4", "org.mockio.cglibcoe.EmitUils4");
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, (Customizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Type type0 = Type.SHORT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("!)u", "!)u");
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 9, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, customizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("{IZ/XN", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 2, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, customizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      Signature signature0 = new Signature("!)", "!)");
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 9, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, customizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Type type0 = Type.CHAR_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("]G", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 2, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = new EmitUtils.ArrayDelimiters("]G", "]G", "]G");
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, (Customizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Type type0 = Type.VOID_TYPE;
      // Undeclared exception!
      try { 
        EmitUtils.append_string((CodeEmitter) null, type0, (EmitUtils.ArrayDelimiters) null, (Customizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(4622);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@)c9-X/KS6`s";
      stringArray0[1] = "@)c9-X/KS6`s";
      stringArray0[2] = "@)c9-X/KS6`s";
      stringArray0[3] = "@)c9-X/KS6`s";
      stringArray0[4] = "@)c9-X/KS6`s";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "@)c9-X/KS6`s", "@)c9-X/KS6`s", "@)c9-X/KS6`s", stringArray0);
      Type[] typeArray0 = new Type[1];
      Signature signature0 = new Signature("@)c9-X/KS6`s", "@)c9-X/KS6`s");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      Type type0 = Type.getObjectType("@)c9-X/KS6`s");
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      Label label0 = codeEmitter0.mark();
      EmitUtils.not_equals(codeEmitter0, type0, label0, customizer0);
      assertEquals(1, Type.BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(4586);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@)9-XWKS6`sq";
      stringArray0[1] = "@)9-XWKS6`sq";
      stringArray0[2] = "@)9-XWKS6`sq";
      stringArray0[3] = "@)9-XWKS6`sq";
      stringArray0[4] = "@)9-XWKS6`sq";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(1317, "@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq", stringArray0);
      Type type0 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("@)9-XWKS6`sq", "@)9-XWKS6`sq");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 49, signature0, typeArray0);
      Label label0 = codeEmitter0.make_label();
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.not_equals(codeEmitter0, type0, label0, customizer0);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(4586);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@)9-XWKS6`sq";
      stringArray0[1] = "@)9-XWKS6`sq";
      stringArray0[2] = "@)9-XWKS6`sq";
      stringArray0[3] = "@)9-XWKS6`sq";
      stringArray0[4] = "@)9-XWKS6`sq";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(1317, "@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq", stringArray0);
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("@)9-XWKS6`sq", "@)9-XWKS6`sq");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 49, signature0, typeArray0);
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.VOID_TYPE;
      EmitUtils.hash_code(codeEmitter0, type0, 0, customizer0);
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(4586);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@)9-XWKS6`sq";
      stringArray0[1] = "@)9-XWKS6`sq";
      stringArray0[2] = "@)9-XWKS6`sq";
      stringArray0[3] = "@)9-XWKS6`sq";
      stringArray0[4] = "@)9-XWKS6`sq";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(4586, "@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq", stringArray0);
      Type type0 = Type.LONG_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("@)9-XWKS6`sq", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type0, 112, customizer0);
      assertEquals(1, Type.BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(4586);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@)9-XWKS6`sq";
      stringArray0[1] = "@)9-XWKS6`sq";
      stringArray0[2] = "@)9-XWKS6`sq";
      stringArray0[3] = "@)9-XWKS6`sq";
      stringArray0[4] = "@)9-XWKS6`sq";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(4586, "@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("@)9-XWKS6`sq", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type0, 112, customizer0);
      assertEquals(6, type0.getSort());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(4622);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@)c9-X/KS6`s";
      stringArray0[1] = "@)c9-X/KS6`s";
      stringArray0[2] = "@)c9-X/KS6`s";
      stringArray0[3] = "@)c9-X/KS6`s";
      stringArray0[4] = "@)c9-X/KS6`s";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "@)c9-X/KS6`s", "@)c9-X/KS6`s", "@)c9-X/KS6`s", stringArray0);
      Type type0 = Type.INT_TYPE;
      Type[] typeArray0 = new Type[1];
      Signature signature0 = new Signature("@)c9-X/KS6`s", "@)c9-X/KS6`s");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type0, 3, customizer0);
      assertEquals(1, Type.BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(4586);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@)9-XWKS6`sq";
      stringArray0[1] = "@)9-XWKS6`sq";
      stringArray0[2] = "@)9-XWKS6`sq";
      stringArray0[3] = "@)9-XWKS6`sq";
      stringArray0[4] = "@)9-XWKS6`sq";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(1317, "@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq", stringArray0);
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("@)9-XWKS6`sq", "@)9-XWKS6`sq");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1317, signature0, typeArray0);
      Type type0 = Type.SHORT_TYPE;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type0, 49, customizer0);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(4586);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@)9-XWKS6`sq";
      stringArray0[1] = "@)9-XWKS6`sq";
      stringArray0[2] = "@)9-XWKS6`sq";
      stringArray0[3] = "@)9-XWKS6`sq";
      stringArray0[4] = "@)9-XWKS6`sq";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(4586, "@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq", stringArray0);
      Type type0 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("@)9-XWKS6`sq", "@)9-XWKS6`sq");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type0, 10, customizer0);
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(4586);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@)9-XWKS6`sq";
      stringArray0[1] = "@)9-XWKS6`sq";
      stringArray0[2] = "@)9-XWKS6`sq";
      stringArray0[3] = "@)9-XWKS6`sq";
      stringArray0[4] = "@)9-XWKS6`sq";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq", stringArray0);
      Type type0 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-91), signature0, typeArray0);
      Type type1 = Type.CHAR_TYPE;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type1, 347, customizer0);
      assertEquals(1, Type.BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(4586);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@)9-XWKS6`sq";
      stringArray0[1] = "@)9-XWKS6`sq";
      stringArray0[2] = "@)9-XWKS6`sq";
      stringArray0[3] = "@)9-XWKS6`sq";
      stringArray0[4] = "@)9-XWKS6`sq";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(1317, "@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq", stringArray0);
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("@)9-XWKS6`sq", "@)9-XWKS6`sq");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 49, signature0, typeArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      EmitUtils.hash_code(codeEmitter0, type0, 9, (Customizer) null);
      assertEquals(3, Type.BYTE);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(4586);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@)9-XWKS6`sq";
      stringArray0[1] = "@)9-XWKS6`sq";
      stringArray0[2] = "@)9-XWKS6`sq";
      stringArray0[3] = "@)9-XWKS6`sq";
      stringArray0[4] = "@)9-XWKS6`sq";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(1317, "@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq", stringArray0);
      Type type0 = Type.getObjectType("@)9-XWKS6`sq");
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("@)9-XWKS6`sq", "@)9-XWKS6`sq");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      EmitUtils.hash_code(codeEmitter0, type0, 157, (Customizer) null);
      assertEquals(4, Type.SHORT);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(4586);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@)9-XWKS6`sq";
      stringArray0[1] = "@)9-XWKS6`sq";
      stringArray0[2] = "@)9-XWKS6`sq";
      stringArray0[3] = "@)9-XWKS6`sq";
      stringArray0[4] = "@)9-XWKS6`sq";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq", stringArray0);
      Type type0 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("@)9-XWKS6`sq", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      Type type1 = Type.getObjectType("@)9-XWKS6`sq");
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type1, 10, customizer0);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        EmitUtils.push_object((CodeEmitter) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown type: class java.lang.Object
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        EmitUtils.push_object((CodeEmitter) null, bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        EmitUtils.push_object((CodeEmitter) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        EmitUtils.push_object((CodeEmitter) null, bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        EmitUtils.push_object((CodeEmitter) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(4586);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@)9-XWKS6`sq";
      stringArray0[1] = "@)9-XWKS6`sq";
      stringArray0[2] = "@)9-XWKS6`sq";
      stringArray0[3] = "@)9-XWKS6`sq";
      stringArray0[4] = "@)9-XWKS6`sq";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(1317, "@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq", stringArray0);
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("@)9-XWKS6`sq", "@)9-XWKS6`sq");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      EmitUtils.push_array(codeEmitter0, typeArray0);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(4586);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@)9-XWKS6`sq";
      stringArray0[1] = "@)9-XWKS6`sq";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(4586, "@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq", stringArray0);
      Signature signature0 = new Signature("@)9-XWKS6`sq", "@)9-XWKS6`sq");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1317, signature0, typeArray0);
      EmitUtils.push_array(codeEmitter0, stringArray0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("b,Wb4M$nD", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 0, signature0, typeArray0);
      classEmitter0.setTarget(classEmitter0);
      Type type1 = Type.getObjectType("b,Wb4M$nD");
      // Undeclared exception!
      try { 
        EmitUtils.push_object(codeEmitter0, type1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Type type0 = Type.LONG_TYPE;
      // Undeclared exception!
      try { 
        EmitUtils.push_object((CodeEmitter) null, type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Type type0 = Type.VOID_TYPE;
      // Undeclared exception!
      try { 
        EmitUtils.push_object((CodeEmitter) null, type0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot load void type
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<String, BigInteger> hashMap0 = new HashMap<String, BigInteger>();
      BigInteger bigInteger0 = BigInteger.TEN;
      hashMap0.put(" WuUetxPD.)7H\"f", bigInteger0);
      // Undeclared exception!
      try { 
        EmitUtils.getSwitchKeys(hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Integer
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        EmitUtils.string_switch((CodeEmitter) null, (String[]) null, 5, (ObjectSwitchCallback) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown switch style 5
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ObjectSwitchCallback objectSwitchCallback0 = mock(ObjectSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.string_switch((CodeEmitter) null, (String[]) null, 2, objectSwitchCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Type type0 = Type.getObjectType("su\"b[^!E'DMBh(:");
      // Undeclared exception!
      try { 
        EmitUtils.wrap_throwable((Block) null, type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Type type0 = Type.CHAR_TYPE;
      // Undeclared exception!
      try { 
        EmitUtils.process_arrays((CodeEmitter) null, type0, (ProcessArrayCallback) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type C is not an array
         //
         verifyException("org.mockito.cglib.core.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Signature signature0 = new Signature("", "0");
      // Undeclared exception!
      try { 
        EmitUtils.factory_method((ClassEmitter) null, signature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        EmitUtils.load_class_this((CodeEmitter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        EmitUtils.string_switch((CodeEmitter) null, stringArray0, 0, (ObjectSwitchCallback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(4586);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@)9-XWKS6`sq";
      stringArray0[1] = "@)9-XWKS6`sq";
      stringArray0[2] = "@)9-XWKS6`sq";
      stringArray0[3] = "@)9-XWKS6`sq";
      stringArray0[4] = "@)9-XWKS6`sq";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(1317, "@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq", stringArray0);
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("@)9-XWKS6`sq", "@)9-XWKS6`sq");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1317, signature0, typeArray0);
      Type type0 = Type.DOUBLE_TYPE;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type0, 3493, customizer0);
      assertEquals(112, CodeEmitter.REM);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4618);
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(4618, "@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq", stringArray0);
      Signature signature0 = new Signature("@)9-XWKS6`sq", "@)9-XWKS6`sq");
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, (Type[]) null);
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      // Undeclared exception!
      try { 
        EmitUtils.constructor_switch(codeEmitter0, linkedList0, (ObjectSwitchCallback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodInfo methodInfo0 = mock(MethodInfo.class, new ViolatedAssumptionAnswer());
      doReturn((Type[]) null).when(methodInfo0).getExceptionTypes();
      doReturn(0).when(methodInfo0).getModifiers();
      doReturn((Signature) null).when(methodInfo0).getSignature();
      // Undeclared exception!
      try { 
        EmitUtils.begin_method(classEmitter0, methodInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // classInfo is null! org.mockito.cglib.core.ClassEmitter@1
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        EmitUtils.load_method((CodeEmitter) null, (MethodInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Type type0 = Type.CHAR_TYPE;
      ClassWriter classWriter0 = new ClassWriter(2);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[2];
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      // Undeclared exception!
      try { 
        EmitUtils.add_properties(classEmitter0, stringArray0, typeArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // classInfo is null! org.mockito.cglib.core.ClassEmitter@6
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ObjectSwitchCallback objectSwitchCallback0 = mock(ObjectSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.method_switch((CodeEmitter) null, linkedList0, objectSwitchCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Type type0 = Type.getType("[<U&");
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.hash_code((CodeEmitter) null, type0, 5, customizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<Type> class0 = Type.class;
      Type type0 = Type.getType(class0);
      ProcessArrayCallback processArrayCallback0 = mock(ProcessArrayCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.process_array((CodeEmitter) null, type0, processArrayCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type Lorg/mockito/asm/Type; is not an array
         //
         verifyException("org.mockito.cglib.core.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        EmitUtils.null_constructor((ClassEmitter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4618);
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(4618, "@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq", stringArray0);
      Signature signature0 = new Signature("@)9-XWKS6`sq", "@)9-XWKS6`sq");
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, (Type[]) null);
      Type type0 = Type.getObjectType("@)9-XWKS6`sq");
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, (Customizer) null);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4610);
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(4610, "@)9-XWKS6`sq", "@)9-XWKS6`sq", "@)9-XWKS6`sq", stringArray0);
      Signature signature0 = new Signature("@)9-XWKS6`sq", "@)9-XWKS6`sq");
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, (Type[]) null);
      Type type0 = Type.getObjectType("@)9-XWKS6`sq");
      Label label0 = new Label();
      EmitUtils.not_equals(codeEmitter0, type0, label0, (Customizer) null);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        EmitUtils.string_switch((CodeEmitter) null, stringArray0, 1, (ObjectSwitchCallback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 06:57:36 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.CompilerEnvirons;
import com.google.javascript.rhino.head.Node;
import com.google.javascript.rhino.head.Parser;
import com.google.javascript.rhino.head.ast.ArrayLiteral;
import com.google.javascript.rhino.head.ast.AstNode;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.ConditionalExpression;
import com.google.javascript.rhino.head.ast.ContinueStatement;
import com.google.javascript.rhino.head.ast.ElementGet;
import com.google.javascript.rhino.head.ast.EmptyExpression;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.Name;
import com.google.javascript.rhino.head.ast.ObjectLiteral;
import com.google.javascript.rhino.head.ast.ParenthesizedExpression;
import com.google.javascript.rhino.head.ast.PropertyGet;
import com.google.javascript.rhino.head.ast.Scope;
import java.io.Reader;
import java.io.StringReader;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(41);
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(41, arrayLiteral0.getPosition());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertNull(arrayLiteral0.getJsDoc());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals(41, arrayLiteral0.getAbsolutePosition());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.depth());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertNotNull(arrayLiteral0);
      
      ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression(9, 13, arrayLiteral0);
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertNull(arrayLiteral0.getJsDoc());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals(41, arrayLiteral0.getAbsolutePosition());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals(32, arrayLiteral0.getPosition());
      assertEquals(1, arrayLiteral0.depth());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(13, parenthesizedExpression0.getLength());
      assertEquals(9, parenthesizedExpression0.getPosition());
      assertEquals("87", parenthesizedExpression0.toString());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals((-1), parenthesizedExpression0.getLineno());
      assertEquals(9, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(87, parenthesizedExpression0.getType());
      assertFalse(parenthesizedExpression0.hasChildren());
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertNotNull(parenthesizedExpression0);
      
      parser0.markDestructuring(parenthesizedExpression0);
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertNull(arrayLiteral0.getJsDoc());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals(41, arrayLiteral0.getAbsolutePosition());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertTrue(arrayLiteral0.isDestructuring());
      assertEquals(32, arrayLiteral0.getPosition());
      assertEquals(1, arrayLiteral0.depth());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(13, parenthesizedExpression0.getLength());
      assertEquals(9, parenthesizedExpression0.getPosition());
      assertEquals("87", parenthesizedExpression0.toString());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals((-1), parenthesizedExpression0.getLineno());
      assertEquals(9, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(87, parenthesizedExpression0.getType());
      assertFalse(parenthesizedExpression0.hasChildren());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression((-1186));
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(87, parenthesizedExpression0.getType());
      assertFalse(parenthesizedExpression0.hasChildren());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals((-1186), parenthesizedExpression0.getAbsolutePosition());
      assertEquals((-1), parenthesizedExpression0.getLineno());
      assertEquals((-1186), parenthesizedExpression0.getPosition());
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertNotNull(parenthesizedExpression0);
      
      AstNode astNode0 = parser0.removeParens(parenthesizedExpression0);
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(87, parenthesizedExpression0.getType());
      assertFalse(parenthesizedExpression0.hasChildren());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals((-1186), parenthesizedExpression0.getAbsolutePosition());
      assertEquals((-1), parenthesizedExpression0.getLineno());
      assertEquals((-1186), parenthesizedExpression0.getPosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertNull(astNode0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      Name name0 = new Name(16);
      assertEquals(0, name0.depth());
      assertEquals(16, name0.getPosition());
      assertFalse(name0.hasChildren());
      assertNull(name0.getString());
      assertEquals(16, name0.getAbsolutePosition());
      assertEquals(39, name0.getType());
      assertEquals(0, name0.length());
      assertNull(name0.getJsDoc());
      assertEquals(1, name0.getLength());
      assertEquals((-1), name0.getLineno());
      assertEquals("39", name0.toString());
      assertNull(name0.getIdentifier());
      assertFalse(name0.isLocalName());
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertNotNull(name0);
      
      ContinueStatement continueStatement0 = new ContinueStatement(24, name0);
      assertEquals(1, name0.depth());
      assertFalse(name0.hasChildren());
      assertNull(name0.getString());
      assertEquals(16, name0.getAbsolutePosition());
      assertEquals(39, name0.getType());
      assertEquals(0, name0.length());
      assertEquals((-8), name0.getPosition());
      assertNull(name0.getJsDoc());
      assertEquals(1, name0.getLength());
      assertEquals((-1), name0.getLineno());
      assertEquals("39", name0.toString());
      assertNull(name0.getIdentifier());
      assertFalse(name0.isLocalName());
      assertEquals(121, continueStatement0.getType());
      assertEquals(24, continueStatement0.getAbsolutePosition());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(24, continueStatement0.getPosition());
      assertEquals((-1), continueStatement0.getLength());
      assertEquals(0, continueStatement0.depth());
      assertEquals("121", continueStatement0.toString());
      assertFalse(continueStatement0.hasChildren());
      assertEquals((-1), continueStatement0.getLineno());
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertNotNull(continueStatement0);
      
      parser0.checkMutableReference(continueStatement0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(1, name0.depth());
      assertFalse(name0.hasChildren());
      assertNull(name0.getString());
      assertEquals(16, name0.getAbsolutePosition());
      assertEquals(39, name0.getType());
      assertEquals(0, name0.length());
      assertEquals((-8), name0.getPosition());
      assertNull(name0.getJsDoc());
      assertEquals(1, name0.getLength());
      assertEquals((-1), name0.getLineno());
      assertEquals("39", name0.toString());
      assertNull(name0.getIdentifier());
      assertFalse(name0.isLocalName());
      assertEquals(121, continueStatement0.getType());
      assertEquals(24, continueStatement0.getAbsolutePosition());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(24, continueStatement0.getPosition());
      assertEquals((-1), continueStatement0.getLength());
      assertEquals(0, continueStatement0.depth());
      assertEquals("121", continueStatement0.toString());
      assertFalse(continueStatement0.hasChildren());
      assertEquals((-1), continueStatement0.getLineno());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      parser0.inUseStrictDirective = true;
      Name name0 = new Name(65536);
      assertFalse(name0.isLocalName());
      assertEquals(39, name0.getType());
      assertEquals(65536, name0.getAbsolutePosition());
      assertEquals(0, name0.depth());
      assertEquals(65536, name0.getPosition());
      assertEquals("39", name0.toString());
      assertEquals((-1), name0.getLineno());
      assertEquals(0, name0.length());
      assertNull(name0.getString());
      assertFalse(name0.hasChildren());
      assertNull(name0.getIdentifier());
      assertNull(name0.getJsDoc());
      assertEquals(1, name0.getLength());
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertNotNull(name0);
      
      Node node0 = parser0.simpleAssignment(name0, name0);
      assertFalse(name0.isLocalName());
      assertEquals(65536, name0.getAbsolutePosition());
      assertEquals(0, name0.depth());
      assertEquals(65536, name0.getPosition());
      assertEquals("49", name0.toString());
      assertEquals(49, name0.getType());
      assertEquals((-1), name0.getLineno());
      assertEquals(0, name0.length());
      assertNull(name0.getString());
      assertFalse(name0.hasChildren());
      assertNull(name0.getIdentifier());
      assertNull(name0.getJsDoc());
      assertEquals(1, name0.getLength());
      assertNull(node0.getJsDoc());
      assertEquals("8", node0.toString());
      assertEquals(8, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      Name name0 = new Name(65536);
      assertEquals(65536, name0.getPosition());
      assertNull(name0.getIdentifier());
      assertEquals(39, name0.getType());
      assertNull(name0.getString());
      assertEquals(1, name0.getLength());
      assertFalse(name0.hasChildren());
      assertNull(name0.getJsDoc());
      assertFalse(name0.isLocalName());
      assertEquals(0, name0.length());
      assertEquals(0, name0.depth());
      assertEquals(65536, name0.getAbsolutePosition());
      assertEquals((-1), name0.getLineno());
      assertEquals("39", name0.toString());
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertNotNull(name0);
      
      Node node0 = parser0.simpleAssignment(name0, name0);
      assertEquals(65536, name0.getPosition());
      assertNull(name0.getIdentifier());
      assertNull(name0.getString());
      assertEquals(1, name0.getLength());
      assertFalse(name0.hasChildren());
      assertNull(name0.getJsDoc());
      assertFalse(name0.isLocalName());
      assertEquals(0, name0.length());
      assertEquals(0, name0.depth());
      assertEquals(65536, name0.getAbsolutePosition());
      assertEquals((-1), name0.getLineno());
      assertEquals("49", name0.toString());
      assertEquals(49, name0.getType());
      assertEquals(8, node0.getType());
      assertEquals("8", node0.toString());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertNull(node0.getJsDoc());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      Name name0 = (Name)parser0.createName(65536, "2wP[", (Node) null);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(name0.isLocalName());
      assertEquals("65536", name0.toString());
      assertEquals(65536, name0.getType());
      assertEquals(4, name0.getLength());
      assertEquals("2wP[", name0.getString());
      assertFalse(name0.hasChildren());
      assertEquals(4, name0.length());
      assertEquals(0, name0.depth());
      assertNull(name0.getJsDoc());
      assertEquals((-1), name0.getLineno());
      assertEquals((-1), name0.getPosition());
      assertEquals((-1), name0.getAbsolutePosition());
      assertEquals("2wP[", name0.getIdentifier());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertNotNull(name0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertNotNull(compilerEnvirons0);
      
      AstRoot astRoot0 = new AstRoot(127);
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertFalse(astRoot0.hasChildren());
      assertEquals((-1), astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals((-1), astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getSourceName());
      assertEquals(127, astRoot0.getPosition());
      assertEquals((-1), astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(127, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertNotNull(astRoot0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      ObjectLiteral objectLiteral0 = new ObjectLiteral(65536, (-736));
      assertEquals(66, objectLiteral0.getType());
      assertFalse(objectLiteral0.hasChildren());
      assertEquals((-1), objectLiteral0.getLineno());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals((-736), objectLiteral0.getLength());
      assertEquals(0, objectLiteral0.depth());
      assertEquals("66", objectLiteral0.toString());
      assertFalse(objectLiteral0.isDestructuring());
      assertEquals(65536, objectLiteral0.getAbsolutePosition());
      assertEquals(65536, objectLiteral0.getPosition());
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertNotNull(objectLiteral0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = parser0.destructuringObject(objectLiteral0, 154, "nP", astRoot0, linkedList0);
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertFalse(astRoot0.hasChildren());
      assertEquals((-1), astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals((-1), astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getSourceName());
      assertEquals(127, astRoot0.getPosition());
      assertEquals((-1), astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(127, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(66, objectLiteral0.getType());
      assertFalse(objectLiteral0.hasChildren());
      assertEquals((-1), objectLiteral0.getLineno());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals((-736), objectLiteral0.getLength());
      assertEquals(0, objectLiteral0.depth());
      assertEquals("66", objectLiteral0.toString());
      assertFalse(objectLiteral0.isDestructuring());
      assertEquals(65536, objectLiteral0.getAbsolutePosition());
      assertEquals(65536, objectLiteral0.getPosition());
      assertEquals(0, linkedList0.size());
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertTrue(boolean0);
      assertFalse(linkedList0.contains("nP"));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      assertEquals("65", arrayLiteral0.toString());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals((-1), arrayLiteral0.getPosition());
      assertEquals((-1), arrayLiteral0.getAbsolutePosition());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals(1, arrayLiteral0.getLength());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals(65, arrayLiteral0.getType());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertNotNull(arrayLiteral0);
      
      boolean boolean0 = parser0.destructuringArray(arrayLiteral0, 154, "^", arrayLiteral0, (List<String>) null);
      assertEquals("65", arrayLiteral0.toString());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals((-1), arrayLiteral0.getPosition());
      assertEquals((-1), arrayLiteral0.getAbsolutePosition());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals(1, arrayLiteral0.getLength());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals(65, arrayLiteral0.getType());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse(",R\")4n#zJ&)@1=3", "msg.bad.break", 86);
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(86, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(86, astRoot0.getEndLineno());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(2, astRoot0.getLength());
      assertEquals("msg.bad.break", astRoot0.getSourceName());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(86, astRoot0.getBaseLineno());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertNotNull(astRoot0);
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(0, arrayLiteral0.getSize());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals((-1), arrayLiteral0.getAbsolutePosition());
      assertEquals(65, arrayLiteral0.getType());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals((-1), arrayLiteral0.getPosition());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.depth());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertNotNull(arrayLiteral0);
      
      arrayLiteral0.addElement(astRoot0);
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(1, astRoot0.getPosition());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.depth());
      assertEquals(86, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(86, astRoot0.getEndLineno());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(2, astRoot0.getLength());
      assertEquals("msg.bad.break", astRoot0.getSourceName());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(86, astRoot0.getBaseLineno());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(1, arrayLiteral0.getSize());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals((-1), arrayLiteral0.getAbsolutePosition());
      assertEquals(65, arrayLiteral0.getType());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals((-1), arrayLiteral0.getPosition());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.depth());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      
      Scope scope0 = (Scope)parser0.destructuringAssignmentHelper(2, arrayLiteral0, arrayLiteral0, ",R\")4n#zJ&)@1=3");
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(1, arrayLiteral0.getSize());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals((-1), arrayLiteral0.getAbsolutePosition());
      assertEquals(65, arrayLiteral0.getType());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals((-1), arrayLiteral0.getPosition());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.depth());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals("158", scope0.toString());
      assertEquals(0, scope0.depth());
      assertNull(scope0.getJsDoc());
      assertEquals((-1), scope0.getAbsolutePosition());
      assertEquals(158, scope0.getType());
      assertEquals(1, scope0.getLength());
      assertEquals((-1), scope0.getLineno());
      assertTrue(scope0.hasChildren());
      assertEquals((-1), scope0.getPosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertNotNull(scope0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      ObjectLiteral objectLiteral0 = new ObjectLiteral(65536, 65536);
      assertEquals(65536, objectLiteral0.getAbsolutePosition());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(65536, objectLiteral0.getLength());
      assertEquals((-1), objectLiteral0.getLineno());
      assertEquals(0, objectLiteral0.depth());
      assertFalse(objectLiteral0.hasChildren());
      assertNull(objectLiteral0.getJsDoc());
      assertFalse(objectLiteral0.isDestructuring());
      assertEquals(65536, objectLiteral0.getPosition());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertNotNull(objectLiteral0);
      
      AstRoot astRoot0 = parser0.parse("6i) girZkuNr:a:m wp", "6i) girZkuNr:a:m wp", 0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getLineno());
      assertEquals("6i) girZkuNr:a:m wp", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getPosition());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertTrue(astRoot0.hasChildren());
      assertEquals(19, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertNotNull(astRoot0);
      
      Scope scope0 = (Scope)parser0.destructuringAssignmentHelper(52, objectLiteral0, objectLiteral0, "6i) girZkuNr:a:m wp");
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(65536, objectLiteral0.getAbsolutePosition());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(65536, objectLiteral0.getLength());
      assertEquals((-1), objectLiteral0.getLineno());
      assertEquals(0, objectLiteral0.depth());
      assertFalse(objectLiteral0.hasChildren());
      assertNull(objectLiteral0.getJsDoc());
      assertFalse(objectLiteral0.isDestructuring());
      assertEquals(65536, objectLiteral0.getPosition());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(1, scope0.getLength());
      assertEquals((-1), scope0.getAbsolutePosition());
      assertEquals("158", scope0.toString());
      assertEquals((-1), scope0.getPosition());
      assertEquals(0, scope0.depth());
      assertNull(scope0.getJsDoc());
      assertTrue(scope0.hasChildren());
      assertEquals((-1), scope0.getLineno());
      assertEquals(158, scope0.getType());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertNotNull(scope0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("cVm.google.javascript.rhino.head.Function", "throw", 65536);
      assertEquals(0, astRoot0.getPosition());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(41, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals("throw", astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertNotNull(astRoot0);
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals((-1), arrayLiteral0.getAbsolutePosition());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals((-1), arrayLiteral0.getPosition());
      assertEquals(1, arrayLiteral0.getLength());
      assertFalse(arrayLiteral0.hasChildren());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertNotNull(arrayLiteral0);
      
      Scope scope0 = (Scope)parser0.destructuringAssignmentHelper(3, arrayLiteral0, arrayLiteral0, "Q");
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals((-1), arrayLiteral0.getAbsolutePosition());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals((-1), arrayLiteral0.getPosition());
      assertEquals(1, arrayLiteral0.getLength());
      assertFalse(arrayLiteral0.hasChildren());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertTrue(scope0.hasChildren());
      assertEquals((-1), scope0.getLineno());
      assertEquals(158, scope0.getType());
      assertEquals((-1), scope0.getAbsolutePosition());
      assertEquals((-1), scope0.getPosition());
      assertEquals(1, scope0.getLength());
      assertNull(scope0.getJsDoc());
      assertEquals("158", scope0.toString());
      assertEquals(0, scope0.depth());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertNotNull(scope0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      ConditionalExpression conditionalExpression0 = new ConditionalExpression(2);
      assertEquals(0, conditionalExpression0.depth());
      assertEquals(2, conditionalExpression0.getPosition());
      assertNull(conditionalExpression0.getJsDoc());
      assertEquals((-1), conditionalExpression0.getColonPosition());
      assertFalse(conditionalExpression0.hasChildren());
      assertEquals(102, conditionalExpression0.getType());
      assertEquals(2, conditionalExpression0.getAbsolutePosition());
      assertEquals((-1), conditionalExpression0.getQuestionMarkPosition());
      assertEquals("102", conditionalExpression0.toString());
      assertEquals(1, conditionalExpression0.getLength());
      assertEquals((-1), conditionalExpression0.getLineno());
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertNotNull(conditionalExpression0);
      
      AstRoot astRoot0 = parser0.parse("msg.not.pkg", "3245\tARRAYLIT 3245 1\n", 17);
      assertEquals("136", astRoot0.toString());
      assertEquals(17, astRoot0.getBaseLineno());
      assertEquals("3245\tARRAYLIT 3245 1\n", astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(17, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(11, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(17, astRoot0.getLineno());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertNotNull(astRoot0);
      
      ElementGet elementGet0 = new ElementGet();
      assertEquals((-1), elementGet0.getRb());
      assertEquals((-1), elementGet0.getPosition());
      assertEquals(0, elementGet0.depth());
      assertFalse(elementGet0.hasChildren());
      assertEquals("36", elementGet0.toString());
      assertEquals((-1), elementGet0.getLineno());
      assertEquals(1, elementGet0.getLength());
      assertNull(elementGet0.getJsDoc());
      assertEquals((-1), elementGet0.getLb());
      assertEquals((-1), elementGet0.getAbsolutePosition());
      assertEquals(36, elementGet0.getType());
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertNotNull(elementGet0);
      
      Name name0 = new Name();
      assertEquals(1, name0.getLength());
      assertEquals((-1), name0.getLineno());
      assertFalse(name0.hasChildren());
      assertEquals(39, name0.getType());
      assertEquals(0, name0.depth());
      assertNull(name0.getString());
      assertEquals((-1), name0.getAbsolutePosition());
      assertEquals((-1), name0.getPosition());
      assertEquals("39", name0.toString());
      assertNull(name0.getIdentifier());
      assertFalse(name0.isLocalName());
      assertNull(name0.getJsDoc());
      assertEquals(0, name0.length());
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertNotNull(name0);
      
      PropertyGet propertyGet0 = new PropertyGet(5, 22, conditionalExpression0, name0);
      assertEquals(1, conditionalExpression0.depth());
      assertNull(conditionalExpression0.getJsDoc());
      assertEquals((-1), conditionalExpression0.getColonPosition());
      assertFalse(conditionalExpression0.hasChildren());
      assertEquals(102, conditionalExpression0.getType());
      assertEquals(2, conditionalExpression0.getAbsolutePosition());
      assertEquals((-1), conditionalExpression0.getQuestionMarkPosition());
      assertEquals("102", conditionalExpression0.toString());
      assertEquals(1, conditionalExpression0.getLength());
      assertEquals((-1), conditionalExpression0.getLineno());
      assertEquals((-3), conditionalExpression0.getPosition());
      assertEquals(1, name0.getLength());
      assertEquals((-1), name0.getLineno());
      assertEquals((-6), name0.getPosition());
      assertEquals(1, name0.depth());
      assertFalse(name0.hasChildren());
      assertEquals(39, name0.getType());
      assertNull(name0.getString());
      assertEquals((-1), name0.getAbsolutePosition());
      assertEquals("39", name0.toString());
      assertNull(name0.getIdentifier());
      assertFalse(name0.isLocalName());
      assertNull(name0.getJsDoc());
      assertEquals(0, name0.length());
      assertEquals("33", propertyGet0.toString());
      assertEquals(5, propertyGet0.getPosition());
      assertFalse(propertyGet0.hasChildren());
      assertEquals(22, propertyGet0.getLength());
      assertEquals(33, propertyGet0.getType());
      assertEquals(33, propertyGet0.getOperator());
      assertEquals(0, propertyGet0.depth());
      assertEquals(5, propertyGet0.getAbsolutePosition());
      assertEquals((-1), propertyGet0.getOperatorPosition());
      assertNull(propertyGet0.getJsDoc());
      assertEquals((-1), propertyGet0.getLineno());
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertNotNull(propertyGet0);
      
      // Undeclared exception!
      try { 
        parser0.destructuringAssignmentHelper(3838, elementGet0, propertyGet0, "n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("/", "XHx8g^", 65536);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertTrue(astRoot0.hasChildren());
      assertEquals("XHx8g^", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getPosition());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      compilerEnvirons0.setIdeMode(false);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      
      // Undeclared exception!
      try { 
        parser0.parse("do", "do", 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("78<++fe$[GNn,|PTntP", "78<++fe$[GNn,|PTntP", 65536);
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(19, astRoot0.getLength());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals("78<++fe$[GNn,|PTntP", astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      parser0.nestingOfFunction = 65536;
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      
      // Undeclared exception!
      try { 
        parser0.setIsGenerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      parser0.nestingOfFunction = 65536;
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(65536);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      compilerEnvirons0.setActivationNames(linkedHashSet0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      // Undeclared exception!
      try { 
        parser0.parse("eq2Hq", "eq2Hq", (-527));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("XkTHNaj0S73I3Tjk&{", "XkTHNaj0S73I3Tjk&{", 65536);
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals("XkTHNaj0S73I3Tjk&{", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(18, astRoot0.getLength());
      assertEquals(65536, astRoot0.getLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parse("~BY<{gN=Qf 9(Up%", "~BY<{gN=Qf 9(Up%", 65536);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing : after property id (~BY<{gN=Qf 9(Up%#65536)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("=:!;,[]z", "=:!;,[]z", 65536);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(8, astRoot0.getLength());
      assertEquals("=:!;,[]z", astRoot0.getSourceName());
      assertTrue(astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parse(";FODkYaR8[[,nP", ";FODkYaR8[[,nP", 24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ] after element list (;FODkYaR8[[,nP#24)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parse("[q0A,#", "msg.eval.nonstring.strict", 183);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal character (msg.eval.nonstring.strict#183)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("/=?9*", "/=?9*", 16);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(16, astRoot0.getBaseLineno());
      assertEquals("/=?9*", astRoot0.getSourceName());
      assertEquals(16, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(3, astRoot0.getLength());
      assertEquals(16, astRoot0.getLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("arg cannot be null", "arg cannot be null", 65536);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(17, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("arg cannot be null", astRoot0.getSourceName());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("@*7x/2Y/gsLguN@UN", "<>(Vwu)sjw", 65536);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertTrue(astRoot0.hasChildren());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals("<>(Vwu)sjw", astRoot0.getSourceName());
      assertEquals(17, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("msg.no.paren.for.ctrl", "msg.no.paren.for.ctrl", 65536);
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("msg.no.paren.for.ctrl", astRoot0.getSourceName());
      assertEquals(21, astRoot0.getLength());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("msg.bad.throw.eol", "throw", 18);
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals("throw", astRoot0.getSourceName());
      assertEquals(18, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(18, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(18, astRoot0.getEndLineno());
      assertEquals(17, astRoot0.getLength());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse(")?FJ.*", ")?FJ.*", 65536);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(")?FJ.*", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(6, astRoot0.getLength());
      assertEquals(0, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      compilerEnvirons0.setXmlAvailable(false);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      
      AstRoot astRoot0 = parser0.parse("msg.in.not.object", "msg.in.not.object", 65536);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals("msg.in.not.object", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(17, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parse("G:J[Nbe]&'1,>!82o", "msg.in.not.object", (-1478));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1478
         //
         verifyException("com.google.javascript.rhino.head.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("+9@n.(J!u/vnO#I26 ", "+9@n.(J!u/vnO#I26 ", 0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals("+9@n.(J!u/vnO#I26 ", astRoot0.getSourceName());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(13, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parse("(new BooleanGfalse))", "(new BooleanGfalse))", 65536);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement ((new BooleanGfalse))#65536)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("(new Boolean(false))", "(new Boolean(false))", 65536);
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(136, astRoot0.getType());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals("(new Boolean(false))", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(20, astRoot0.getLength());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(65536, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertTrue(astRoot0.hasChildren());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("f(f,", "f(f,", 2475);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(2475, astRoot0.getEndLineno());
      assertEquals(2475, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getPosition());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals("f(f,", astRoot0.getSourceName());
      assertEquals(2475, astRoot0.getLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertTrue(astRoot0.hasChildren());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(4, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("r9%<{MVxH.];", "r9%<{MVxH.];", 2);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(2, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(12, astRoot0.getLength());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals("r9%<{MVxH.];", astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(2, astRoot0.getEndLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(2, astRoot0.getLineno());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      compilerEnvirons0.setXmlAvailable(false);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      AstRoot astRoot0 = parser0.parse("r9%<{MVxH.];", "r9%<{MVxH.];", 297);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(297, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(12, astRoot0.getLength());
      assertEquals(297, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(297, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("r9%<{MVxH.];", astRoot0.getSourceName());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parse("void", (String) null, 65536);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parse("?62 [-bkXVSe=W9!m$v", "?62 [-bkXVSe=W9!m$v", (-1535));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("p?:(>q9}!+MX", "p?:(>q9}!+MX", 65536);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals("p?:(>q9}!+MX", astRoot0.getSourceName());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(12, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("Q[L8J*w", "Q[L8J*w", 65536);
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("Q[L8J*w", astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(7, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertFalse(astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertNotNull(astRoot0);
      
      Name name0 = new Name(16);
      assertNull(name0.getString());
      assertNull(name0.getIdentifier());
      assertEquals(1, name0.getLength());
      assertEquals((-1), name0.getLineno());
      assertEquals(39, name0.getType());
      assertEquals(16, name0.getPosition());
      assertFalse(name0.hasChildren());
      assertEquals(16, name0.getAbsolutePosition());
      assertFalse(name0.isLocalName());
      assertEquals("39", name0.toString());
      assertEquals(0, name0.depth());
      assertNull(name0.getJsDoc());
      assertEquals(0, name0.length());
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertNotNull(name0);
      
      PropertyGet propertyGet0 = new PropertyGet(25, 25, astRoot0, name0);
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("Q[L8J*w", astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals((-25), astRoot0.getPosition());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(7, astRoot0.getLength());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.depth());
      assertEquals(65536, astRoot0.getLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(name0.getString());
      assertNull(name0.getIdentifier());
      assertEquals(1, name0.getLength());
      assertEquals((-1), name0.getLineno());
      assertEquals(39, name0.getType());
      assertEquals((-9), name0.getPosition());
      assertFalse(name0.hasChildren());
      assertEquals(16, name0.getAbsolutePosition());
      assertFalse(name0.isLocalName());
      assertEquals("39", name0.toString());
      assertEquals(1, name0.depth());
      assertNull(name0.getJsDoc());
      assertEquals(0, name0.length());
      assertEquals(0, propertyGet0.depth());
      assertEquals((-1), propertyGet0.getOperatorPosition());
      assertNull(propertyGet0.getJsDoc());
      assertEquals(25, propertyGet0.getLength());
      assertFalse(propertyGet0.hasChildren());
      assertEquals(25, propertyGet0.getPosition());
      assertEquals("33", propertyGet0.toString());
      assertEquals((-1), propertyGet0.getLineno());
      assertEquals(25, propertyGet0.getAbsolutePosition());
      assertEquals(33, propertyGet0.getOperator());
      assertEquals(33, propertyGet0.getType());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertNotNull(propertyGet0);
      
      Scope scope0 = (Scope)parser0.destructuringAssignmentHelper(25, propertyGet0, astRoot0, "&a;GwC;l?r`[L'C@5kY");
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("Q[L8J*w", astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals((-25), astRoot0.getPosition());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(7, astRoot0.getLength());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.depth());
      assertEquals(65536, astRoot0.getLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(name0.getString());
      assertNull(name0.getIdentifier());
      assertEquals(1, name0.getLength());
      assertEquals((-1), name0.getLineno());
      assertEquals("41", name0.toString());
      assertEquals((-9), name0.getPosition());
      assertEquals(41, name0.getType());
      assertFalse(name0.hasChildren());
      assertEquals(16, name0.getAbsolutePosition());
      assertFalse(name0.isLocalName());
      assertEquals(1, name0.depth());
      assertNull(name0.getJsDoc());
      assertEquals(0, name0.length());
      assertEquals(0, propertyGet0.depth());
      assertEquals((-1), propertyGet0.getOperatorPosition());
      assertNull(propertyGet0.getJsDoc());
      assertEquals(25, propertyGet0.getLength());
      assertFalse(propertyGet0.hasChildren());
      assertEquals(25, propertyGet0.getPosition());
      assertEquals("33", propertyGet0.toString());
      assertEquals((-1), propertyGet0.getLineno());
      assertEquals(25, propertyGet0.getAbsolutePosition());
      assertEquals(33, propertyGet0.getOperator());
      assertEquals(33, propertyGet0.getType());
      assertNull(scope0.getJsDoc());
      assertEquals((-1), scope0.getPosition());
      assertTrue(scope0.hasChildren());
      assertEquals((-1), scope0.getAbsolutePosition());
      assertEquals(158, scope0.getType());
      assertEquals(1, scope0.getLength());
      assertEquals((-1), scope0.getLineno());
      assertEquals(0, scope0.depth());
      assertEquals("158", scope0.toString());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertNotNull(scope0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertNotNull(compilerEnvirons0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Parser parser0 = new Parser(compilerEnvirons0, errorCollector0);
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parse("d<Yt<<rk7)F2vx", "Wz", 157);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("Bad tree in codegen", "Bad tree in codegen", 0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals("Bad tree in codegen", astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals(19, astRoot0.getLength());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      compilerEnvirons0.setLanguageVersion(120);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(120, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      
      AstRoot astRoot0 = parser0.parse("%aKzI1Ts Ti!=m", "%aKzI1Ts Ti!=m", 120);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(120, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(14, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertFalse(astRoot0.isInStrictMode());
      assertTrue(astRoot0.hasChildren());
      assertEquals(120, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(120, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(120, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals("%aKzI1Ts Ti!=m", astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("%aKzI1Ts Ti!=m", "%aKzI1Ts Ti!=m", 120);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(120, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(14, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(120, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals("%aKzI1Ts Ti!=m", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(120, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("|8Vj-sTp9?zUM==", "x4v!hF&+B^$", 18);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(15, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(18, astRoot0.getEndLineno());
      assertEquals("x4v!hF&+B^$", astRoot0.getSourceName());
      assertTrue(astRoot0.hasChildren());
      assertEquals(18, astRoot0.getLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(18, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse(">eG>=*&&V;E{QYT^^<", ">eG>=*&&V;E{QYT^^<", 65536);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(">eG>=*&&V;E{QYT^^<", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(18, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("L||DKR", "L||DKR", 31);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(31, astRoot0.getLineno());
      assertEquals(6, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(31, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals("L||DKR", astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(31, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("oB0FE[h0gC?L4W:Jv", "", 84);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals(84, astRoot0.getEndLineno());
      assertEquals(17, astRoot0.getLength());
      assertEquals("", astRoot0.getSourceName());
      assertEquals(84, astRoot0.getLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(84, astRoot0.getBaseLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("L->O=R>kS2)^h", "L->O=R>kS2)^h", 65536);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals("L->O=R>kS2)^h", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(13, astRoot0.getLength());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parse("78<++f,e$[GNn,|PTntP", "78<++f,e$[GNn,|PTntP", 65536);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (78<++f,e$[GNn,|PTntP#65536)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertNotNull(compilerEnvirons0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Parser parser0 = new Parser(compilerEnvirons0, errorCollector0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("fY_?x[V%*|k+{}", "fY_?x[V%*|k+{}", 45);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(45, astRoot0.getLineno());
      assertEquals(14, astRoot0.getLength());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(45, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("fY_?x[V%*|k+{}", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(45, astRoot0.getEndLineno());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertNotNull(astRoot0);
      
      parser0.defineSymbol(122, "fY_?x[V%*|k+{}", true);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.defineSymbol(1996, "fY_?x[V%*|k+{}", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION: ts.cursor=14, ts.tokenBeg=13, currentToken=0
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertNotNull(compilerEnvirons0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Parser parser0 = new Parser(compilerEnvirons0, errorCollector0);
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("fY_?x[V%*|k+{}", "fY_?x[V%*|k+{}", 45);
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals("fY_?x[V%*|k+{}", astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(45, astRoot0.getEndLineno());
      assertEquals(45, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(14, astRoot0.getLength());
      assertEquals(136, astRoot0.getType());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(45, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.RIGHT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertNotNull(astRoot0);
      
      parser0.defineSymbol(122, "fY_?x[V%*|k+{}", true);
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      Scope scope0 = (Scope)parser0.destructuringAssignmentHelper(2, astRoot0, astRoot0, "fY_?x[V%*|k+{}");
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals("fY_?x[V%*|k+{}", astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(45, astRoot0.getEndLineno());
      assertEquals(45, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(14, astRoot0.getLength());
      assertEquals(136, astRoot0.getType());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(45, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals("158", scope0.toString());
      assertNull(scope0.getJsDoc());
      assertEquals((-1), scope0.getPosition());
      assertEquals(158, scope0.getType());
      assertTrue(scope0.hasChildren());
      assertEquals((-1), scope0.getAbsolutePosition());
      assertEquals(1, scope0.getLength());
      assertEquals(45, scope0.getLineno());
      assertEquals(0, scope0.depth());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.RIGHT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertNotNull(scope0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.defineSymbol(61, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      parser0.defineSymbol((-660), (String) null, false);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(65536, Parser.ARGC_LIMIT);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parse("t9:6pyCK>EL[^fMxL\"_", "msg.too.many.function.args", 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement (msg.too.many.function.args#1)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      parser0.nestingOfFunction = 103;
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      
      StringReader stringReader0 = new StringReader("yield");
      assertNotNull(stringReader0);
      
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "throw", 4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.head.ast.AstRoot cannot be cast to com.google.javascript.rhino.head.ast.FunctionNode
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("with (", "with (", 88);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(88, astRoot0.getLineno());
      assertEquals("with (", astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(6, astRoot0.getLength());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(88, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(88, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("try", "t", 106);
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(106, astRoot0.getLineno());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(106, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(106, astRoot0.getEndLineno());
      assertEquals("t", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(3, astRoot0.getLength());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("switch", "switch", 1);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getPosition());
      assertTrue(astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("switch", astRoot0.getSourceName());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("let", "let", 0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getLineno());
      assertEquals(0, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("let", astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getBaseLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(3, astRoot0.getLength());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("debugger;\n", "debugger;\n", 17);
      assertEquals(17, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(17, astRoot0.getLineno());
      assertEquals("debugger;\n", astRoot0.getSourceName());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(17, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(9, astRoot0.getLength());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("const", "const", 65536);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(5, astRoot0.getLength());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals("const", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("let (", "let (", 6);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(6, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(6, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(6, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals("let (", astRoot0.getSourceName());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(5, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertTrue(astRoot0.hasChildren());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("factory.makeContext() returned Context instance already associated with some thread", ">eG>=*&&V;E{QYT^^<", 65536);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(">eG>=*&&V;E{QYT^^<", astRoot0.getSourceName());
      assertEquals(83, astRoot0.getLength());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertNotNull(astRoot0);
      
      // Undeclared exception!
      try { 
        parser0.simpleAssignment(astRoot0, astRoot0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION: ts.cursor=83, ts.tokenBeg=82, currentToken=0
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("var", ">", 168);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(168, astRoot0.getBaseLineno());
      assertEquals(168, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(168, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(">", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(3, astRoot0.getLength());
      assertTrue(astRoot0.hasChildren());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("continue", "continue", 1074);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertTrue(astRoot0.hasChildren());
      assertEquals(1074, astRoot0.getLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(1074, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(1074, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals("continue", astRoot0.getSourceName());
      assertEquals(7, astRoot0.getLength());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("break", "break", 25);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals("break", astRoot0.getSourceName());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(25, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(25, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(25, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertTrue(astRoot0.hasChildren());
      assertEquals(4, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("default", "default", 16);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals("default", astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(16, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(16, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(7, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(16, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      StringReader stringReader0 = new StringReader("if");
      assertNotNull(stringReader0);
      
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "if", 65536);
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("if", astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(2, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("yield", "msg.parm.redecl", 65536);
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(65536, astRoot0.getEndLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals("msg.parm.redecl", astRoot0.getSourceName());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(4, astRoot0.getLength());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parse("throw", "throw", 65536);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file (throw#65536)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      StringReader stringReader0 = new StringReader("return");
      assertNotNull(stringReader0);
      
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "y_}=}M\"S5=PGnp", 26);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(26, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals("y_}=}M\"S5=PGnp", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(5, astRoot0.getLength());
      assertEquals(26, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(26, astRoot0.getLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("HM:W{<5", "HM:W{<5", 65536);
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(65536, astRoot0.getEndLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("HM:W{<5", astRoot0.getSourceName());
      assertTrue(astRoot0.hasChildren());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(8, astRoot0.getLength());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertNotNull(compilerEnvirons0);
      
      compilerEnvirons0.setRecoverFromErrors(false);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("() {\n\t[native code]\n}\n", "() {\n\t[native code]\n}\n", 65536);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(20, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals("() {\n\t[native code]\n}\n", astRoot0.getSourceName());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getPosition());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65538, astRoot0.getEndLineno());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse(";(xOg`I<U#_<%OPsk", "(new Date(", 65536);
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals("(new Date(", astRoot0.getSourceName());
      assertTrue(astRoot0.hasChildren());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(6, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(65536, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parse(" while (", " while (", 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file ( while (#34)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("{Ie_+[++.-", "-td\"H\"0='lg", 116);
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, astRoot0.getParamCount());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals("-td\"H\"0='lg", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(10, astRoot0.getLength());
      assertEquals(116, astRoot0.getBaseLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(116, astRoot0.getEndLineno());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(116, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      StringReader stringReader0 = new StringReader("delete");
      assertNotNull(stringReader0);
      
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "delete", 26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file (delete#26)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("N&~leq2nq.2>>.,#", "Q[L8J*w", 65536);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(16, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getPosition());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals("Q[L8J*w", astRoot0.getSourceName());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertNotNull(astRoot0);
      
      // Undeclared exception!
      try { 
        parser0.parse((Reader) null, "N&~leq2nq.2>>.,#", 22);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // parser reused
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("q<=:!;K,]z", "q<=:!;K,]z", 65536);
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(10, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals("q<=:!;K,]z", astRoot0.getSourceName());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertNotNull(astRoot0);
      
      // Undeclared exception!
      try { 
        parser0.parse("q<=:!;K,]z", "q<=:!;K,]z", 8);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // parser reused
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      Parser parser1 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertFalse(parser1.equals((Object)parser0));
      assertNotNull(parser1);
      
      AstRoot astRoot0 = parser1.parse("let", "msg.in.not.object", 65536);
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(3, astRoot0.getLength());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals("msg.in.not.object", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertFalse(parser1.equals((Object)parser0));
      assertNotSame(parser1, parser0);
      assertNotNull(astRoot0);
      
      parser1.pushScope(astRoot0);
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(3, astRoot0.getLength());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals("msg.in.not.object", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertFalse(parser1.equals((Object)parser0));
      assertNotSame(parser1, parser0);
      
      // Undeclared exception!
      try { 
        parser0.pushScope(astRoot0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("msg.no.curly.let", "msg.setter.parms", 4);
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals("msg.setter.parms", astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(4, astRoot0.getEndLineno());
      assertTrue(astRoot0.hasChildren());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(4, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(16, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(4, astRoot0.getLineno());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertNotNull(astRoot0);
      
      parser0.pushScope(astRoot0);
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals("msg.setter.parms", astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(4, astRoot0.getEndLineno());
      assertTrue(astRoot0.hasChildren());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(4, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(16, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(4, astRoot0.getLineno());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      
      parser0.pushScope(astRoot0);
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals("msg.setter.parms", astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(4, astRoot0.getEndLineno());
      assertTrue(astRoot0.hasChildren());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(4, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(16, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(4, astRoot0.getLineno());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      parser0.nestingOfFunction = 65536;
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      AstRoot astRoot0 = parser0.parse("6i) girZkuNr:a:m wp", "6i) girZkuNr:a:m wp", 170);
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals("6i) girZkuNr:a:m wp", astRoot0.getSourceName());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(170, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(170, astRoot0.getBaseLineno());
      assertEquals(19, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(170, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      compilerEnvirons0.setXmlAvailable(false);
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      
      AstRoot astRoot0 = parser0.parse("@0(]`k*>?LRY", "@0(]`k*>?LRY", 9);
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals("@0(]`k*>?LRY", astRoot0.getSourceName());
      assertEquals(9, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(9, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(9, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertTrue(astRoot0.hasChildren());
      assertEquals(5, astRoot0.getLength());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("^@[Woz).K]ZD^xIv?4", "^@[Woz).K]ZD^xIv?4", 5);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertTrue(astRoot0.hasChildren());
      assertEquals(18, astRoot0.getLength());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(5, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals("^@[Woz).K]ZD^xIv?4", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(5, astRoot0.getBaseLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(5, astRoot0.getEndLineno());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("() {\n\t[native code]\n}\n", "() {\n\t[native code]\n}\n", 65536);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(65536, astRoot0.getLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65538, astRoot0.getEndLineno());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(21, astRoot0.getLength());
      assertEquals("() {\n\t[native code]\n}\n", astRoot0.getSourceName());
      assertTrue(astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertNotNull(compilerEnvirons0);
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse(".,PA+;//,LvWc1/?1h|", "msg.parm.redecl", 65536);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(65536, astRoot0.getEndLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(18, astRoot0.getLength());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals("msg.parm.redecl", astRoot0.getSourceName());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertNotNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0, errorCollector0);
      // Undeclared exception!
      try { 
        parser0.parse("(Lorg/mozilla/javascript/Context;)Lorg/mozilla/javascript/RegExpProxy;", "(Lorg/mozilla/javascript/Context;)Lorg/mozilla/javascript/RegExpProxy;", (-1324));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.reportError("toGMTString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property toGMTString
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.reportError("msg.too.many.constructor.args", "Z4EiNJ", 149, 149);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Too many constructor arguments
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.parse("for", "for", 65536);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ( after for (for#65536)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.addWarning("msg.var.redecl", "msg.var.redecl", 1374, 119);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      StringReader stringReader0 = new StringReader("g+8}?}q");
      parser0.parse((Reader) stringReader0, "g+8}?}q", 24);
      // Undeclared exception!
      try { 
        parser0.addWarning("g+8}?}q", "g+8}?}q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property g+8}?}q
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.addWarning("Ks/avx.W5Da@c", "Ks/avx.W5Da@c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property Ks/avx.W5Da@c
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      ErrorCollector errorCollector0 = new ErrorCollector();
      Parser parser0 = new Parser(compilerEnvirons0, errorCollector0);
      parser0.parse(".'61|Ew-", "dZa", 1);
      // Undeclared exception!
      try { 
        parser0.addStrictWarning("/=", "dZa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property /=
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      parser0.addStrictWarning("ei6|M", "/=");
      assertEquals(65536, Parser.ARGC_LIMIT);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      AstRoot astRoot0 = parser0.parse("function", "function", 43);
      assertEquals(8, astRoot0.getLength());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(43, astRoot0.getLineno());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.eof();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.addWarning("r", 47, 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property r
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      AstRoot astRoot0 = parser0.parse("'7/g!W.66`7'R[VF_", "'7/g!W.66`7'R[VF_", 65536);
      assertEquals(17, astRoot0.getLength());
      assertEquals(65536, astRoot0.getEndLineno());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Parser parser0 = new Parser();
      String string0 = parser0.lookupMessage("msg.too.many.constructor.args");
      assertEquals("Too many constructor arguments", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.addError("k", "msg.var.redecl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      StringReader stringReader0 = new StringReader("y!let");
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "|w]iH3", 3321);
      assertEquals(5, astRoot0.getLength());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(3321, astRoot0.getEndLineno());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.defineSymbol((-1), "msg.XML.not.available");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Parser parser0 = new Parser();
      EmptyExpression emptyExpression0 = new EmptyExpression();
      // Undeclared exception!
      try { 
        parser0.createDestructuringAssignment(686, emptyExpression0, emptyExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      AstRoot astRoot0 = parser0.parse("bad opcode for field reference", "bad opcode for field reference", 17);
      assertEquals(30, astRoot0.getLength());
      assertEquals(17, astRoot0.getEndLineno());
  }
}

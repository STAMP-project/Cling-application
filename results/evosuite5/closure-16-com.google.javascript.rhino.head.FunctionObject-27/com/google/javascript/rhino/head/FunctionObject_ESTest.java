/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 04:37:14 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.InterpretedFunction;
import com.google.javascript.rhino.head.InterpreterData;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<BaseFunction> class0 = BaseFunction.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getTypeOf");
      NativeError nativeError0 = new NativeError();
      FunctionObject functionObject0 = new FunctionObject("getTypeOf", method0, nativeError0);
      functionObject0.isVarArgsConstructor();
      assertEquals(11, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<BaseFunction> class0 = BaseFunction.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getTypeOf");
      assertNotNull(method0);
      
      NativeError nativeError0 = new NativeError();
      FunctionObject functionObject0 = new FunctionObject("getTypeOf", method0, nativeError0);
      Scriptable scriptable0 = functionObject0.createObject((Context) null, nativeError0);
      assertEquals(11, methodArray0.length);
      assertNotNull(scriptable0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<BaseFunction> class0 = BaseFunction.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getTypeOf");
      assertNotNull(method0);
      
      BaseFunction baseFunction0 = new BaseFunction();
      FunctionObject functionObject0 = new FunctionObject("getTypeOf", method0, baseFunction0);
      assertEquals(0, functionObject0.getLength());
      
      Context context0 = Context.enter();
      functionObject0.call(context0, baseFunction0, baseFunction0, methodArray0);
      assertEquals(11, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      Class<BaseFunction> class0 = BaseFunction.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getTypeOf");
      BaseFunction baseFunction0 = new BaseFunction();
      FunctionObject functionObject0 = new FunctionObject("getTypeOf", method0, baseFunction0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, baseFunction0, functionObject0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test04()  throws Throwable  {
      Class<BaseFunction> class0 = BaseFunction.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getTypeOf");
      NativeError nativeError0 = new NativeError();
      FunctionObject functionObject0 = new FunctionObject("getTypeOf", method0, nativeError0);
      NativeString nativeString0 = new NativeString("getTypeOf");
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeString0, nativeString0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<BaseFunction> class0 = BaseFunction.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getTypeOf");
      NativeError nativeError0 = new NativeError();
      FunctionObject functionObject0 = new FunctionObject("getTypeOf", method0, nativeError0);
      // Undeclared exception!
      try { 
        functionObject0.call((Context) null, nativeError0, nativeError0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"getTypeOf\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      Class<BaseFunction> class0 = BaseFunction.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getTypeOf");
      NativeError nativeError0 = new NativeError();
      FunctionObject functionObject0 = new FunctionObject("getTypeOf", method0, nativeError0);
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, (Scriptable) null, nativeError0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      Class<BaseFunction> class0 = BaseFunction.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "hasInstance");
      BaseFunction baseFunction0 = new BaseFunction();
      FunctionObject functionObject0 = new FunctionObject((String) null, method0, baseFunction0);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, baseFunction0, baseFunction0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) null, (Object) null, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"java.lang.reflect.Method\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "toString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"toString\" occurs multiple times in class \"java.lang.Integer\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Method[] methodArray0 = new Method[1];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "with");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<BaseFunction> class0 = BaseFunction.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getTypeOf");
      assertNotNull(method0);
      
      NativeError nativeError0 = new NativeError();
      FunctionObject functionObject0 = new FunctionObject("getTypeOf", method0, nativeError0);
      functionObject0.getMethodOrConstructor();
      assertEquals(11, methodArray0.length);
      assertEquals(0, functionObject0.getLength());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<BaseFunction> class0 = BaseFunction.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getTypeOf");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject((String) null, method0, nativeCall0);
      String string0 = functionObject0.getFunctionName();
      assertEquals(11, methodArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<BaseFunction> class0 = BaseFunction.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getTypeOf");
      assertNotNull(method0);
      
      NativeError nativeError0 = new NativeError();
      FunctionObject functionObject0 = new FunctionObject("getTypeOf", method0, nativeError0);
      functionObject0.getFunctionName();
      assertEquals(11, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test14()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Class<Boolean> class0 = Boolean.TYPE;
      FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) null, (Class<?>) class0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeError nativeError0 = (NativeError)context0.topCallScope;
      Class<Boolean> class0 = Boolean.TYPE;
      FunctionObject.convertArg(context0, (Scriptable) nativeError0, (Object) context0.generateObserverCount, (Class<?>) class0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test16()  throws Throwable  {
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      FunctionObject.convertArg((Context) null, (Scriptable) interpretedFunction0, (Object) interpretedFunction0.DONTENUM, 2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      // Undeclared exception!
      try { 
        FunctionObject.convertArg((Context) null, (Scriptable) nativeCall0, (Object) nativeCall0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = new Context();
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) scriptableObject0, (Object) scriptableObject0, 170);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeBoolean0, (Object) "getIds", 1);
      assertEquals("getIds", object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Double> class0 = Double.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      Class<BaseFunction> class0 = BaseFunction.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "hasInstance");
      BaseFunction baseFunction0 = new BaseFunction();
      FunctionObject functionObject0 = new FunctionObject("hasInstance", method0, baseFunction0);
      NativeString nativeString0 = new NativeString((CharSequence) null);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeString0, nativeString0, methodArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      Class<Integer> class0 = Integer.TYPE;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeBoolean0, (Object) "language version", (Class<?>) class0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test24()  throws Throwable  {
      Class<BaseFunction> class0 = BaseFunction.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "call");
      NativeError nativeError0 = new NativeError();
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("call", method0, nativeError0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"com.google.javascript.rhino.head.Context\" in method \"call\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<BaseFunction> class0 = BaseFunction.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getTypeOf");
      assertNotNull(method0);
      
      NativeError nativeError0 = new NativeError();
      FunctionObject functionObject0 = new FunctionObject("getTypeOf", method0, nativeError0);
      functionObject0.addAsConstructor(nativeError0, nativeError0);
      assertEquals(0, functionObject0.getArity());
      assertEquals(11, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<BaseFunction> class0 = BaseFunction.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getTypeOf");
      assertNotNull(method0);
      
      NativeError nativeError0 = new NativeError();
      FunctionObject functionObject0 = new FunctionObject("getTypeOf", method0, nativeError0);
      Object object0 = functionObject0.getInstanceIdValue(1);
      assertEquals(0, object0);
      assertEquals(11, methodArray0.length);
  }
}

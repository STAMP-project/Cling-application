/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 08:46:45 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Callable;
import com.google.javascript.rhino.head.ConsString;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.EcmaError;
import com.google.javascript.rhino.head.FieldAndMethods;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.InterpretedFunction;
import com.google.javascript.rhino.head.InterpreterData;
import com.google.javascript.rhino.head.JavaMembers;
import com.google.javascript.rhino.head.MemberBox;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeFunction;
import com.google.javascript.rhino.head.NativeGenerator;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaArray;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaConstructor;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.NativeJavaObject;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.Ref;
import com.google.javascript.rhino.head.RegExpProxy;
import com.google.javascript.rhino.head.ScriptRuntime;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.SpecialRef;
import com.google.javascript.rhino.head.Synchronizer;
import com.google.javascript.rhino.head.TopLevel;
import com.google.javascript.rhino.head.WrappedException;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ScriptRuntime_ESTest extends ScriptRuntime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ScriptRuntime.isGeneratedScript("language version");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ScriptRuntime.isGeneratedScript("(eval)");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ScriptRuntime.makeUrlForGeneratedScript(true, "__parent__", (-1528));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      ScriptRuntime.lastUint32Result(context0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.storeUint32Result(context0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test005()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ScriptRuntime.storeUint32Result(context0, 12);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test006()  throws Throwable  {
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.memberRef((Object) context0, (Object) context0, (Object) context0, context0, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: com.google.javascript.rhino.head.Context@0000000001 is not an xml object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        ScriptRuntime.setRegExpProxy(context0, (RegExpProxy) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Context context0 = new Context();
      RegExpProxy regExpProxy0 = context0.getRegExpProxy();
      ScriptRuntime.setRegExpProxy(context0, regExpProxy0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test009()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      // Undeclared exception!
      try { 
        ScriptRuntime.getElemFunctionAndThis(importerTopLevel0, importerTopLevel0, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find function [object global] in object [object global].
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptRuntime.getValueFunctionAndThis((Object) null, (Context) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: null is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      // Undeclared exception!
      try { 
        ScriptRuntime.undefWriteError(nativeCall0, (Object) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      ScriptRuntime.undefCallError(contextFactory0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptRuntime.getObjectPropNoWarn((Object) null, (String) null, (Context) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot read property \"null\" from null
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test014()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      ScriptRuntime.checkDeprecated(context0, "language version");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Context context0 = Context.enter();
      ScriptRuntime.checkDeprecated(context0, "language version");
  }

  @Test(timeout = 4000)
  @Ignore
  public void test016()  throws Throwable  {
      NativeString nativeString0 = new NativeString("delegee");
      ScriptRuntime.getArrayElements(nativeString0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test017()  throws Throwable  {
      Context context0 = Context.getContext();
      ScriptRuntime.isArrayObject(context0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      ScriptRuntime.isArrayObject(nativeArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Object[] objectArray0 = new Object[1];
      Context context0 = contextFactory0.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.newObjectLiteral(objectArray0, objectArray0, (int[]) null, context0, (Scriptable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test020()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      int[] intArray0 = new int[0];
      Context context0 = Context.getCurrentContext();
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      // Undeclared exception!
      try { 
        ScriptRuntime.newObjectLiteral(objectArray0, objectArray0, intArray0, context0, (Scriptable) scriptableObject0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test021()  throws Throwable  {
      Context context0 = Context.getContext();
      BaseFunction baseFunction0 = new BaseFunction();
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        ScriptRuntime.newArrayLiteral(context0.emptyArgs, intArray0, context0, baseFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      Object[] objectArray0 = new Object[1];
      int[] intArray0 = new int[0];
      Context context0 = Context.enter();
      ScriptRuntime.newArrayLiteral(objectArray0, intArray0, context0, topLevel0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      String[] stringArray0 = ScriptRuntime.getTopPackageNames();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      ScriptRuntime.newArrayLiteral(stringArray0, intArray0, context0, nativeIterator_StopIteration0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      String[] stringArray0 = ScriptRuntime.getTopPackageNames();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      ScriptRuntime.NoSuchMethodShim scriptRuntime_NoSuchMethodShim0 = new ScriptRuntime.NoSuchMethodShim((Callable) null, "error reporter");
      // Undeclared exception!
      try { 
        scriptRuntime_NoSuchMethodShim0.call(context0, (Scriptable) null, nativeIterator_StopIteration0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Context context0 = Context.enter();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      // Undeclared exception!
      try { 
        ScriptRuntime.initFunction(context0, nativeJavaClass0, (NativeFunction) null, 110, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test026()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      InterpreterData interpreterData0 = new InterpreterData((-1779), "6cEr}vNiZ]me4\"K", (String) null, true);
      // Undeclared exception!
      try { 
        InterpretedFunction.createScript(interpreterData0, nativeJavaClass0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.InterpretedFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      InterpreterData interpreterData0 = new InterpreterData(9, "*s-", "error reporter", true);
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript(interpreterData0, (Object) null);
      ScriptRuntime.initFunction(context0, importerTopLevel0, interpretedFunction0, 3, false);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        ScriptRuntime.enterWith((Object) null, context0, nativeCall0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot apply \"with\" to null
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Context context0 = Context.enter();
      ScriptRuntime.enterWith(nativeJavaClass0, context0, nativeJavaClass0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      MockThrowable mockThrowable0 = new MockThrowable();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.newCatchScope(mockThrowable0, nativeIterator_StopIteration0, "language version", context0, nativeIterator_StopIteration0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Context context0 = new Context();
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        ScriptRuntime.newCatchScope(mockThrowable0, (Scriptable) null, "error reporter", context0, (Scriptable) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test032()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Context context0 = Context.getContext();
      ScriptRuntime.findFunctionActivation(context0, baseFunction0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test033()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.enterActivationFunction(context0, nativeIterator_StopIteration0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.head.NativeIterator$StopIteration cannot be cast to com.google.javascript.rhino.head.NativeCall
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test034()  throws Throwable  {
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.initScript((NativeFunction) null, (Scriptable) null, context0, (Scriptable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      ScriptRuntime.addInstructionCount(context0, 4);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      ScriptRuntime.isValidIdentifierName("error reporter");
      ScriptRuntime.addInstructionCount(context0, 100);
      Long long0 = new Long((-839L));
      int[] intArray0 = new int[0];
      Scriptable scriptable0 = ScriptRuntime.newObjectLiteral(context0.emptyArgs, context0.emptyArgs, intArray0, context0, (Scriptable) importerTopLevel0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Long long1 = new Long(8);
      Context.createInterpreter();
      Double double0 = new Double(1550.6367);
      Double.max(0, 120);
      ScriptRuntime.uneval(context0, scriptable0, double0);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("language version", classLoader0);
      ScriptRuntime.cmp_LT(scriptable0, nativeJavaPackage0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      ScriptRuntime.checkDynamicScope(nativeError0, (Scriptable) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ScriptRuntime.checkDynamicScope(importerTopLevel0, importerTopLevel0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test039()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      // Undeclared exception!
      try { 
        ScriptRuntime.doTopCall(nativeJavaClass0, context0, nativeJavaClass0, importerTopLevel0, context0.emptyArgs);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test040()  throws Throwable  {
      Context context0 = Context.getContext();
      BaseFunction baseFunction0 = new BaseFunction();
      // Undeclared exception!
      try { 
        ScriptRuntime.doTopCall(baseFunction0, context0, baseFunction0, baseFunction0, context0.emptyArgs);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = Context.enter((Context) null, contextFactory0);
      // Undeclared exception!
      try { 
        ScriptRuntime.doTopCall((Callable) null, (Context) null, (Scriptable) null, (Scriptable) null, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Context context0 = Context.enter();
      boolean boolean0 = ScriptRuntime.hasTopCall(context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.cmp_LE("3", "3");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      boolean boolean0 = ScriptRuntime.cmp_LE(nativeJavaClass0, nativeJavaClass0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Long long0 = new Long((-1210330751515841307L));
      boolean boolean0 = ScriptRuntime.cmp_LE(long0, context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Short short0 = new Short((short)57);
      boolean boolean0 = ScriptRuntime.cmp_LE(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.cmp_LT((Object) null, "13");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.cmp_LT("bP#", "bP#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test049()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      boolean boolean0 = ScriptRuntime.cmp_LT("umbe7r", contextFactory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Short short0 = new Short((short)53);
      boolean boolean0 = ScriptRuntime.cmp_LT(short0, "a5/-UnLeG r342GnN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Long long0 = new Long(2147483647L);
      boolean boolean0 = ScriptRuntime.cmp_LT(long0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      // Undeclared exception!
      try { 
        ScriptRuntime.in(context0, "error reporter", context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Can't use 'in' on a non-object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Delegator delegator0 = new Delegator();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        ScriptRuntime.in(delegator0, nativeIterator_StopIteration0, context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      NativeWith nativeWith0 = new NativeWith(nativeJavaClass0, nativeJavaClass0);
      boolean boolean0 = ScriptRuntime.jsDelegatesTo(nativeWith0, nativeWith0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test055()  throws Throwable  {
      Context context0 = new Context();
      NativeCall nativeCall0 = new NativeCall();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      NativeObject nativeObject0 = (NativeObject)importerTopLevel0.getPrototype();
      NativeWith nativeWith0 = new NativeWith(nativeCall0, nativeObject0);
      boolean boolean0 = ScriptRuntime.jsDelegatesTo(nativeWith0, nativeObject0);
      assertTrue(boolean0);
      assertTrue(nativeObject0.isSealed());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      NativeObject nativeObject0 = new NativeObject();
      boolean boolean0 = ScriptRuntime.instanceOf(contextFactory0, nativeObject0, context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = Context.getCurrentContext();
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      // Undeclared exception!
      try { 
        ScriptRuntime.instanceOf(contextFactory0, class0, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Can't use 'instanceof' on a non-object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Context context0 = Context.enter();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      NativeObject nativeObject0 = new NativeObject();
      boolean boolean0 = ScriptRuntime.instanceOf(nativeObject0, nativeJavaTopPackage0, context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Context context0 = new Context();
      BoundFunction boundFunction0 = new BoundFunction(context0, baseFunction0, nativeJavaClass0, nativeJavaClass0, context0.emptyArgs);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      boolean boolean0 = ScriptRuntime.shallowEq(boundFunction0, nativeBoolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      boolean boolean0 = ScriptRuntime.shallowEq(true, context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.shallowEq("finally ", "language version");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test062()  throws Throwable  {
      Context context0 = Context.getContext();
      boolean boolean0 = ScriptRuntime.shallowEq("ZyOU*", context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test063()  throws Throwable  {
      Context context0 = Context.getContext();
      Float float0 = new Float((double) 130);
      boolean boolean0 = ScriptRuntime.shallowEq(float0, context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.shallowEq(4, 110);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.shallowEq((Object) null, "03");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.shallowEq("bP#", "bP#");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Context context0 = Context.getCurrentContext();
      boolean boolean0 = ScriptRuntime.shallowEq(nativeJavaClass0, context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      NativeString nativeString0 = new NativeString("umbe7r");
      // Undeclared exception!
      try { 
        ScriptRuntime.eq(nativeString0, "umbe7r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Context context0 = Context.enter();
      boolean boolean0 = ScriptRuntime.eq("OpenJDK 6m-Bit Server VM", context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("k x@O\"`TC");
      boolean boolean1 = ScriptRuntime.eq("k x@O\"`TC", boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = new Integer(8237);
      boolean boolean0 = ScriptRuntime.eq("OpenJDK 6m-Bit Server VM", integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = ScriptRuntime.eq(charBuffer0, "!tF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.eq("OpenJDK 6m-Bit Server VM", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test074()  throws Throwable  {
      Context context0 = new Context();
      boolean boolean0 = ScriptRuntime.eqNumber(13, context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      boolean boolean1 = ScriptRuntime.eqNumber(3624.0, boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test076()  throws Throwable  {
      Context context0 = Context.getContext();
      boolean boolean0 = ScriptRuntime.eqNumber(180, context0.generateObserverCount);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = new Float(1935.366F);
      boolean boolean0 = ScriptRuntime.eqNumber(0.0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer(8232);
      boolean boolean0 = ScriptRuntime.eq(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Short short0 = new Short((short) (-4816));
      boolean boolean0 = ScriptRuntime.eq(short0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("msg.set.prop.no.setter");
      boolean boolean1 = ScriptRuntime.isPrimitive(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isPrimitive("-N QoskEV0zB(:/+y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-65));
      boolean boolean0 = ScriptRuntime.isPrimitive(byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      boolean boolean0 = ScriptRuntime.isPrimitive(contextFactory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isPrimitive((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test085()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeError nativeError0 = new NativeError();
      boolean boolean0 = ScriptRuntime.eq(nativeError0, context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeWith nativeWith0 = new NativeWith(nativeIterator_StopIteration0, nativeIterator_StopIteration0);
      // Undeclared exception!
      try { 
        ScriptRuntime.eq(nativeWith0, "0f~V3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("%S!4{<Mfm:@6Mb,");
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      // Undeclared exception!
      try { 
        ScriptRuntime.eq(nativeContinuation0, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test088()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      boolean boolean0 = ScriptRuntime.eq(importerTopLevel0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      NativeJavaClass nativeJavaClass1 = new NativeJavaClass();
      boolean boolean0 = ScriptRuntime.eq(nativeJavaClass0, nativeJavaClass1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      boolean boolean0 = ScriptRuntime.eq(nativeJavaObject0, importerTopLevel0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      boolean boolean0 = ScriptRuntime.eq(baseFunction0, nativeJavaTopPackage0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Boolean boolean0 = ScriptRuntime.wrapBoolean(true);
      // Undeclared exception!
      try { 
        ScriptRuntime.eq(boolean0, nativeJavaClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeJavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("Fi/`IPit$xA5~}:DY<v");
      boolean boolean1 = ScriptRuntime.eq(boolean0, "Fi/`IPit$xA5~}:DY<v");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      boolean boolean1 = ScriptRuntime.eq("k x@O\"`TC", boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      boolean boolean0 = ScriptRuntime.eq(nativeJavaClass0, nativeJavaClass0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double double0 = ScriptRuntime.NaNobj;
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      // Undeclared exception!
      try { 
        ScriptRuntime.eq(double0, nativeBoolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NativeJavaConstructor nativeJavaConstructor0 = new NativeJavaConstructor((MemberBox) null);
      boolean boolean0 = ScriptRuntime.eq((Object) null, nativeJavaConstructor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.eq((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      boolean boolean0 = ScriptRuntime.eq((Object) null, nativeJavaClass0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test100()  throws Throwable  {
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("error reporter");
      Delegator delegator0 = new Delegator(nativeJavaPackage0);
      // Undeclared exception!
      try { 
        ScriptRuntime.eqNumber(0, delegator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Object's getDefaultValue() method returned an object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<NativeContinuation> class0 = NativeContinuation.class;
      Object object0 = ScriptRuntime.toPrimitive((Object) " mu][%h ^", (Class<?>) class0);
      assertEquals(" mu][%h ^", object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test102()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Context context0 = Context.getContext();
      Ref ref0 = SpecialRef.createSpecial(context0, baseFunction0, "__proto__");
      ScriptRuntime.refIncrDecr(ref0, context0, 5);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test103()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      NativeArray nativeArray0 = new NativeArray((-2218L));
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      ScriptRuntime.elemIncrDecr(nativeArray0, nativeJavaTopPackage0, context0, 12);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Context context0 = Context.enter();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      NativeJavaPackage nativeJavaPackage0 = nativeJavaTopPackage0.forcePackage("language version", nativeIterator_StopIteration0);
      Object object0 = ScriptRuntime.nameIncrDecr((Scriptable) nativeJavaPackage0, "interface", context0, 2);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test105()  throws Throwable  {
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.propIncrDecr((Object) null, "error reporter", context0, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot read property \"java.lang.String@0000000001\" from null
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test106()  throws Throwable  {
      BaseFunction baseFunction0 = ScriptRuntime.typeErrorThrower();
      Context context0 = Context.getContext();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(baseFunction0, true);
      // Undeclared exception!
      try { 
        ScriptRuntime.nameIncrDecr((Scriptable) nativeGenerator0, "language version", context0, 130);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ReferenceError: \"language version\" is not defined.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Context context0 = new Context();
      Synchronizer synchronizer0 = new Synchronizer((Scriptable) null);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "language version");
      // Undeclared exception!
      try { 
        ScriptRuntime.add((Object) synchronizer0, (Object) charBuffer0, context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Context context0 = Context.enter();
      ConsString consString0 = (ConsString)ScriptRuntime.add((Object) "c|03", (Object) "c|03", context0);
      assertEquals(8, consString0.length());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Delegator delegator0 = new Delegator();
      Context context0 = Context.enter((Context) null);
      // Undeclared exception!
      try { 
        ScriptRuntime.add((Object) delegator0, (Object) delegator0, context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test110()  throws Throwable  {
      Context context0 = Context.getContext();
      Float float0 = new Float((double) 2);
      Object object0 = ScriptRuntime.add((Object) float0, (Object) float0, context0);
      assertEquals(4.0, object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test111()  throws Throwable  {
      Context context0 = new Context();
      Float float0 = new Float((float) 170);
      Object object0 = ScriptRuntime.add((Object) float0, (Object) context0, context0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test112()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      // Undeclared exception!
      try { 
        ScriptRuntime.typeofName(nativeJavaTopPackage0, "language version");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      Short short0 = new Short((short)1368);
      // Undeclared exception!
      try { 
        ScriptRuntime.getValueFunctionAndThis(short0, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.Short@0000000003 is not a function, it is number.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      EcmaError ecmaError0 = (EcmaError)ScriptRuntime.notFunctionError((Object) nativeJavaClass0, (Object) nativeJavaClass0);
      assertEquals(0, ecmaError0.lineNumber());
      assertEquals("TypeError", ecmaError0.getName());
      assertEquals(0, ecmaError0.columnNumber());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test115()  throws Throwable  {
      BaseFunction baseFunction0 = ScriptRuntime.typeErrorThrower();
      Context context0 = Context.getContext();
      Object object0 = ScriptRuntime.getObjectIndex((Scriptable) baseFunction0, 991, context0);
      String string0 = ScriptRuntime.typeof(object0);
      assertEquals("undefined", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      EcmaError ecmaError0 = (EcmaError)ScriptRuntime.notFunctionError((Object) null, (Object) null, "umbe7r");
      assertEquals("TypeError", ecmaError0.getName());
      assertEquals(0, ecmaError0.columnNumber());
      assertEquals(0, ecmaError0.getLineNumber());
      assertEquals("Cannot call property umbe7r in object null. It is not a function, it is \"object\".", ecmaError0.getErrorMessage());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "[object global]";
      // Undeclared exception!
      try { 
        ScriptRuntime.evalSpecial(context0, importerTopLevel0, importerTopLevel0, objectArray0, (String) null, 170);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: missing ; before statement (#170(eval)#1)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "error reporter";
      // Undeclared exception!
      try { 
        ScriptRuntime.evalSpecial(context0, importerTopLevel0, "language version", objectArray0, "language version", 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: missing ; before statement (language version#93(eval)#1)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      Object[] objectArray0 = new Object[13];
      Object object0 = ScriptRuntime.evalSpecial(context0, importerTopLevel0, importerTopLevel0, objectArray0, (String) null, 170);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      Scriptable scriptable0 = context0.initStandardObjects((ScriptableObject) nativeArray0);
      // Undeclared exception!
      try { 
        ScriptRuntime.applyOrCall(true, context0, scriptable0, nativeArray0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: com.google.javascript.rhino.head.NativeArray@0000000001 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      NativeWith nativeWith0 = new NativeWith(nativeJavaClass0, nativeJavaClass0);
      Context context0 = Context.enter((Context) null);
      // Undeclared exception!
      try { 
        ScriptRuntime.applyOrCall(true, (Context) null, nativeWith0, nativeWith0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test122()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeArray nativeArray0 = new NativeArray(18L);
      Object[] objectArray0 = ScriptRuntime.getApplyArguments(context0, nativeArray0);
      assertEquals(18, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.getApplyArguments(context0, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: second argument to Function.prototype.apply must be an array
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Context context0 = new Context();
      Object[] objectArray0 = ScriptRuntime.getApplyArguments(context0, (Object) null);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Context context0 = new Context();
      BaseFunction baseFunction0 = new BaseFunction();
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        ScriptRuntime.applyOrCall(false, context0, baseFunction0, baseFunction0, objectArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test126()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeError nativeError0 = new NativeError();
      // Undeclared exception!
      try { 
        ScriptRuntime.newSpecial(context0, context0, context0.emptyArgs, nativeError0, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type com.google.javascript.rhino.head.Context
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      InterpreterData interpreterData0 = new InterpreterData(9, "*s-", "error reporter", true);
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript(interpreterData0, (Object) null);
      // Undeclared exception!
      try { 
        ScriptRuntime.newSpecial(context0, contextFactory0, context0.emptyArgs, interpretedFunction0, 160);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test128()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      // Undeclared exception!
      try { 
        ScriptRuntime.callSpecial(context0, nativeJavaClass0, nativeJavaClass0, context0.emptyArgs, nativeJavaClass0, nativeJavaClass0, 5, "error reporter", 140);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeString nativeString0 = new NativeString("error reporter");
      Object object0 = ScriptRuntime.callSpecial(context0, baseFunction0, nativeString0, context0.emptyArgs, importerTopLevel0, baseFunction0, 1, "language version", 5);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Context context0 = new Context();
      BaseFunction baseFunction0 = new BaseFunction();
      NativeObject nativeObject0 = (NativeObject)ScriptRuntime.newSpecial(context0, baseFunction0, context0.emptyArgs, baseFunction0, 1);
      assertFalse(nativeObject0.isSealed());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Delegator delegator0 = new Delegator();
      // Undeclared exception!
      try { 
        ScriptRuntime.callRef(delegator0, delegator0, context0.emptyArgs, context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.getValueFunctionAndThis(nativeJavaClass0, context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      NativeArray nativeArray0 = new NativeArray(1450L);
      Context context0 = new Context();
      BoundFunction boundFunction0 = new BoundFunction(context0, nativeArray0, nativeJavaClass0, nativeArray0, context0.emptyArgs);
      BoundFunction boundFunction1 = (BoundFunction)ScriptRuntime.getValueFunctionAndThis(boundFunction0, context0);
      assertFalse(boundFunction1.isSealed());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test134()  throws Throwable  {
      BaseFunction baseFunction0 = ScriptRuntime.typeErrorThrower();
      ScriptRuntime.NoSuchMethodShim scriptRuntime_NoSuchMethodShim0 = new ScriptRuntime.NoSuchMethodShim(baseFunction0, "-N QoskEV0zB(:/+y");
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.getValueFunctionAndThis(scriptRuntime_NoSuchMethodShim0, context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test135()  throws Throwable  {
      Context context0 = Context.getContext();
      ScriptableObject scriptableObject0 = ScriptRuntime.getGlobal(context0);
      // Undeclared exception!
      try { 
        ScriptRuntime.getValueFunctionAndThis(scriptableObject0, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: com.google.javascript.rhino.head.tools.shell.Global@0000000001 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test136()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Context context0 = Context.getContext();
      Byte byte0 = new Byte((byte)41);
      // Undeclared exception!
      try { 
        ScriptRuntime.getElemFunctionAndThis(baseFunction0, byte0, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find function java.lang.Byte@0000000002.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(2778.39);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      Object object0 = ScriptRuntime.enumInit((Object) nativeNumber0, context0, 5);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BaseFunction baseFunction0 = ScriptRuntime.typeErrorThrower();
      Context context0 = Context.enter();
      Object object0 = ScriptRuntime.enumInit((Object) baseFunction0, context0, 3);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.enumInit((Object) "__proto__", context0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BaseFunction baseFunction0 = ScriptRuntime.typeErrorThrower();
      Context context0 = Context.enter();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(baseFunction0, true);
      Object object0 = ScriptRuntime.enumInit((Object) nativeGenerator0, context0, (-2035083366));
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      BaseFunction baseFunction0 = new BaseFunction();
      Synchronizer synchronizer0 = new Synchronizer(baseFunction0);
      Object object0 = ScriptRuntime.enumInit((Object) synchronizer0, context0, true);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Context context0 = new Context();
      NativeObject nativeObject0 = new NativeObject();
      NativeObject nativeObject1 = (NativeObject)ScriptRuntime.setConst(nativeObject0, nativeObject0, context0, "language version");
      assertFalse(nativeObject1.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Context context1 = (Context)ScriptRuntime.strictSetName(importerTopLevel0, context0, context0, importerTopLevel0, "error reporter");
      assertEquals(160, Context.VERSION_1_6);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Long long0 = new Long(13);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.strictSetName((Scriptable) null, long0, context0, (Scriptable) null, "error reporter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ReferenceError: Assignment to undefined \"error reporter\" in strict mode
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test145()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      Context context0 = Context.getContext();
      Scriptable scriptable0 = context0.newObject((Scriptable) topLevel0);
      ScriptRuntime.setName((Scriptable) null, scriptable0, context0, scriptable0, "error reporter");
      assertFalse(topLevel0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      Context context0 = Context.enter();
      ScriptRuntime.setName(topLevel0, topLevel0, context0, topLevel0, "&xWgd(p");
      TopLevel topLevel1 = (TopLevel)ScriptRuntime.bind(context0, topLevel0, "&xWgd(p");
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test147()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Context context0 = Context.getContext();
      Scriptable scriptable0 = ScriptRuntime.bind(context0, nativeError0, "language version");
      assertNull(scriptable0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test148()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Function;
      BaseFunction baseFunction0 = importerTopLevel0.getBuiltinCtor(topLevel_Builtins0);
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(importerTopLevel0, nativeArray0, (-2005), "", 1, baseFunction0);
      String string0 = ScriptRuntime.typeofName(idFunctionObject0, "language version");
      assertEquals("undefined", string0);
      assertFalse(baseFunction0.isSealed());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test149()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      NativeWith nativeWith0 = new NativeWith(baseFunction0, baseFunction0);
      Context context0 = Context.getContext();
      Scriptable scriptable0 = ScriptRuntime.bind(context0, nativeWith0, "error reporter");
      assertNull(scriptable0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      BaseFunction baseFunction0 = new BaseFunction();
      // Undeclared exception!
      try { 
        ScriptRuntime.getNameFunctionAndThis("language version", context0, baseFunction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ReferenceError: \"language version\" is not defined.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test151()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Context context0 = Context.getContext();
      ScriptRuntime.propIncrDecr(nativeError0, "msg.bad%backref", context0, 1);
      Object object0 = ScriptRuntime.name(context0, nativeError0, "msg.bad%backref");
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test152()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.name(context0, nativeError0, "msg.bad%backref");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ReferenceError: \"msg.bad%backref\" is not defined.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      NativeWith nativeWith0 = new NativeWith(baseFunction0, baseFunction0);
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        ScriptRuntime.name(context0, nativeWith0, "error reporter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ReferenceError: \"error reporter\" is not defined.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Context context0 = Context.enter();
      Object object0 = ScriptRuntime.delete((Object) null, (Object) null, context0, true);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.delete((Object) null, (Object) context0, context0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot delete property \"com.google.javascript.rhino.head.Context@0000000002\" of null
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isSpecialProperty("(Lorg/mozilla/javascript/Script;[Ljava/lang/String;)V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isSpecialProperty("__parent__");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isSpecialProperty("__proto__");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Context context0 = new Context();
      NativeString nativeString0 = new NativeString("language version");
      Byte byte0 = new Byte((byte)43);
      boolean boolean0 = ScriptRuntime.hasObjectElem(nativeString0, byte0, context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeString nativeString0 = new NativeString("");
      boolean boolean0 = ScriptRuntime.hasObjectElem(nativeString0, context0, context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test161()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      boolean boolean0 = ScriptRuntime.deleteObjectElem(importerTopLevel0, context0, context0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Long long0 = new Long(5);
      NativeNumber nativeNumber0 = new NativeNumber((-1.0));
      Object object0 = ScriptRuntime.delete((Object) nativeNumber0, (Object) long0, context0, true);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("wrapDouble", classLoader0);
      boolean boolean0 = ScriptRuntime.deleteObjectElem(nativeJavaPackage0, classLoader0, context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.setObjectIndex((Object) null, (double) 10, (Object) contextFactory0, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot set property \"java.lang.String@0000000001\" of null to \"com.google.javascript.rhino.head.ContextFactory@0000000002\"
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeNumber nativeNumber0 = new NativeNumber(8.0);
      Delegator delegator0 = new Delegator(nativeNumber0);
      // Undeclared exception!
      try { 
        ScriptRuntime.setObjectProp((Object) null, "error reporter", (Object) delegator0, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot set property \"java.lang.String@0000000003\" of null to \"com.google.javascript.rhino.head.Delegator@0000000002\"
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Long long0 = new Long(13);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Object object0 = ScriptRuntime.setObjectProp((Object) nativeError0, "", (Object) long0, context0);
      assertEquals(13L, object0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeNumber nativeNumber0 = new NativeNumber((-1049.704052979537));
      // Undeclared exception!
      try { 
        ScriptRuntime.setObjectElem((Object) null, (Object) nativeNumber0, (Object) contextFactory0, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot set property \"com.google.javascript.rhino.head.NativeNumber@0000000002\" of null to \"com.google.javascript.rhino.head.ContextFactory@0000000001\"
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      Object object0 = ScriptRuntime.getObjectIndex((Object) importerTopLevel0, (-1149.647), context0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object object0 = null;
      double double0 = 566.490097692416;
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.getObjectIndex(object0, double0, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot read property \"java.lang.String@0000000010\" from null
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test170()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      Object object0 = ScriptRuntime.getObjectIndex((Object) importerTopLevel0, (double) 0, context0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeNumber nativeNumber0 = new NativeNumber(4);
      Object object0 = ScriptRuntime.getObjectPropNoWarn(nativeNumber0, "lang", context0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Context context0 = new Context();
      BaseFunction baseFunction0 = ScriptRuntime.typeErrorThrower();
      // Undeclared exception!
      try { 
        ScriptRuntime.getObjectProp((Object) null, "}4z", context0, (Scriptable) baseFunction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot read property \"java.lang.String@0000000003\" from null
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Double double0 = new Double((-90.05759769527958));
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      Object object0 = ScriptRuntime.getObjectProp((Object) double0, "language version", context0, (Scriptable) importerTopLevel0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptRuntime.getObjectProp((Object) null, "toPrecision", (Context) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot read property \"java.lang.String@0000000001\" from null
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Context context0 = Context.enter();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Object object0 = ScriptRuntime.getObjectProp((Object) nativeIterator_StopIteration0, ";9d]*&V?-{'[N", context0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Context context0 = new Context();
      BaseFunction baseFunction0 = ScriptRuntime.typeErrorThrower();
      Object object0 = ScriptRuntime.getObjectElem((Scriptable) baseFunction0, (Object) null, context0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test177()  throws Throwable  {
      Double double0 = ScriptRuntime.NaNobj;
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      // Undeclared exception!
      try { 
        ScriptRuntime.getElemFunctionAndThis(interpretedFunction0, double0, (Context) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Object object0 = ScriptRuntime.getIndexObject(170);
      assertEquals(170, object0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Object object0 = ScriptRuntime.getIndexObject(1973.8931404717932);
      assertEquals("1973.8931404717932", object0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long long0 = ScriptRuntime.testUint32String("3W0+0%c]<T");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      long long0 = ScriptRuntime.testUint32String("undefined");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      long long0 = ScriptRuntime.testUint32String(".MiZFK{");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long long0 = ScriptRuntime.testUint32String("2585");
      assertEquals(2585L, long0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      long long0 = ScriptRuntime.testUint32String("language version");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      long long0 = ScriptRuntime.testUint32String("03");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      long long0 = ScriptRuntime.testUint32String("");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      long long0 = ScriptRuntime.indexFromString("3");
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test188()  throws Throwable  {
      Context context0 = Context.getContext();
      Double double0 = ScriptRuntime.NaNobj;
      // Undeclared exception!
      try { 
        ScriptRuntime.getElemFunctionAndThis(double0, "13", context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find function java.lang.String@0000000003.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      long long0 = ScriptRuntime.indexFromString("03");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Object object0 = ScriptRuntime.getIndexObject("-1831.9577164907384");
      assertEquals("-1831.9577164907384", object0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Object object0 = ScriptRuntime.getIndexObject("3*fs7}[L=");
      assertEquals("3*fs7}[L=", object0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Object object0 = ScriptRuntime.getIndexObject("-2");
      assertEquals((-2), object0);
      
      boolean boolean0 = ScriptRuntime.shallowEq(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      long long0 = ScriptRuntime.indexFromString("(");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Object object0 = ScriptRuntime.getIndexObject("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Context context0 = Context.enter();
      ScriptRuntime.setObjectElem((Scriptable) nativeError0, (Object) "=Z?;UDo[3", (Object) null, context0);
      // Undeclared exception!
      try { 
        ScriptRuntime.getExistingCtor(context0, nativeError0, "=Z?;UDo[3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \"=Z?;UDo[3\" is not a constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.getExistingCtor(context0, nativeError0, "=Z?;UDo[3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constructor for \"=Z?;UDo[3\" not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        ScriptRuntime.searchDefaultNamespace(context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test198()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.setDefaultNamespace(context0, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // XML runtime not available
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      char char0 = ScriptRuntime.toUint16("-1832.365376");
      assertEquals('\uF8D8', char0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      char char0 = ScriptRuntime.toUint16("#Z\"V10:-4Jpo`!6");
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      long long0 = ScriptRuntime.toUint32((-1485.4186745808477));
      assertEquals(4294965811L, long0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      long long0 = ScriptRuntime.toUint32(Double.NEGATIVE_INFINITY);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      long long0 = ScriptRuntime.toUint32(1974.5);
      assertEquals(1974L, long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test204()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Object[] objectArray0 = ScriptRuntime.getArrayElements(nativeError0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = ScriptRuntime.toInt32((-211.40524));
      assertEquals((-211), int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = ScriptRuntime.toInt32(Double.POSITIVE_INFINITY);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = ScriptRuntime.toInt32(4.294967296E9);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = ScriptRuntime.toInt32((double) 110);
      assertEquals(110, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.toInt32(context0.emptyArgs, (-2487));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2487
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      int int0 = ScriptRuntime.toInt32((Object) nativeJavaTopPackage0.UNINITIALIZED_CONST);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = ScriptRuntime.toInt32((Object) "__parent__");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Context context0 = Context.enter((Context) null);
      // Undeclared exception!
      try { 
        ScriptRuntime.toInteger(context0.emptyArgs, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Context context0 = new Context();
      double double0 = ScriptRuntime.toInteger(context0.emptyArgs, 57);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double double0 = ScriptRuntime.toInteger(4.951773992608424E19);
      assertEquals(4.951773992608424E19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      double double0 = ScriptRuntime.toInteger((-580.64961553));
      assertEquals((-580.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double double0 = ScriptRuntime.toInteger(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double double0 = ScriptRuntime.toInteger(Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      double double0 = ScriptRuntime.toInteger(Double.NaN);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray(6);
      Scriptable scriptable0 = context0.initStandardObjects((ScriptableObject) nativeArray0);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Object;
      NativeObject nativeObject0 = (NativeObject)ScriptRuntime.newBuiltinObject(context0, scriptable0, topLevel_Builtins0, context0.emptyArgs);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test220()  throws Throwable  {
      Context context0 = Context.enter();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Synchronizer synchronizer0 = new Synchronizer(nativeJavaClass0);
      // Undeclared exception!
      try { 
        ScriptRuntime.call(context0, synchronizer0, context0, context0.emptyArgs, synchronizer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Context context0 = Context.enter();
      NativeNumber nativeNumber0 = new NativeNumber(1);
      NativeCall nativeCall0 = new NativeCall();
      // Undeclared exception!
      try { 
        ScriptRuntime.call(context0, nativeNumber0, nativeCall0, context0.emptyArgs, nativeNumber0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Context context0 = new Context();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      // Undeclared exception!
      try { 
        ScriptRuntime.call(context0, nativeJavaClass0, (Object) null, context0.emptyArgs, nativeBoolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot call method \"java.lang.String@0000000004\" of null
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Scriptable scriptable0 = ScriptRuntime.toObjectOrNull(context0, (Object) context0, (Scriptable) importerTopLevel0);
      assertEquals("JavaObject", scriptable0.getClassName());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test224()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeString nativeString0 = new NativeString("error reporter");
      Object object0 = ScriptRuntime.getObjectProp((Scriptable) importerTopLevel0, "HPvhFk8Ni", context0);
      // Undeclared exception!
      try { 
        Context.toObject(object0, (Scriptable) nativeString0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot convert undefined to an object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptRuntime.toObject((Context) null, (Scriptable) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot convert null to an object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(100);
      Class<FunctionObject> class0 = FunctionObject.class;
      NativeNumber nativeNumber1 = (NativeNumber)ScriptRuntime.toObject((Scriptable) nativeNumber0, (Object) nativeNumber0, (Class<?>) class0);
      assertEquals("object", nativeNumber1.getTypeOf());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test227()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        ScriptRuntime.toObject((Scriptable) null, (Object) contextFactory0, (Class<?>) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      Object object0 = ScriptRuntime.getObjectIndex((Scriptable) baseFunction0, 13, context0);
      Object object1 = ScriptRuntime.enumInit(object0, context0, 160);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      NativeString nativeString0 = new NativeString("error reporter");
      NativeString nativeString1 = (NativeString)Context.toObject((Object) nativeString0, (Scriptable) baseFunction0);
      assertTrue(nativeString1.isEmpty());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test230()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Boolean boolean0 = new Boolean(false);
      Class<FieldAndMethods> class0 = FieldAndMethods.class;
      // Undeclared exception!
      try { 
        Context.toObject((Object) boolean0, (Scriptable) nativeJavaTopPackage0, (Class<?>) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test231()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      String string0 = ScriptRuntime.uneval(context0, importerTopLevel0, importerTopLevel0);
      assertEquals("({})", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test232()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      String string0 = ScriptRuntime.defaultObjectToSource(context0, (Scriptable) null, nativeBoolean0, context0.emptyArgs);
      assertEquals("({})", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test233()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      ScriptRuntime.defaultObjectToSource(context0, (Scriptable) null, (Scriptable) null, context0.emptyArgs);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        ScriptRuntime.uneval(context0, topLevel0, topLevel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      BaseFunction baseFunction0 = new BaseFunction();
      String string0 = ScriptRuntime.uneval(context0, baseFunction0, context0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      String string0 = ScriptRuntime.uneval(context0, (Scriptable) null, context0.generateObserverCount);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test237()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Object object0 = ScriptRuntime.evalSpecial(context0, importerTopLevel0, nativeIterator_StopIteration0, context0.emptyArgs, "language version", 160);
      String string0 = ScriptRuntime.uneval(context0, nativeIterator_StopIteration0, object0);
      assertEquals("undefined", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test238()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      String string0 = ScriptRuntime.uneval(context0, importerTopLevel0, (Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = ScriptRuntime.toString((-1.0E21));
      assertNotNull(string0);
      assertEquals("-1e+21", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = ScriptRuntime.numberToString(8, 4);
      assertEquals("20", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test241()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptRuntime.numberToString(1587.0, 48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal radix 48.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test242()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptRuntime.numberToString((-2539.7634446), (-889275718));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal radix -889275718.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = ScriptRuntime.toString((double) 0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = ScriptRuntime.toString(Double.NEGATIVE_INFINITY);
      assertEquals("-Infinity", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = ScriptRuntime.toString(Double.POSITIVE_INFINITY);
      assertEquals("Infinity", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.toString(context0.emptyArgs, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      String string0 = ScriptRuntime.toString(context0.emptyArgs, 140);
      assertEquals("undefined", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Boolean boolean0 = Boolean.FALSE;
      EcmaError ecmaError0 = (EcmaError)ScriptRuntime.notFunctionError((Object) nativeJavaTopPackage0, (Object) boolean0, "m Qr;]M&~T5n");
      assertEquals("Cannot call property m Qr;]M&~T5n in object [JavaPackage ]. It is not a function, it is \"boolean\".", ecmaError0.getErrorMessage());
      assertEquals("TypeError", ecmaError0.getName());
      assertEquals(0, ecmaError0.columnNumber());
      assertEquals(0, ecmaError0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      NativeWith nativeWith0 = new NativeWith(baseFunction0, baseFunction0);
      Byte byte0 = new Byte((byte) (-1));
      EcmaError ecmaError0 = (EcmaError)ScriptRuntime.notFunctionError((Object) byte0, (Object) nativeWith0, "umbe7[\r");
      assertEquals("TypeError", ecmaError0.getName());
      assertEquals(0, ecmaError0.lineNumber());
      assertEquals(0, ecmaError0.getColumnNumber());
      assertEquals("Cannot call property umbe7[\r in object -1. It is not a function, it is \"object\".", ecmaError0.getErrorMessage());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test250()  throws Throwable  {
      Context context0 = Context.getContext();
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      // Undeclared exception!
      try { 
        ScriptRuntime.getElemFunctionAndThis("bh:KZE?wPGp@", charBuffer0, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Object object0 = ScriptRuntime.getObjectIndex((Scriptable) nativeError0, 2, (Context) null);
      // Undeclared exception!
      try { 
        ScriptRuntime.memberRef(object0, (Object) null, (Context) null, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: undefined is not an xml object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      NativeString nativeString0 = new NativeString("ClassCache");
      CharSequence charSequence0 = ScriptRuntime.toCharSequence(nativeString0);
      assertEquals("ClassCache", charSequence0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test253()  throws Throwable  {
      Context context0 = new Context();
      NativeError nativeError0 = new NativeError();
      context0.initStandardObjects((ScriptableObject) nativeError0, false);
      Class<NativeJavaClass> class0 = NativeJavaClass.class;
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject(nativeError0, context0, class0, false);
      // Undeclared exception!
      try { 
        ScriptRuntime.defaultObjectToSource(context0, nativeJavaObject0, nativeJavaObject0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"toSource\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isValidIdentifierName("-N QoskEV0zB(:/+y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isValidIdentifierName("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isValidIdentifierName("if");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = ScriptRuntime.escapeString("+ZkMuGcZH]Kj");
      assertEquals("+ZkMuGcZH]Kj", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = ScriptRuntime.escapeString("/,##@q((!`6qM\"");
      assertEquals("/,##@q((!\\x7f`6qM\\\"", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptRuntime.escapeString(" instanceof ", '`');
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = ScriptRuntime.escapeString("wEkj@E+,JebZ", '\'');
      assertEquals("wEkj@E+,JebZ", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object[] objectArray1 = ScriptRuntime.padArguments(objectArray0, 100);
      assertEquals(100, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String[] stringArray0 = ScriptRuntime.getTopPackageNames();
      Object[] objectArray0 = ScriptRuntime.padArguments(stringArray0, 2);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      double double0 = ScriptRuntime.toNumber("^HMU'<>^MY9dq^hE");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      char char0 = ScriptRuntime.toUint16("1058.4650482");
      assertEquals('\u0422', char0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test265()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      BaseFunction baseFunction0 = new BaseFunction();
      BoundFunction boundFunction0 = new BoundFunction(context0, importerTopLevel0, baseFunction0, baseFunction0, context0.emptyArgs);
      ScriptRuntime.toNumber((Object) boundFunction0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      char char0 = ScriptRuntime.toUint16("-Infinity");
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      char char0 = ScriptRuntime.toUint16("-2");
      assertEquals('\uFFFE', char0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      double double0 = ScriptRuntime.toNumber("+B");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      double double0 = ScriptRuntime.toNumber((Object) "03");
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      double double0 = ScriptRuntime.toNumber((Object) "0~V3");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      double double0 = ScriptRuntime.toNumber((Object) " mu][%h ^");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      double double0 = ScriptRuntime.toNumber("");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      double double0 = ScriptRuntime.stringToNumber("language version", 10, 5102);
      assertEquals(4.841662069893986E19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      double double0 = ScriptRuntime.stringToNumber("/&H@]q{j/Apex%-", 10, 11);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        context0.compileString("T*3", "com.google.javascript.rhino.head.ast.ContinueStatement", 56, contextFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // securityDomain should be null if setSecurityController() was never called
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      double double0 = ScriptRuntime.stringToNumber("language version", 6, 100);
      assertEquals(1614.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      double double0 = ScriptRuntime.stringToNumber("rhino", 9, 9);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      double double0 = ScriptRuntime.stringToNumber("Hx)rCX@_XNb_mGd^", 13, 64);
      assertEquals(66407.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        ScriptRuntime.toNumber(objectArray0, (-1215));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1215
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      double double0 = ScriptRuntime.toNumber(objectArray0, 110);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test281()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      boolean boolean0 = ScriptRuntime.cmp_LE(importerTopLevel0, context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      double double0 = ScriptRuntime.toNumber((Object) true);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(6);
      double double0 = ScriptRuntime.toNumber((Object) charBuffer0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test284()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      boolean boolean0 = ScriptRuntime.toBoolean(nativeJavaClass0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test285()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      boolean boolean0 = ScriptRuntime.toBoolean(nativeBoolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Integer integer0 = new Integer(0);
      boolean boolean0 = ScriptableObject.isFalse(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      boolean boolean0 = ScriptRuntime.toBoolean(nativeIterator_StopIteration0.CONST);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Double double0 = ScriptRuntime.NaNobj;
      boolean boolean0 = ScriptRuntime.toBoolean(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.toBoolean("OpenJDK 6m-Bit Server VM");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.toBoolean("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.toBoolean((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Context context0 = Context.enter();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      boolean boolean0 = ScriptRuntime.toBoolean(classLoader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test293()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      BaseFunction baseFunction0 = new BaseFunction();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      NativeJavaPackage nativeJavaPackage0 = nativeJavaTopPackage0.forcePackage("error reporter", baseFunction0);
      ScriptRuntime.nameIncrDecr((Scriptable) nativeJavaPackage0, "language version", context0, 1);
      assertTrue(baseFunction0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Boolean boolean0 = ScriptRuntime.wrapBoolean(false);
      NativeString nativeString0 = new NativeString("kbx@}O\"`TC");
      // Undeclared exception!
      try { 
        ScriptRuntime.eq(boolean0, nativeString0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isStrWhiteSpaceChar(65279);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isStrWhiteSpaceChar(8232);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isStrWhiteSpaceChar(160);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isStrWhiteSpaceChar(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isStrWhiteSpaceChar(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isJSWhitespaceOrLineTerminator(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isStrWhiteSpaceChar(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isJSLineTerminator(8233);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isJSLineTerminator(8232);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isJSLineTerminator(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isJSLineTerminator(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isJSWhitespaceOrLineTerminator(2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test307()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ScriptableObject scriptableObject0 = ScriptRuntime.initStandardObjects(context0, importerTopLevel0, true);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Class<WrappedException> class0 = WrappedException.class;
      boolean boolean0 = ScriptRuntime.isRhinoRuntimeType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Class<BoundFunction> class0 = BoundFunction.class;
      boolean boolean0 = ScriptRuntime.isRhinoRuntimeType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = ScriptRuntime.isRhinoRuntimeType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ScriptRuntime.isRhinoRuntimeType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      boolean boolean0 = ScriptRuntime.isRhinoRuntimeType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = ScriptRuntime.isRhinoRuntimeType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      ScriptRuntime.typeErrorThrower();
      BaseFunction baseFunction0 = ScriptRuntime.typeErrorThrower();
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Context context0 = Context.enter();
      Scriptable scriptable0 = ScriptRuntime.lastStoredScriptable(context0);
      assertNull(scriptable0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test316()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.escapeTextValue(contextFactory0, context0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // XML runtime not available
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      double double0 = ScriptRuntime.toInteger((Object) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      // Undeclared exception!
      try { 
        ScriptRuntime.leaveDotQuery(nativeError0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.head.NativeError cannot be cast to com.google.javascript.rhino.head.NativeWith
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.refGet((Ref) null, context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.refDel((Ref) null, context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      NativeError nativeError0 = new NativeError();
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      NativeError nativeError1 = (NativeError)ScriptRuntime.toObject((Context) null, (Scriptable) baseFunction0, (Object) nativeError0, (Class<?>) class0);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Object object0 = ScriptRuntime.setObjectIndex((Object) nativeJavaTopPackage0, 1.0E32, (Object) contextFactory0, (Context) null);
      assertSame(contextFactory0, object0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      EcmaError ecmaError0 = (EcmaError)ScriptRuntime.notFunctionError((Object) "-2", (Object) "-2", "-2");
      assertEquals("Cannot call property -2 in object -2. It is not a function, it is \"string\".", ecmaError0.getErrorMessage());
      assertEquals(0, ecmaError0.columnNumber());
      assertEquals(0, ecmaError0.lineNumber());
      assertEquals("TypeError", ecmaError0.getName());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        ScriptRuntime.getPropFunctionAndThis((Object) nativeJavaClass0, "v@,\"yZ|Y~gnW&)<NRg!", context0, (Scriptable) nativeJavaClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeJavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-716.5919654651686));
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        ScriptRuntime.delete((Object) nativeNumber0, (Object) nativeNumber0, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptRuntime.refSet((Ref) null, (Object) null, (Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        ScriptRuntime.specialRef((Object) null, "language version", context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot read property \"java.lang.String@0000000002\" from null
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Context context0 = new Context();
      ScriptRuntime.NoSuchMethodShim scriptRuntime_NoSuchMethodShim0 = new ScriptRuntime.NoSuchMethodShim((Callable) null, "language version");
      // Undeclared exception!
      try { 
        ScriptRuntime.nameRef((Object) context0, (Object) scriptRuntime_NoSuchMethodShim0, context0, (Scriptable) null, 110);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      CharSequence charSequence0 = ScriptRuntime.add((CharSequence) "language version", (Object) context0);
      //  // Unstable assertion: assertEquals(67, charSequence0.length());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.exitActivationFunction(context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      BaseFunction baseFunction0 = ScriptRuntime.typeErrorThrower();
      // Undeclared exception!
      try { 
        ScriptRuntime.updateDotQuery(true, baseFunction0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.head.ScriptRuntime$1 cannot be cast to com.google.javascript.rhino.head.NativeWith
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test332()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      ScriptRuntime.NoSuchMethodShim scriptRuntime_NoSuchMethodShim0 = new ScriptRuntime.NoSuchMethodShim(nativeJavaClass0, "FWqe2PBvaE+|e!");
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.nameRef((Object) scriptRuntime_NoSuchMethodShim0, context0, (Scriptable) nativeJavaClass0, 150);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // XML runtime not available
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      // Undeclared exception!
      try { 
        ScriptRuntime.enterDotQuery(baseFunction0, baseFunction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test334()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        ScriptRuntime.nameIncrDecr((Scriptable) nativeIterator_StopIteration0, "language version", 100);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // ReferenceError: \"language version\" is not defined.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      ScriptRuntime scriptRuntime0 = new ScriptRuntime();
      assertEquals(-0.0, ScriptRuntime.negativeZero, 0.01);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.getElemFunctionAndThis((Object) null, "-N QoskEV0zB(:/+y", context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot call method \"java.lang.String@0000000001\" of null
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Short short0 = new Short((short)1072);
      // Undeclared exception!
      try { 
        ScriptRuntime.setEnumNumbers(short0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to com.google.javascript.rhino.head.ScriptRuntime$IdEnumeration
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        ScriptRuntime.createFunctionActivation((NativeFunction) null, (Scriptable) null, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeCall", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      BaseFunction baseFunction0 = ScriptRuntime.typeErrorThrower();
      Class<NativeGenerator> class0 = NativeGenerator.class;
      JavaMembers javaMembers0 = new JavaMembers(baseFunction0, class0, false);
      NativeJavaMethod nativeJavaMethod0 = javaMembers0.ctors;
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        ScriptRuntime.callSpecial((Context) null, baseFunction0, baseFunction0, objectArray0, nativeJavaMethod0, nativeJavaMethod0, 2, "lang", 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: This operation is not allowed.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }
}

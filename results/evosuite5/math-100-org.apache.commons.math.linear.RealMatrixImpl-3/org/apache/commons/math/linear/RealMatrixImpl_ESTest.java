/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 21:16:41 GMT 2019
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class RealMatrixImpl_ESTest extends RealMatrixImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.getColumnMatrix((-285));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.getRowMatrix((-162));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      boolean boolean0 = realMatrixImpl0.isSingular();
      assertEquals(1, doubleArray0.length);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = realMatrixImpl0.getLUMatrix();
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertTrue(realMatrix0.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrix0.isSquare());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(1.0, realMatrix0.getNorm(), 0.01);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      realMatrixImpl0.hashCode();
      assertEquals(1, doubleArray0.length);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl1);
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertTrue(realMatrixImpl1.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = realMatrixImpl0.equals(realMatrixImpl1);
      assertEquals(1, doubleArray0.length);
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertTrue(realMatrixImpl1.isSquare());
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1, 1);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(3139, 1);
      assertNotNull(realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertEquals(3139, realMatrixImpl1.getRowDimension());
      assertFalse(realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      
      boolean boolean0 = realMatrixImpl0.equals(realMatrixImpl1);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(3139, realMatrixImpl1.getRowDimension());
      assertFalse(realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(3502, 3502);
      assertNotNull(realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(3502, realMatrixImpl1.getColumnDimension());
      assertEquals(3502, realMatrixImpl1.getRowDimension());
      assertTrue(realMatrixImpl1.isSquare());
      
      boolean boolean0 = realMatrixImpl0.equals(realMatrixImpl1);
      assertEquals(2, doubleArray0.length);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(3502, realMatrixImpl1.getColumnDimension());
      assertEquals(3502, realMatrixImpl1.getRowDimension());
      assertTrue(realMatrixImpl1.isSquare());
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1, 1);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = realMatrixImpl0.equals(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1, 1);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(1.0, realMatrixImpl1.getNorm(), 0.01);
      assertTrue(realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      boolean boolean0 = realMatrixImpl0.equals(realMatrixImpl1);
      assertEquals(1, doubleArray0.length);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1.0, realMatrixImpl1.getNorm(), 0.01);
      assertTrue(realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(32, 32);
      assertNotNull(realMatrixImpl0);
      assertEquals(32, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(32, realMatrixImpl0.getColumnDimension());
      
      String string0 = realMatrixImpl0.toString();
      assertNotNull(string0);
      assertEquals(32, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(32, realMatrixImpl0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      String string0 = realMatrixImpl0.toString();
      assertNotNull(string0);
      assertEquals("RealMatrixImpl{}", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      double[][] doubleArray1 = new double[5][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(5.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(5, realMatrixImpl0.getColumnDimension());
      
      RealMatrix realMatrix0 = realMatrixImpl0.transpose();
      assertEquals(5, doubleArray1.length);
      assertNotNull(realMatrix0);
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(5.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(5, realMatrixImpl0.getColumnDimension());
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(1.0, realMatrix0.getNorm(), 0.01);
      assertEquals(5, realMatrix0.getColumnDimension());
      assertTrue(realMatrix0.isSquare());
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
      
      RealMatrix realMatrix1 = realMatrixImpl0.subtract(realMatrix0);
      assertEquals(5, doubleArray1.length);
      assertNotNull(realMatrix1);
      assertFalse(realMatrixImpl0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrixImpl0));
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(5.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(5, realMatrixImpl0.getColumnDimension());
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(1.0, realMatrix0.getNorm(), 0.01);
      assertEquals(5, realMatrix0.getColumnDimension());
      assertTrue(realMatrix0.isSquare());
      assertEquals(5, realMatrix1.getColumnDimension());
      assertTrue(realMatrix1.isSquare());
      assertEquals(5, realMatrix1.getRowDimension());
      assertEquals(4.0, realMatrix1.getNorm(), 0.01);
      assertNotSame(realMatrixImpl0, realMatrix1);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertNotSame(realMatrix1, realMatrixImpl0);
      
      boolean boolean0 = realMatrix1.isSingular();
      assertEquals(5, doubleArray1.length);
      assertFalse(realMatrixImpl0.equals((Object)realMatrix1));
      assertFalse(realMatrixImpl0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrixImpl0));
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(5.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(5, realMatrixImpl0.getColumnDimension());
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(1.0, realMatrix0.getNorm(), 0.01);
      assertEquals(5, realMatrix0.getColumnDimension());
      assertTrue(realMatrix0.isSquare());
      assertEquals(5, realMatrix1.getColumnDimension());
      assertTrue(realMatrix1.isSquare());
      assertEquals(5, realMatrix1.getRowDimension());
      assertEquals(4.0, realMatrix1.getNorm(), 0.01);
      assertNotSame(realMatrixImpl0, realMatrix1);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertNotSame(realMatrix1, realMatrixImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1940, 1);
      assertNotNull(realMatrixImpl0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1940, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      
      try { 
        realMatrixImpl0.getLUMatrix();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // LU decomposition requires that the matrix be square.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(12, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(12, realMatrixImpl0.getRowDimension());
      
      try { 
        realMatrixImpl0.solve((RealMatrix) realMatrixImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // coefficient matrix is not square
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(15, 15);
      assertNotNull(realMatrixImpl0);
      assertEquals(15, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(15, realMatrixImpl0.getRowDimension());
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(31, 15);
      assertNotNull(realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(15, realMatrixImpl1.getColumnDimension());
      assertFalse(realMatrixImpl1.isSquare());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertEquals(31, realMatrixImpl1.getRowDimension());
      
      try { 
        realMatrixImpl0.solve((RealMatrix) realMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incorrect row dimension
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[9][8];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(8, realMatrixImpl0.getColumnDimension());
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      
      try { 
        realMatrixImpl0.solve(doubleArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        realMatrixImpl0.preMultiply(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = realMatrixImpl0.preMultiply(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(13, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(13, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      
      try { 
        realMatrixImpl0.operate(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = realMatrixImpl0.operate(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(19, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(19, realMatrixImpl0.getRowDimension());
      
      try { 
        realMatrixImpl0.getTrace();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(27, 27);
      assertNotNull(realMatrixImpl0);
      assertEquals(27, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(27, realMatrixImpl0.getColumnDimension());
      
      double double0 = realMatrixImpl0.getTrace();
      assertEquals(27, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(27, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      double double0 = realMatrixImpl0.getDeterminant();
      assertEquals(1, doubleArray0.length);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = realMatrixImpl0.solve(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.getDeterminant();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = realMatrixImpl0.getDeterminant();
      assertEquals(1, doubleArray0.length);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.getEntry(3874, 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix entry does not exist
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.getColumn(450);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = realMatrixImpl0.getColumn(0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1, 1);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      
      try { 
        realMatrixImpl0.getRow(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(8, realMatrixImpl0.getColumnDimension());
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      
      double[] doubleArray1 = realMatrixImpl0.getRow(2);
      assertEquals(5, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertEquals(8, realMatrixImpl0.getColumnDimension());
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = realMatrixImpl0.getColumnMatrix(0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertTrue(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
      assertTrue(realMatrix0.isSquare());
      assertEquals(1, realMatrix0.getRowDimension());
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(19, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(19, realMatrixImpl0.getRowDimension());
      
      double[][] doubleArray1 = new double[4][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      try { 
        realMatrixImpl0.setSubMatrix(doubleArray1, 2, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      double[][] doubleArray0 = new double[1][1];
      try { 
        realMatrixImpl0.setSubMatrix(doubleArray0, 2346, 2346);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must be initialized to perfom this method
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[][] doubleArray0 = new double[8][8];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(8, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(8, realMatrixImpl0.getColumnDimension());
      
      try { 
        realMatrixImpl0.setSubMatrix(doubleArray0, 1950, 1954);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[4][8];
      doubleArray1[2] = doubleArray0;
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[][] doubleArray0 = new double[0][0];
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      try { 
        realMatrixImpl0.setSubMatrix((double[][]) null, 3019, (-2323));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[0][5];
      try { 
        realMatrixImpl0.setSubMatrix(doubleArray1, (-1), (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      try { 
        realMatrixImpl0.getSubMatrix(intArray0, intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // selected row and column index arrays must be non-empty
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(intArray0, intArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(realMatrix0);
      assertTrue(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertTrue(realMatrix0.isSquare());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
      assertEquals(1, realMatrix0.getColumnDimension());
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.getSubMatrix(0, 0, 4, 31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1, 1);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      
      try { 
        realMatrixImpl0.getSubMatrix(1, 1, 1, (-564));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(74, 74);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(74, realMatrixImpl0.getColumnDimension());
      assertEquals(74, realMatrixImpl0.getRowDimension());
      
      try { 
        realMatrixImpl0.getSubMatrix(74, 74, (-1985), 35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.getSubMatrix(30, 30, 30, 30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1, 1);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      
      try { 
        realMatrixImpl0.getSubMatrix(1, (-1390), (-1390), (-564));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = realMatrixImpl0.getNorm();
      assertEquals(1, doubleArray0.length);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.preMultiply((RealMatrix) realMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1, 1);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      RealMatrix realMatrix0 = realMatrixImpl0.scalarMultiply((-4828.15));
      assertNotNull(realMatrix0);
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrix0.isSquare());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
      assertEquals(1, realMatrix0.getColumnDimension());
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1, 1);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      RealMatrix realMatrix0 = realMatrixImpl0.scalarAdd((-4828.15));
      assertNotNull(realMatrix0);
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(4828.15, realMatrix0.getNorm(), 0.01);
      assertEquals(1, realMatrix0.getRowDimension());
      assertTrue(realMatrix0.isSquare());
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(2364, 2364);
      assertNotNull(realMatrixImpl0);
      assertEquals(2364, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(2364, realMatrixImpl0.getRowDimension());
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(449, 2364);
      assertNotNull(realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl1.isSquare());
      assertEquals(449, realMatrixImpl1.getRowDimension());
      assertEquals(2364, realMatrixImpl1.getColumnDimension());
      
      try { 
        realMatrixImpl0.subtract(realMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(58, 58);
      assertNotNull(realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl1.isSquare());
      assertEquals(58, realMatrixImpl1.getColumnDimension());
      assertEquals(58, realMatrixImpl1.getRowDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      
      try { 
        realMatrixImpl0.subtract(realMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(7, 4);
      assertNotNull(realMatrixImpl0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(7, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      
      RealMatrix realMatrix0 = realMatrixImpl0.getRowMatrix(4);
      assertNotNull(realMatrix0);
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(7, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertFalse(realMatrix0.isSquare());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
      assertEquals(4, realMatrix0.getColumnDimension());
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
      
      try { 
        realMatrixImpl0.add(realMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(7, 4);
      RealMatrix realMatrix0 = realMatrixImpl0.add(realMatrixImpl0);
      assertFalse(realMatrix0.isSquare());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1972, 1972);
      RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(1, 4, 1, 1);
      try { 
        realMatrixImpl0.add(realMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(2886, (-11));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be postive
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl((-185), (-185));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be postive
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1, 1);
      // Undeclared exception!
      try { 
        realMatrixImpl0.getPermutation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      try { 
        realMatrixImpl0.getSubMatrix((-3024), (-3024), (-1), (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      try { 
        realMatrixImpl0.inverse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Matrix is singular.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      RealMatrix realMatrix0 = realMatrixImpl0.preMultiply((RealMatrix) realMatrixImpl0);
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(3, 3);
      RealMatrix realMatrix0 = realMatrixImpl0.getIdentity(3);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(3, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      RealMatrix realMatrix0 = realMatrixImpl0.copy();
      assertEquals(12, realMatrix0.getRowDimension());
  }
}

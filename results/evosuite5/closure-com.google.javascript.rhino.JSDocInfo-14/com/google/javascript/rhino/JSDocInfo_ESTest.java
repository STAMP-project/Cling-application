/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 23:03:08 GMT 2019
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.SourcePosition;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class JSDocInfo_ESTest extends JSDocInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setOriginalCommentString("9z^Y?U!#sii9wo>(");
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getOriginalCommentString();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      JSDocInfo.Marker jSDocInfo_Marker0 = jSDocInfo0.addMarker();
      assertNotNull(jSDocInfo_Marker0);
      
      jSDocInfo0.getOriginalCommentString();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSDocInfo0.setModifies(linkedHashSet0);
      boolean boolean0 = jSDocInfo0.hasModifies();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.setDeprecationReason("com.google.javascript.rhino.JSDocInfo$StringPosition");
      boolean boolean1 = jSDocInfo0.hasModifies();
      assertFalse(boolean1 == boolean0);
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.hasModifies();
      assertFalse(boolean0);
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.declareThrows((JSTypeExpression) null);
      assertTrue(boolean0);
      
      jSDocInfo0.getTypeNodes();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "COMMA");
      boolean boolean0 = jSDocInfo0.declareThrows(jSTypeExpression0);
      assertTrue(boolean0);
      
      jSDocInfo0.getTypeNodes();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node0 = new Node(8298, 1048576, 1048576);
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "");
      jSDocInfo0.declareParam(jSTypeExpression0, "=G<!Vc,y>Wb,qy");
      jSDocInfo0.getTypeNodes();
      assertEquals(1, jSDocInfo0.getParameterCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "mm)Dse#da");
      jSDocInfo0.addImplementedInterface(jSTypeExpression0);
      jSDocInfo0.getTypeNodes();
      assertEquals(1, jSDocInfo0.getImplementedInterfaceCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "COMMA");
      jSDocInfo0.addExtendedInterface(jSTypeExpression0);
      jSDocInfo0.getTypeNodes();
      assertEquals(1, jSDocInfo0.getExtendedInterfacesCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node0 = new Node(449, 2048, 449);
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo");
      jSDocInfo0.setBaseType(jSTypeExpression0);
      jSDocInfo0.getTypeNodes();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.declareParam((JSTypeExpression) null, "com.google.javascript.rhino.JSDocInfo$1");
      jSDocInfo0.getTypeNodes();
      assertEquals(1, jSDocInfo0.getParameterCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      assertFalse(jSDocInfo0.containsDeclaration());
      
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo$1", 92, 92);
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "com.google.javascript.rhino.JSDocInfo$1");
      jSDocInfo0.setThisType(jSTypeExpression0);
      jSDocInfo0.getTypeNodes();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.declareThrows((JSTypeExpression) null);
      assertTrue(boolean0);
      
      ImmutableList<String> immutableList0 = jSDocInfo0.getTemplateTypeNames();
      assertNotNull(immutableList0);
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getTemplateTypeNames();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      JSDocInfo.Marker jSDocInfo_Marker0 = jSDocInfo0.addMarker();
      assertNotNull(jSDocInfo_Marker0);
      
      Collection<JSDocInfo.Marker> collection0 = jSDocInfo0.getMarkers();
      assertFalse(jSDocInfo0.isConstant());
      assertTrue(collection0.contains(jSDocInfo_Marker0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getMarkers();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node0 = Node.newNumber(1.0);
      jSDocInfo0.setAssociatedNode(node0);
      jSDocInfo0.getSourceName();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getSourceName();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getFileOverview();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.documentAuthor("aev|nby!4QQpYxT");
      assertTrue(boolean0);
      
      jSDocInfo0.getFileOverview();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getBlockDescription();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      JSDocInfo.Marker jSDocInfo_Marker0 = jSDocInfo0.addMarker();
      assertNotNull(jSDocInfo_Marker0);
      
      jSDocInfo0.getBlockDescription();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getReturnDescription();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.documentFileOverview("Ka&");
      jSDocInfo0.getReturnDescription();
      assertTrue(jSDocInfo0.hasFileOverview());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getVersion();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.documentAuthor("com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation");
      assertTrue(boolean0);
      
      jSDocInfo0.getVersion();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getReferences();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.documentFileOverview("Ka&");
      jSDocInfo0.getReferences();
      assertTrue(jSDocInfo0.hasFileOverview());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAuthors();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.documentReturn("c'");
      assertTrue(boolean0);
      
      jSDocInfo0.getAuthors();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.documentParam("?BG<5u8w;=&3K", "end index (%s) must not be less than start index (%s)");
      assertTrue(boolean0);
      
      String string0 = jSDocInfo0.getDescriptionForParameter("end index (%s) must not be less than start index (%s)");
      assertNull(string0);
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getDescriptionForParameter("[9");
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.documentParam("com.google.javascript.rhino.JSDocInfo", "z2g?Y\"a");
      boolean boolean1 = jSDocInfo0.hasDescriptionForParameter("=G<!Vc,y>Wb,qy");
      assertFalse(boolean1 == boolean0);
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.documentFileOverview("Ka&");
      boolean boolean0 = jSDocInfo0.hasDescriptionForParameter((String) null);
      assertTrue(jSDocInfo0.hasFileOverview());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.hasDescriptionForParameter("n");
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSDocInfo0.setModifies(linkedHashSet0);
      jSDocInfo0.getModifies();
      assertTrue(jSDocInfo0.hasModifies());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      JSTypeExpression jSTypeExpression0 = jSDocInfo0.getBaseType();
      jSDocInfo0.addExtendedInterface(jSTypeExpression0);
      jSDocInfo0.getModifies();
      assertEquals(1, jSDocInfo0.getExtendedInterfacesCount());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.addSuppression("(jI|W!i;.0L9");
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertFalse(jSDocInfo0.containsDeclaration());
      assertTrue(set0.contains("(jI|W!i;.0L9"));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getDeprecationReason();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.setModifies((Set<String>) null);
      assertTrue(boolean0);
      
      jSDocInfo0.getDeprecationReason();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.addExtendedInterface((JSTypeExpression) null);
      int int0 = jSDocInfo0.getExtendedInterfacesCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setDescription("Sv0?");
      int int0 = jSDocInfo0.getExtendedInterfacesCount();
      assertEquals(0, int0);
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      int int0 = jSDocInfo0.getExtendedInterfacesCount();
      assertEquals(0, int0);
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.addExtendedInterface((JSTypeExpression) null);
      jSDocInfo0.getExtendedInterfaces();
      assertEquals(1, jSDocInfo0.getExtendedInterfacesCount());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setDescription("PROTECTED");
      jSDocInfo0.getExtendedInterfaces();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getExtendedInterfaces();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.addExtendedInterface((JSTypeExpression) null);
      boolean boolean0 = jSDocInfo0.addExtendedInterface((JSTypeExpression) null);
      assertEquals(1, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.addImplementedInterface((JSTypeExpression) null);
      int int0 = jSDocInfo0.getImplementedInterfaceCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node0 = new Node(8298, 1048576, 1048576);
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "");
      jSDocInfo0.declareParam(jSTypeExpression0, "=G<!Vc,y>Wb,qy");
      int int0 = jSDocInfo0.getImplementedInterfaceCount();
      assertEquals(1, jSDocInfo0.getParameterCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      int int0 = jSDocInfo0.getImplementedInterfaceCount();
      assertEquals(0, int0);
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.addImplementedInterface((JSTypeExpression) null);
      jSDocInfo0.getImplementedInterfaces();
      assertEquals(1, jSDocInfo0.getImplementedInterfaceCount());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.declareThrows((JSTypeExpression) null);
      assertTrue(boolean0);
      
      jSDocInfo0.getImplementedInterfaces();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getImplementedInterfaces();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.addImplementedInterface((JSTypeExpression) null);
      boolean boolean0 = jSDocInfo0.addImplementedInterface((JSTypeExpression) null);
      assertEquals(1, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.hasBaseType();
      assertFalse(boolean0);
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getLicense();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      boolean boolean0 = jSDocInfo0.setModifies((Set<String>) null);
      assertTrue(boolean0);
      
      jSDocInfo0.getLicense();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getLendsName();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.addSuppression("a");
      jSDocInfo0.getLendsName();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getMeaning();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.addExtendedInterface((JSTypeExpression) null);
      jSDocInfo0.getMeaning();
      assertEquals(1, jSDocInfo0.getExtendedInterfacesCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getDescription();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.setDeprecationReason("IF");
      assertTrue(boolean0);
      
      jSDocInfo0.getDescription();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setType((JSTypeExpression) null);
      jSDocInfo0.getType();
      assertTrue(jSDocInfo0.hasType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getModifies();
      jSDocInfo0.setModifies(set0);
      jSDocInfo0.getThrownTypes();
      assertTrue(jSDocInfo0.hasModifies());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.declareThrows((JSTypeExpression) null);
      assertTrue(boolean0);
      
      List<JSTypeExpression> list0 = jSDocInfo0.getThrownTypes();
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getThrownTypes();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setType((JSTypeExpression) null);
      // Undeclared exception!
      try { 
        jSDocInfo0.setEnumParameterType((JSTypeExpression) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // API tried to add two incompatible type tags. This should have been blocked and emitted a warning.
         //
         verifyException("com.google.javascript.rhino.JSDocInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.addModifies("");
      boolean boolean0 = jSDocInfo0.containsDeclaration();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setDescription("c{6XLA(,3i(CW1XI\"Uh");
      jSDocInfo0.getParameterNames();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.declareParam((JSTypeExpression) null, "YX");
      jSDocInfo0.getParameterNames();
      assertEquals(1, jSDocInfo0.getParameterCount());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getParameterNames();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.declareParam((JSTypeExpression) null, "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation");
      boolean boolean0 = jSDocInfo0.hasParameter("com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation");
      assertEquals(1, jSDocInfo0.getParameterCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.declareParam((JSTypeExpression) null, "com.google.common.base.CharMatcher$9");
      boolean boolean0 = jSDocInfo0.hasParameter("mm)Dse#da");
      assertEquals(1, jSDocInfo0.getParameterCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.setModifies((Set<String>) null);
      boolean boolean1 = jSDocInfo0.hasParameter("UWG");
      assertFalse(boolean1 == boolean0);
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.hasParameter("String has leading or trailing whitespace");
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.declareParam((JSTypeExpression) null, "YX");
      boolean boolean0 = jSDocInfo0.hasParameterType("com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo");
      assertEquals(1, jSDocInfo0.getParameterCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.addSuppression("(jI|W!i;.0L9");
      boolean boolean0 = jSDocInfo0.hasParameterType("(jI|W!i;.0L9");
      assertFalse(boolean0);
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.hasParameterType(" :('^jYi");
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.declareThrows((JSTypeExpression) null);
      boolean boolean0 = jSDocInfo0.declareThrows((JSTypeExpression) null);
      assertFalse(jSDocInfo0.containsDeclaration());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = jSDocInfo0.declareTemplateTypeNames(linkedList0);
      boolean boolean1 = jSDocInfo0.declareTemplateTypeNames((List<String>) null);
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = jSDocInfo0.declareTemplateTypeNames(linkedList0);
      assertTrue(boolean0);
      
      jSDocInfo0.getTemplateTypeNames();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.declareParam((JSTypeExpression) null, "");
      boolean boolean0 = jSDocInfo0.declareParam((JSTypeExpression) null, "");
      assertEquals(1, jSDocInfo0.getParameterCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.documentReturn("{Nr-");
      boolean boolean1 = jSDocInfo0.documentReturn("psZ6Dp{");
      assertFalse(boolean1 == boolean0);
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.documentReturn("com.google.common.base.Predicates$ObjectPredicate");
      assertFalse(jSDocInfo0.isConstant());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.documentFileOverview("com.google.javascript.rhino.JSDocInfo$1");
      boolean boolean0 = jSDocInfo0.documentFileOverview("com.google.javascript.rhino.JSDocInfo$1");
      assertTrue(jSDocInfo0.hasFileOverview());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.documentFileOverview("uXo9Az`RzQ6d*CL3u");
      assertTrue(jSDocInfo0.hasFileOverview());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.documentBlock("J");
      boolean boolean1 = jSDocInfo0.documentBlock("");
      assertFalse(boolean1 == boolean0);
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.documentBlock("PROTECTED");
      assertFalse(jSDocInfo0.isConstant());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.documentParam("", "");
      boolean boolean1 = jSDocInfo0.documentParam("", "");
      assertFalse(boolean1 == boolean0);
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.documentParam("com.google.javascript.rhino.jstype.NoType", "com.google.javascript.rhino.jstype.NoType");
      assertTrue(boolean0);
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.documentParam((String) null, (String) null);
      assertTrue(boolean0);
      
      boolean boolean1 = jSDocInfo0.hasDescriptionForParameter((String) null);
      assertTrue(boolean1);
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.documentThrows((JSTypeExpression) null, "=G<!Vc,y>Wb,qy");
      assertTrue(boolean0);
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.documentThrows((JSTypeExpression) null, (String) null);
      boolean boolean1 = jSDocInfo0.documentThrows((JSTypeExpression) null, "NAME");
      assertFalse(boolean1 == boolean0);
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.documentAuthor("Bwryw\"^rE|ZZ(");
      boolean boolean0 = jSDocInfo0.documentAuthor("PUBLIC");
      assertTrue(boolean0);
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.documentAuthor("']+1q9)ip*JyDI_v~b");
      assertTrue(boolean0);
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.documentAuthor("com.google.common.collect.LinkedHashMultimap$SetDecorator");
      assertTrue(boolean0);
      
      jSDocInfo0.getDescriptionForParameter("com.google.common.collect.LinkedHashMultimap$SetDecorator");
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.documentReference("com.google.common.collect.Iterators$1");
      boolean boolean0 = jSDocInfo0.documentReference((String) null);
      assertTrue(boolean0);
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.documentReference("]W*Jw} ");
      assertTrue(boolean0);
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.documentReference("2%N<Z.#jaI]");
      assertTrue(boolean0);
      
      Collection<JSDocInfo.Marker> collection0 = jSDocInfo0.getMarkers();
      assertNotNull(collection0);
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.documentVersion("com.google.javascript.rhino.JSDocInfo$1");
      boolean boolean1 = jSDocInfo0.documentVersion((String) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSDocInfo0.setModifies(linkedHashSet0);
      boolean boolean0 = jSDocInfo0.setModifies(linkedHashSet0);
      assertTrue(jSDocInfo0.hasModifies());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.addModifies("com.google.javascript.rhino.JSDocInfo$1");
      jSDocInfo0.addModifies("K");
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getModifies();
      boolean boolean0 = jSDocInfo0.setSuppressions(set0);
      boolean boolean1 = jSDocInfo0.setSuppressions(set0);
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.addSuppression("");
      jSDocInfo0.addSuppression("com.google.javascript.rhino.JSDocInfo$1");
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JSDocInfo.Marker jSDocInfo_Marker0 = jSDocInfo0.addMarker();
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo_Marker0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.addMarker();
      JSDocInfo.Marker jSDocInfo_Marker0 = jSDocInfo0.addMarker();
      assertNotNull(jSDocInfo_Marker0);
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.documentVersion((String) null);
      assertTrue(boolean0);
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.setOriginalCommentString("@T;k-)b3,'ufmg<");
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.setDeprecationReason("com.google.javascript.rhino.JSDocInfo$1");
      boolean boolean1 = jSDocInfo0.setDeprecationReason("com.google.javascript.rhino.JSDocInfo$1");
      assertFalse(boolean1 == boolean0);
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.declareParam((JSTypeExpression) null, "com.google.javascript.rhino.JSDocInfo$1");
      boolean boolean0 = jSDocInfo0.containsDeclaration();
      assertEquals(1, jSDocInfo0.getParameterCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setReturnType((JSTypeExpression) null);
      boolean boolean0 = jSDocInfo0.containsDeclaration();
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertTrue(jSDocInfo0.hasReturnType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.containsDeclaration());
      
      jSDocInfo0.setConstant(true);
      boolean boolean0 = jSDocInfo0.isConstant();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSDocInfo.TrimmedStringPosition jSDocInfo_TrimmedStringPosition0 = new JSDocInfo.TrimmedStringPosition();
      jSDocInfo_TrimmedStringPosition0.setItem("LL%O");
      assertEquals(0, jSDocInfo_TrimmedStringPosition0.getStartLine());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSDocInfo.TrimmedStringPosition jSDocInfo_TrimmedStringPosition0 = new JSDocInfo.TrimmedStringPosition();
      // Undeclared exception!
      try { 
        jSDocInfo_TrimmedStringPosition0.setItem("Ordinal: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String has leading or trailing whitespace
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSDocInfo.TrimmedStringPosition jSDocInfo_TrimmedStringPosition0 = new JSDocInfo.TrimmedStringPosition();
      // Undeclared exception!
      try { 
        jSDocInfo_TrimmedStringPosition0.setItem(" X`gWP/~_CRb=*<8P\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String has leading or trailing whitespace
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.shouldPreserveTry();
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setNoCompile(false);
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setOverride(true);
      assertTrue(jSDocInfo0.isOverride());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setExpose(false);
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node0 = Node.newString((-879), "com.google.common.base.Predicates$InPredicate", (-1444), (-879));
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "com.google.common.base.Predicates$InPredicate");
      jSDocInfo0.setThisType(jSTypeExpression0);
      boolean boolean0 = jSDocInfo0.containsDeclaration();
      assertTrue(jSDocInfo0.hasThisType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getTypedefType();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.isNoTypeCheck();
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.isNoShadow();
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      String string0 = jSDocInfo0.toString();
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals("JSDocInfo", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JSDocInfo.Visibility jSDocInfo_Visibility0 = JSDocInfo.Visibility.INHERITED;
      jSDocInfo0.setVisibility(jSDocInfo_Visibility0);
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.isExport();
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.isInterface();
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getEnumParameterType();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.isNoCompile();
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.setExport(false);
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setConstructor(false);
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node0 = Node.newString("mm)Dse#da");
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "mm)Dse#da");
      jSDocInfo0.setBaseType(jSTypeExpression0);
      boolean boolean0 = jSDocInfo0.hasBaseType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.isNoAlias();
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setMeaning("is_var_args_param");
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setInterface(false);
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.hasFileOverview();
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.isJavaDispatch();
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.isExpose();
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.setNoCheck(true);
      assertTrue(jSDocInfo0.isNoTypeCheck());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLendsName((String) null);
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.isIdGenerator();
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.isNoSideEffects();
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.isConstant();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setNoAlias(true);
      boolean boolean0 = jSDocInfo0.containsDeclaration();
      assertTrue(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isInterface());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getVisibility();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.isOverride();
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.isHidden();
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getThisType();
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setExterns(true);
      assertTrue(jSDocInfo0.isExterns());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.hasTypedefType());
      
      jSDocInfo0.setTypedefType((JSTypeExpression) null);
      boolean boolean0 = jSDocInfo0.containsDeclaration();
      assertTrue(jSDocInfo0.hasTypedefType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setEnumParameterType((JSTypeExpression) null);
      boolean boolean0 = jSDocInfo0.containsDeclaration();
      assertTrue(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setDeprecated(true);
      assertTrue(jSDocInfo0.isDeprecated());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setImplicitCast(false);
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setHidden(false);
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = jSDocInfo0.isConstructor();
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setDefine(true);
      boolean boolean0 = jSDocInfo0.isConstant();
      assertTrue(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConstructor());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.isImplicitCast();
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setIdGenerator(false);
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isIdGenerator());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setConsistentIdGenerator(false);
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.isConsistentIdGenerator();
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setNoSideEffects(false);
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      boolean boolean0 = jSDocInfo0.isExterns();
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setJavaDispatch(false);
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.setShouldPreserveTry(true);
      assertTrue(jSDocInfo0.shouldPreserveTry());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getReturnType();
      assertFalse(jSDocInfo0.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense((String) null);
      assertFalse(jSDocInfo0.isConstant());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setType((JSTypeExpression) null);
      boolean boolean0 = jSDocInfo0.containsDeclaration();
      assertFalse(jSDocInfo0.hasReturnType());
      assertTrue(jSDocInfo0.hasType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setNoShadow(true);
      assertTrue(jSDocInfo0.isNoShadow());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "Not declared as a constructor");
      jSDocInfo0.setReturnType(jSTypeExpression0);
      jSDocInfo0.getTypeNodes();
      assertTrue(jSDocInfo0.hasReturnType());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      boolean boolean0 = jSDocInfo0.isDeprecated();
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSDocInfo.TypePosition jSDocInfo_TypePosition0 = new JSDocInfo.TypePosition();
      boolean boolean0 = jSDocInfo_TypePosition0.hasBrackets();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSDocInfo.TypePosition jSDocInfo_TypePosition0 = new JSDocInfo.TypePosition();
      jSDocInfo_TypePosition0.setHasBrackets(false);
      assertFalse(jSDocInfo_TypePosition0.hasBrackets());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSDocInfo.Marker jSDocInfo_Marker0 = new JSDocInfo.Marker();
      SourcePosition<Node> sourcePosition0 = jSDocInfo_Marker0.getNameNode();
      assertNull(sourcePosition0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSDocInfo.TypePosition jSDocInfo_TypePosition0 = new JSDocInfo.TypePosition();
      JSDocInfo.Marker jSDocInfo_Marker0 = new JSDocInfo.Marker();
      jSDocInfo_Marker0.setNameNode(jSDocInfo_TypePosition0);
      assertFalse(jSDocInfo_TypePosition0.hasBrackets());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSDocInfo.Marker jSDocInfo_Marker0 = new JSDocInfo.Marker();
      JSDocInfo.TypePosition jSDocInfo_TypePosition0 = jSDocInfo_Marker0.getType();
      assertNull(jSDocInfo_TypePosition0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSDocInfo.Marker jSDocInfo_Marker0 = new JSDocInfo.Marker();
      JSDocInfo.TrimmedStringPosition jSDocInfo_TrimmedStringPosition0 = new JSDocInfo.TrimmedStringPosition();
      jSDocInfo_Marker0.setAnnotation(jSDocInfo_TrimmedStringPosition0);
      assertEquals(0, jSDocInfo_TrimmedStringPosition0.getStartLine());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSDocInfo.TypePosition jSDocInfo_TypePosition0 = new JSDocInfo.TypePosition();
      JSDocInfo.Marker jSDocInfo_Marker0 = new JSDocInfo.Marker();
      jSDocInfo_Marker0.setType(jSDocInfo_TypePosition0);
      assertFalse(jSDocInfo_TypePosition0.hasBrackets());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSDocInfo.Marker jSDocInfo_Marker0 = new JSDocInfo.Marker();
      jSDocInfo_Marker0.setDescription((JSDocInfo.StringPosition) null);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSDocInfo.Marker jSDocInfo_Marker0 = new JSDocInfo.Marker();
      JSDocInfo.StringPosition jSDocInfo_StringPosition0 = jSDocInfo_Marker0.getDescription();
      assertNull(jSDocInfo_StringPosition0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSDocInfo.Marker jSDocInfo_Marker0 = new JSDocInfo.Marker();
      JSDocInfo.StringPosition jSDocInfo_StringPosition0 = jSDocInfo_Marker0.getAnnotation();
      assertNull(jSDocInfo_StringPosition0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSDocInfo.NamePosition jSDocInfo_NamePosition0 = new JSDocInfo.NamePosition();
      assertEquals(0, jSDocInfo_NamePosition0.getStartLine());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSDocInfo.TrimmedStringPosition jSDocInfo_TrimmedStringPosition0 = new JSDocInfo.TrimmedStringPosition();
      JSDocInfo.Marker jSDocInfo_Marker0 = new JSDocInfo.Marker();
      jSDocInfo_Marker0.setName(jSDocInfo_TrimmedStringPosition0);
      assertEquals(0, jSDocInfo_TrimmedStringPosition0.getPositionOnStartLine());
  }
}

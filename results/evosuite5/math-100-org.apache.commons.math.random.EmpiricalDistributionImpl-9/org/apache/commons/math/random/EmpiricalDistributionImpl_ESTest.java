/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 21:21:08 GMT 2019
 */

package org.apache.commons.math.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import org.apache.commons.math.random.EmpiricalDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class EmpiricalDistributionImpl_ESTest extends EmpiricalDistributionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      assertFalse(empiricalDistributionImpl0.isLoaded());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 0.3333333333333333;
      doubleArray0[3] = 2997.9589;
      empiricalDistributionImpl0.load(doubleArray0);
      double double0 = empiricalDistributionImpl0.getNextValue();
      assertEquals(0.13035612008409864, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl(1159);
      double[] doubleArray0 = new double[0];
      empiricalDistributionImpl0.load(doubleArray0);
      // Undeclared exception!
      try { 
        empiricalDistributionImpl0.getNextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No bin selected
         //
         verifyException("org.apache.commons.math.random.EmpiricalDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      try { 
        empiricalDistributionImpl0.getNextValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // distribution not loaded
         //
         verifyException("org.apache.commons.math.random.EmpiricalDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      assertFalse(empiricalDistributionImpl0.isLoaded());
      
      double[] doubleArray0 = new double[0];
      empiricalDistributionImpl0.load(doubleArray0);
      double[] doubleArray1 = new double[4];
      empiricalDistributionImpl0.load(doubleArray1);
      assertEquals(1000, empiricalDistributionImpl0.getBinCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/rRJUe,mV|>i0rRJUe,mV|>i");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "rRJUe,mV|>i");
      File file0 = MockFile.createTempFile("rRJUe,mV|>i", "rRJUe,mV|>i");
      try { 
        empiricalDistributionImpl0.load(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // For input string: \"rRJUe,mV|>i\"
         //
         verifyException("org.apache.commons.math.random.EmpiricalDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile("Gx.6dOS[", "Gx.6dOS[");
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl((-386));
      // Undeclared exception!
      try { 
        empiricalDistributionImpl0.load(file0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.random.EmpiricalDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      assertFalse(empiricalDistributionImpl0.isLoaded());
      
      File file0 = MockFile.createTempFile("Gaussian std dev must be > 0", "Gaussian std dev must be > 0");
      empiricalDistributionImpl0.load(file0);
      assertTrue(empiricalDistributionImpl0.isLoaded());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      empiricalDistributionImpl0.getBinStats();
      assertFalse(empiricalDistributionImpl0.isLoaded());
      assertEquals(1000, empiricalDistributionImpl0.getBinCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      empiricalDistributionImpl0.getSampleStats();
      assertFalse(empiricalDistributionImpl0.isLoaded());
      assertEquals(1000, empiricalDistributionImpl0.getBinCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      // Undeclared exception!
      try { 
        empiricalDistributionImpl0.getUpperBounds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.random.EmpiricalDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      boolean boolean0 = empiricalDistributionImpl0.isLoaded();
      assertFalse(boolean0);
      assertEquals(1000, empiricalDistributionImpl0.getBinCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      int int0 = empiricalDistributionImpl0.getBinCount();
      assertEquals(1000, int0);
      assertFalse(empiricalDistributionImpl0.isLoaded());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      double[] doubleArray0 = new double[4];
      empiricalDistributionImpl0.load(doubleArray0);
      double double0 = empiricalDistributionImpl0.getNextValue();
      assertEquals(0.0, double0, 0.01);
  }
}

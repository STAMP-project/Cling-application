/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 22:49:41 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.Visitor;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionType_ESTest extends FunctionType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.hasAnyTemplateInternal();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.toDebugHashCodeString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("0/I{@Qah.5^KNyV", (Node) null);
      functionType0.toDebugHashCodeString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = noResolvedType0.supAndInfHelper(noResolvedType1, true);
      functionType0.toDebugHashCodeString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      AllType allType0 = new AllType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "0/I{@Qah.5^KNyV");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) enumElementType0, (JSType) enumElementType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      functionType0.toDebugHashCodeString();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("FghX'", (Node) null);
      FunctionType functionType1 = functionType0.getSuperClassConstructor();
      functionType1.resolveInternal(simpleErrorReporter0, functionType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(noResolvedType0, noResolvedType0);
      functionType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.differsFrom(noType0);
      // Undeclared exception!
      try { 
        noType0.setImplicitPrototype(noType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.getImplementedInterfaces();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.resetImplicitPrototype(noType0, noType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      Node node0 = Node.newString((-1253), "prototype", 1, 1);
      noObjectType0.setPrototypeBasedOn((ObjectType) noObjectType0, node0);
      noObjectType0.setSource(node0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.getImplementedInterfaces();
      noType0.setSource((Node) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber(0.0, 302, 302);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.getImplementedInterfaces();
      noType0.setSource(node0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      noObjectType0.setSource((Node) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      jSTypeRegistry0.createFunctionTypeWithNewThisType(noObjectType0, noType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      functionType0.clearCachedValues();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, (JSType) numberType0, jSType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType1, functionType0);
      FunctionType functionType3 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType2, functionType2);
      functionType3.supAndInfHelper(functionType2, false);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType1, noType0);
      functionType2.supAndInfHelper(functionType1, true);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType("^9;WF\u0007[~G4M86eU", (Node) null, (Node) null, (JSType) unknownType0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType1 = noResolvedType0.getBindReturnType(0);
      functionType1.isSubtype(functionType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noResolvedType0, noResolvedType0);
      FunctionType functionType1 = functionType0.getBindReturnType(1);
      functionType0.isSubtype(functionType1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      AllType allType0 = new AllType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "0/I{@Qah.5^KNyV");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) enumElementType0, (JSType) enumElementType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      FunctionType functionType1 = jSTypeRegistry0.createInterfaceType("0/I{@Qah.5^KNyV", (Node) null);
      functionType0.isSubtype(functionType1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[0] = (JSType) numberType0;
      jSTypeArray0[1] = (JSType) numberType0;
      jSTypeArray0[2] = (JSType) numberType0;
      jSTypeArray0[3] = (JSType) numberType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(numberType0, jSTypeArray0);
      functionType0.toStringHelper(true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("FghX'", (Node) null);
      FunctionType functionType1 = functionType0.getSuperClassConstructor();
      functionType1.toStringHelper(true);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      functionType0.toStringHelper(true);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("REGEXP_FUNCTION_TYPE", (Node) null);
      functionType0.toStringHelper(false);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(noResolvedType0, noResolvedType0);
      functionType0.toStringHelper(false);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      FunctionType functionType0 = noObjectType0.supAndInfHelper(noType0, true);
      functionType0.toStringHelper(false);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      FunctionType functionType1 = jSTypeRegistry0.createInterfaceType(", ", (Node) null);
      ImmutableList<ObjectType> immutableList1 = ImmutableList.of((ObjectType) functionType0, (ObjectType) functionType1, (ObjectType) functionType0, (ObjectType) functionType1, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType1, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0);
      functionType1.setImplementedInterfaces(immutableList1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "Not declared as a constructor");
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(";?y)Hn|:", (Node) null);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, enumElementType0);
      functionType1.supAndInfHelper(functionType0, true);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("FghX'", (Node) null);
      FunctionType functionType1 = functionType0.getSuperClassConstructor();
      functionType0.isSubtype(functionType1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(noType0, noType0);
      noType0.supAndInfHelper(functionType0, false);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      FunctionType functionType0 = noObjectType0.supAndInfHelper(noType0, true);
      functionType0.getTopMostDefiningType("Named type with empty name component");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("FghX'", (Node) null);
      // Undeclared exception!
      try { 
        functionType0.getTopMostDefiningType("@sf_.G2)0&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "Not declared as a type name");
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) enumElementType0, (List<JSType>) immutableList0);
      // Undeclared exception!
      try { 
        functionType0.getTopMostDefiningType("Named type with empty name component");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.getTopMostDefiningType("Named type with empty name component");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      FunctionType.getTopDefiningInterface(noType0, "Not declared as a constructor");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "O0D:R=(?Q!BbhF{Y");
      FunctionType.getTopDefiningInterface(errorFunctionType0, "W1@nOT[a'}[U SU5j");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Y7jV.3D!(}F7", (Node) null);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (Node) null);
      // Undeclared exception!
      try { 
        functionType1.getSuperClassConstructor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      FunctionType functionType0 = noObjectType0.supAndInfHelper(noType0, true);
      functionType0.supAndInfHelper(noObjectType0, true);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      noResolvedType0.supAndInfHelper(functionType0, false);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      FunctionType functionType0 = noResolvedType0.supAndInfHelper(noObjectType0, true);
      noObjectType0.supAndInfHelper(functionType0, true);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node((-1208), 88, 2147483645);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) nullType0, (JSType) nullType0, (JSType) nullType0, (JSType) nullType0, (JSType) nullType0, (JSType) nullType0, (JSType) nullType0, (JSType) nullType0, (JSType) nullType0, (JSType) nullType0, (JSType) nullType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) nullType0, (List<JSType>) immutableList0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "M8GiEd>J n}@u,", node0, functionType0);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) enumType0, jSTypeArray0);
      functionType1.supAndInfHelper(functionType0, true);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
      functionType0.supAndInfHelper(functionType1, true);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
      functionType0.supAndInfHelper(functionType1, false);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      AllType allType0 = new AllType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "0/I{@Qah.5^KNyV");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) enumElementType0, (JSType) enumElementType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      FunctionType functionType1 = jSTypeRegistry0.createInterfaceType("0/I{@Qah.5^KNyV", (Node) null);
      FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType1, allType0);
      functionType2.supAndInfHelper(functionType0, true);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "Not declared as a type name");
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) enumElementType0, (List<JSType>) immutableList0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, allType0);
      functionType0.supAndInfHelper(functionType1, false);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, (JSType) numberType0, jSType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
      functionType0.supAndInfHelper(functionType1, false);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "UNKNOWN_TYPE");
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "collection is empty; use the other version of this method", templateType0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) prototypeObjectType0, (JSType) templateType0, (JSType) templateType0, (JSType) prototypeObjectType0, (JSType) prototypeObjectType0, (JSType) prototypeObjectType0, (JSType) templateType0, (JSType) prototypeObjectType0, (JSType) templateType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType0 = unionType0.findPropertyType("OBJECT_FUNCTION_TYPE");
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      functionType1.supAndInfHelper(functionType0, false);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "Not declared as a constructor");
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      errorFunctionType0.defineSynthesizedProperty("Named type with empty name component", enumElementType0, (Node) null);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      errorFunctionType0.getBindReturnType(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getBindReturnType(88);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.getBindReturnType((-2046041822));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(":ch&V", (Node) null);
      // Undeclared exception!
      try { 
        functionType0.setExtendedInterfaces((List<ObjectType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      try { 
        noType0.setExtendedInterfaces((List<ObjectType>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getAllExtendedInterfaces();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "l(C");
      errorFunctionType0.getAllImplementedInterfaces();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      NoType noType1 = new NoType(jSTypeRegistry0);
      FunctionType functionType0 = noType1.supAndInfHelper(noType0, false);
      functionType0.getAllImplementedInterfaces();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("FghX'", (Node) null);
      FunctionType functionType1 = functionType0.getSuperClassConstructor();
      functionType1.setPrototypeBasedOn((ObjectType) functionType0, (Node) null);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("REGEXP_FUNCTION_TYPE", (Node) null);
      functionType0.setPrototype((ObjectType) null, (Node) null);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isInterface());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isNoObjectType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      Set<String> set0 = noType0.getOwnPropertyNames();
      assertNotNull(set0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isInterface());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isNoObjectType());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("FghX'", (Node) null);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      FunctionType functionType1 = functionType0.getSuperClassConstructor();
      assertFalse(functionType1.equals((Object)functionType0));
      assertNotNull(functionType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isNoResolvedType());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isVoidType());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isStringValueType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isEnumType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.isConstructor());
      assertTrue(functionType1.isNominalConstructor());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNoObjectType());
      assertTrue(functionType1.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      
      Set<String> set0 = functionType0.getOwnPropertyNames();
      assertFalse(functionType0.equals((Object)functionType1));
      assertNotNull(set0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isResolved());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertFalse(set0.contains("FghX'"));
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "0/IQah.5^QKNyV");
      assertNotNull(enumElementType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertEquals("0/IQah.5^QKNyV", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.hasReferenceName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) enumElementType0, (JSType) enumElementType0);
      assertNotNull(immutableList0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertEquals("0/IQah.5^QKNyV", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.hasReferenceName());
      assertEquals(3, immutableList0.size());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      assertNotNull(functionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertEquals("0/IQah.5^QKNyV", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.hasReferenceName());
      assertEquals(3, immutableList0.size());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isStringValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType0 = (UnknownType)functionType0.getPropertyType("prototype");
      assertNotNull(unknownType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertEquals("0/IQah.5^QKNyV", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.hasReferenceName());
      assertEquals(3, immutableList0.size());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isStringValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.canBeCalled());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNominalConstructor());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.hasReferenceName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "l(C");
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      int int0 = errorFunctionType0.getMaxArguments();
      assertEquals(3, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      int int0 = noResolvedType0.getMaxArguments();
      assertEquals(Integer.MAX_VALUE, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("0/I{@Qah.5^KNyV", (Node) null);
      assertNotNull(functionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      int int0 = functionType0.getMaxArguments();
      assertEquals(0, int0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isNominalType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumElementType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      int int0 = noType0.getMinArguments();
      assertEquals(0, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isNominalType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumElementType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isVoidType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isVoidType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertEquals(3, immutableList0.size());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isVoidType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertEquals(3, immutableList0.size());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      int int0 = functionType0.getMinArguments();
      assertEquals(3, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isVoidType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertEquals(3, immutableList0.size());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      int int0 = errorFunctionType0.getMinArguments();
      assertEquals(0, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.collect.AbstractListMultimap");
      assertNotNull(errorFunctionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = errorFunctionType0.hasImplementedInterfaces();
      assertFalse(boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNominalType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNominalType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(3, immutableList0.size());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNominalType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(3, immutableList0.size());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = functionType0.hasImplementedInterfaces();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNominalType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(3, immutableList0.size());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.canBeCalled());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      FunctionType functionType0 = noObjectType0.supAndInfHelper(noType0, true);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.canBeCalled());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      FunctionType functionType1 = functionType0.supAndInfHelper(noObjectType0, false);
      assertNotNull(functionType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.canBeCalled());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(functionType1.matchesNumberContext());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isNominalConstructor());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.matchesStringContext());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertEquals(Integer.MAX_VALUE, functionType1.getPropertiesCount());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isVoidType());
      assertTrue(functionType1.isNoObjectType());
      assertTrue(functionType1.hasInstanceType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.matchesObjectContext());
      assertFalse(functionType1.isNominalType());
      assertNull(functionType1.getReferenceName());
      assertFalse(functionType1.isOrdinaryFunction());
      assertTrue(functionType1.isConstructor());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isFunctionType());
      assertFalse(functionType1.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(noObjectType0, functionType1);
      assertSame(functionType1, noObjectType0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("FghX'", (Node) null);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      FunctionType functionType1 = functionType0.supAndInfHelper(functionType0, false);
      assertNotNull(functionType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isResolved());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.isFunctionType());
      assertTrue(functionType1.isInterface());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isAllType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNominalConstructor());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(functionType0, functionType1);
      assertSame(functionType1, functionType0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.canBeCalled());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.canBeCalled());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertEquals(4, immutableList0.size());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.canBeCalled());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertEquals(4, immutableList0.size());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertEquals(4, node0.getChildCount());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createInterfaceType("Unknown class name", node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = new Node(105);
      assertNotNull(node0);
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isFunction());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals(105, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isString());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try { 
        FunctionType.forInterface(jSTypeRegistry0, (String) null, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      Node node0 = Node.newNumber((double) 0);
      assertNotNull(node0);
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createConstructorType("valueOf", node0, node0, (JSType) noResolvedType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      List<FunctionType> list0 = noObjectType0.getSubTypes();
      assertNull(list0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Unknown class name", (Node) null);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNullType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      Iterable<ObjectType> iterable0 = functionType0.getOwnImplementedInterfaces();
      assertNotNull(iterable0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNullType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNominalType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      int int0 = noType0.getExtendedInterfacesCount();
      assertEquals(0, int0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNominalType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isInterface());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = noObjectType0.canBeCalled();
      assertTrue(boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isInterface());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isResolved());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isResolved());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertEquals(3, immutableList0.size());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isResolved());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertEquals(3, immutableList0.size());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = functionType0.isInstanceType();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isResolved());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertEquals(3, immutableList0.size());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasInstanceType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.hasInstanceType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = noType0.isReturnTypeInferred();
      assertFalse(boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.hasInstanceType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) instanceObjectType0, (JSType) numberType0, (JSType) instanceObjectType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) instanceObjectType0, (List<JSType>) immutableList0);
      functionType0.hasEqualCallType(functionType0);
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(instanceObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[6] = (JSType) noType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(noType0, jSTypeArray0);
      Visitor<EnumElementType> visitor0 = (Visitor<EnumElementType>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(visitor0).caseFunctionType(any(com.google.javascript.rhino.jstype.FunctionType.class));
      functionType0.visit(visitor0);
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isInterface());
  }
}

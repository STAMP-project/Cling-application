/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 22:34:28 GMT 2019
 */

package com.google.javascript.rhino.head.regexp;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.Callable;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.Synchronizer;
import com.google.javascript.rhino.head.regexp.NativeRegExp;
import com.google.javascript.rhino.head.regexp.RECompiled;
import com.google.javascript.rhino.head.regexp.RegExpImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NativeRegExp_ESTest extends NativeRegExp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      
      int int0 = nativeRegExp0.findPrototypeId("compile");
      assertEquals(1, int0);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      
      int int0 = nativeRegExp0.findPrototypeId("Vultline");
      assertEquals(0, int0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      
      int int0 = nativeRegExp0.findPrototypeId("a~rCoeAt");
      assertEquals(0, int0);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      
      int int0 = nativeRegExp0.findPrototypeId("oext");
      assertEquals(0, int0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      
      int int0 = nativeRegExp0.findPrototypeId("atan2");
      assertEquals(0, int0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeRegExp0, nativeRegExp0, nativeRegExp0.MATCH, nativeRegExp0.READONLY);
      assertNotNull(idFunctionObject0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("", idFunctionObject0.getFunctionName());
      assertTrue(idFunctionObject0.isEmpty());
      assertFalse(idFunctionObject0.isSealed());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(1, idFunctionObject0.methodId());
      assertEquals(1, idFunctionObject0.getLength());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals(1, idFunctionObject0.getArity());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals("Function", idFunctionObject0.getClassName());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.execIdCall(idFunctionObject0, context0, nativeRegExp0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      
      nativeRegExp0.activatePrototypeMap(42);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertTrue(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isExtensible());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.getIds();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.setInstanceIdValue(486, nativeRegExp0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 486
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      
      BaseFunction baseFunction0 = new BaseFunction();
      assertNotNull(baseFunction0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertFalse(baseFunction0.isSealed());
      assertTrue(baseFunction0.isEmpty());
      
      nativeRegExp0.setInstanceIdValue(5, baseFunction0);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertFalse(baseFunction0.isSealed());
      assertTrue(baseFunction0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      
      nativeRegExp0.setInstanceIdValue(4, context0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      
      NativeObject nativeObject0 = new NativeObject();
      assertNotNull(nativeObject0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.avoidObjectDetection());
      
      nativeRegExp0.setInstanceIdValue(3, nativeObject0);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.enter();
      assertNotNull(context0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      
      nativeRegExp0.setInstanceIdValue(2, context0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      
      RECompiled rECompiled0 = new RECompiled();
      assertNotNull(rECompiled0);
      
      nativeRegExp0.setInstanceIdValue(1, rECompiled0);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, (Scriptable) null, context0.emptyArgs);
      assertNotNull(nativeRegExp1);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertTrue(nativeRegExp1.isExtensible());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertTrue(nativeRegExp1.isEmpty());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertFalse(nativeRegExp1.isSealed());
      
      Boolean boolean0 = (Boolean)nativeRegExp0.getInstanceIdValue(5);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isEmpty());
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, (Scriptable) null, context0.emptyArgs);
      assertNotNull(nativeRegExp1);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertTrue(nativeRegExp1.isEmpty());
      assertFalse(nativeRegExp1.isSealed());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertTrue(nativeRegExp1.isExtensible());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      
      Boolean boolean0 = (Boolean)nativeRegExp0.getInstanceIdValue(4);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, importerTopLevel0, context0.emptyArgs);
      assertNotNull(nativeRegExp1);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertTrue(nativeRegExp1.isExtensible());
      assertFalse(nativeRegExp1.isSealed());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertTrue(nativeRegExp1.isEmpty());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      
      Boolean boolean0 = (Boolean)nativeRegExp0.getInstanceIdValue(3);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.getInstanceIdValue(13);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 13
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.getInstanceIdValue(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      
      Object object0 = nativeRegExp0.getInstanceIdValue(1);
      assertNotNull(object0);
      assertEquals(0.0, object0);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.getInstanceIdName(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      
      int int0 = nativeRegExp0.findInstanceIdInfo("}V+5,C|fyl");
      assertEquals(0, int0);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      
      Class<NativeCall> class0 = NativeCall.class;
      NativeCall nativeCall0 = ScriptableObject.getTypedProperty((Scriptable) nativeRegExp0, "!?C_G]w4{", class0);
      assertNull(nativeCall0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      Context context0 = contextFactory0.enter();
      assertNotNull(context0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      
      NativeObject nativeObject0 = (NativeObject)context0.newObject((Scriptable) nativeRegExp0);
      assertNotNull(nativeObject0);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertTrue(nativeObject0.isEmpty());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test23()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertTrue(nativeRegExp0.isEmpty());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("language version");
      assertNotNull(nativeJavaPackage0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertFalse(nativeJavaPackage0.isSealed());
      assertTrue(nativeJavaPackage0.isEmpty());
      
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, nativeJavaPackage0, context0.emptyArgs);
      assertNotNull(nativeRegExp1);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertFalse(nativeJavaPackage0.isSealed());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertTrue(nativeRegExp1.isEmpty());
      assertFalse(nativeRegExp1.isSealed());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertTrue(nativeRegExp1.isExtensible());
      
      RegExpImpl regExpImpl0 = new RegExpImpl();
      assertNotNull(regExpImpl0);
      
      int[] intArray0 = new int[5];
      NativeArray nativeArray0 = (NativeArray)nativeRegExp0.executeRegExp(context0, nativeRegExp1, regExpImpl0, "error reporter", intArray0, (-2));
      assertNotNull(nativeArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(5, intArray0.length);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertFalse(nativeJavaPackage0.isSealed());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertTrue(nativeRegExp1.isEmpty());
      assertFalse(nativeRegExp1.isSealed());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertTrue(nativeRegExp1.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(1L, nativeArray0.getLength());
      assertFalse(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(1L, nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      
      NativeArray nativeArray1 = (NativeArray)nativeRegExp0.executeRegExp(context0, nativeRegExp1, regExpImpl0, "language version", intArray0, 1);
      assertNotNull(nativeArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertFalse(nativeArray1.equals((Object)nativeArray0));
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(5, intArray0.length);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertNotSame(nativeArray1, nativeArray0);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertFalse(nativeJavaPackage0.isSealed());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertTrue(nativeRegExp1.isEmpty());
      assertFalse(nativeRegExp1.isSealed());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertTrue(nativeRegExp1.isExtensible());
      assertFalse(nativeArray1.avoidObjectDetection());
      assertFalse(nativeArray1.isSealed());
      assertEquals(1L, nativeArray1.jsGet_length());
      assertEquals("Array", nativeArray1.getClassName());
      assertEquals("object", nativeArray1.getTypeOf());
      assertEquals(1L, nativeArray1.getLength());
      assertFalse(nativeArray1.hasPrototypeMap());
      assertTrue(nativeArray1.isExtensible());
      assertFalse(nativeArray1.isEmpty());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test24()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("6]K^?A>wnW");
      assertNotNull(nativeJavaPackage0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.isSealed());
      
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, nativeJavaPackage0, context0.emptyArgs);
      assertNotNull(nativeRegExp1);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.isSealed());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertFalse(nativeRegExp1.isSealed());
      assertTrue(nativeRegExp1.isEmpty());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertTrue(nativeRegExp1.isExtensible());
      
      RegExpImpl regExpImpl0 = new RegExpImpl();
      assertNotNull(regExpImpl0);
      
      int[] intArray0 = new int[1];
      Boolean boolean0 = (Boolean)nativeRegExp0.executeRegExp(context0, nativeJavaPackage0, regExpImpl0, "d-T5-mM}{r_Jdhkdp}", intArray0, 0);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, intArray0.length);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.isSealed());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      
      RegExpImpl regExpImpl0 = new RegExpImpl();
      assertNotNull(regExpImpl0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 130;
      // Undeclared exception!
      try { 
        nativeRegExp0.executeRegExp(context0, importerTopLevel0, regExpImpl0, "language version", intArray0, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      
      Object object0 = NativeRegExp.compileRE(context0, "/',nunhzBx+Bajbb", (String) null, false);
      assertNotNull(object0);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      
      Object object0 = NativeRegExp.compileRE(context0, "k;wB*8", (String) null, true);
      assertNotNull(object0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      
      Object object0 = NativeRegExp.compileRE(context0, ";kho| 3?", "ii", true);
      assertNotNull(object0);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, "LJG2=(F)24{", "", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test30()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, "8&dI+kzw \"mI(T", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: Unterminated parenthetical 
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      
      Object object0 = NativeRegExp.compileRE(context0, ".mA_E3:K?M>o't", (String) null, false);
      assertNotNull(object0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, "*]7~s{?@RnCU", (String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: Invalid quantifier *
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = NativeRegExp.isDigit('P');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = NativeRegExp.isDigit('5');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      Context context0 = contextFactory0.enter();
      assertNotNull(context0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      
      Object object0 = NativeRegExp.compileRE(context0, "~", "ii", true);
      assertNotNull(object0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      
      Object object0 = NativeRegExp.compileRE(context0, "n", "", false);
      assertNotNull(object0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertNotNull(importerTopLevel0);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      
      Synchronizer synchronizer0 = new Synchronizer((Scriptable) null, importerTopLevel0);
      assertNotNull(synchronizer0);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) importerTopLevel0;
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, synchronizer0, objectArray0);
      assertNotNull(nativeRegExp1);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, objectArray0.length);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(nativeRegExp1.isSealed());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertTrue(nativeRegExp1.isEmpty());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertTrue(nativeRegExp1.isExtensible());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertFalse(nativeRegExp1.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test38()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      
      Object object0 = NativeRegExp.compileRE(context0, "", "", true);
      assertNotNull(object0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, "language version", "mef#yo1SYS9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: invalid flag after regular expression
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, "error reporter", "ignoreCase", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: invalid flag after regular expression
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test41()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage(",", classLoader0);
      assertNotNull(nativeJavaPackage0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isSealed());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, nativeJavaPackage0, context0.emptyArgs);
      assertNotNull(nativeRegExp1);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isSealed());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertTrue(nativeRegExp1.isExtensible());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertTrue(nativeRegExp1.isEmpty());
      assertFalse(nativeRegExp1.isSealed());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        nativeRegExp1.construct(context0, nativeJavaPackage0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      assertNotNull(nativeArray0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, objectArray0.length);
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(1L, nativeArray0.getLength());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(1L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile((Context) null, nativeArray0, objectArray0);
      assertNotNull(nativeRegExp1);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, objectArray0.length);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(1L, nativeArray0.getLength());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(1L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertFalse(nativeRegExp1.isSealed());
      assertTrue(nativeRegExp1.isExtensible());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertTrue(nativeRegExp1.isEmpty());
      
      String string0 = nativeRegExp0.toString();
      assertNotNull(string0);
      assertEquals("/null/", string0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      
      Synchronizer synchronizer0 = new Synchronizer(nativeRegExp0);
      assertNotNull(synchronizer0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, synchronizer0, context0.emptyArgs);
      assertNotNull(nativeRegExp1);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(nativeRegExp1.isExtensible());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertTrue(nativeRegExp1.isEmpty());
      assertFalse(nativeRegExp1.isSealed());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      
      String string0 = nativeRegExp0.toString();
      assertNotNull(string0);
      assertEquals("/(?:)/", string0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        nativeRegExp0.compile((Context) null, nativeRegExp0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: invalid flag after regular expression
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) nativeRegExp0;
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile((Context) null, nativeRegExp0, objectArray0);
      assertNotNull(nativeRegExp1);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, objectArray0.length);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp1.isEmpty());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertTrue(nativeRegExp1.isExtensible());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertFalse(nativeRegExp1.isSealed());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) nativeRegExp0;
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      assertNotNull(nativeArray0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, objectArray0.length);
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(4L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(4L, nativeArray0.getLength());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.compile((Context) null, nativeArray0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Only one argument may be specified if the first argument to RegExp.prototype.compile is a RegExp object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      assertFalse(importerTopLevel0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage(",", classLoader0);
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        nativeRegExp0.construct(context0, nativeJavaPackage0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      String string0 = nativeRegExp0.getClassName();
      assertEquals("RegExp", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      Object[] objectArray0 = nativeRegExp0.getIds();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        Context.call((ContextFactory) null, (Callable) nativeRegExp0, (Scriptable) nativeRegExp0, (Scriptable) null, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      String string0 = nativeRegExp0.getTypeOf();
      assertEquals("object", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      // Undeclared exception!
      try { 
        nativeRegExp0.getFlags();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      NativeRegExp nativeRegExp1 = null;
      try {
        nativeRegExp1 = new NativeRegExp(nativeRegExp0, "text");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.google.javascript.rhino.head.regexp.RECompiled
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, "p[JPh)6#/AKu83U?|", (String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: Unterminated character class 
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }
}

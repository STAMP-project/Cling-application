/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 13:49:25 GMT 2019
 */

package org.mockito.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.Attribute;
import org.mockito.asm.ClassReader;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.Item;
import org.mockito.asm.MethodWriter;
import org.mockito.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-341));
      classWriter0.visitOuterClass("}vL 4s=z<tW", "yG[_,", ":'O8YZ");
      classWriter0.visitInnerClass("LineNumberTable", "(zr>y|QVe|EN2k2\"mY", "", 10);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      String string0 = classWriter0.getCommonSuperClass("org.mockito.asm.ClassAdapter", "java/lang/Object");
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(268435455);
      String string0 = classWriter0.getCommonSuperClass("org.mockito.asm.AnnotationWriter", "org.mockito.asm.AnnotationWriter");
      assertEquals("org.mockito.asm.AnnotationWriter", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-540));
      String string0 = classWriter0.getCommonSuperClass("org.mockito.asm.AnnotationWriter", "org.mockito.asm.ClassAdapter");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(182);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(182, (-6337));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(292552704);
      Item[] itemArray0 = new Item[1];
      classWriter0.typeTable = itemArray0;
      int int0 = classWriter0.addUninitializedType(";z]X:.$Oswy`~<V", 292552704);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4703);
      int int0 = classWriter0.addUninitializedType("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", 4703);
      assertEquals(1, int0);
      
      int int1 = classWriter0.addUninitializedType("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", 4703);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(100);
      int int0 = classWriter0.addType("value ");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("value ");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-285));
      classWriter0.visitOuterClass("_,,", "_,,", "_,,");
      classWriter0.visitOuterClass("_,,", "_,,", "_,,");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Item item0 = classWriter0.newDouble(0);
      Item item1 = classWriter0.newDouble(0.0);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(25);
      Item item0 = classWriter0.newFloat(0.0F);
      Item item1 = classWriter0.newFloat(0.0F);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-332));
      Item item0 = classWriter0.newInteger(2235);
      Item item1 = classWriter0.newInteger(2235);
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      Item item0 = classWriter0.newMethodItem("", "", "", false);
      Item item1 = classWriter0.newMethodItem("", "", "", false);
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-332));
      Type type0 = Type.LONG_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      Item item0 = classWriter0.key;
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.Item@2
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Type type0 = Type.getObjectType("RuntimeVisibleAnnotations");
      ClassWriter classWriter0 = new ClassWriter(6);
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1389);
      Double double0 = new Double(1389);
      Item item0 = classWriter0.newConstItem(double0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4703);
      Long long0 = new Long((-548L));
      Item item0 = classWriter0.newConstItem(long0);
      Item item1 = classWriter0.newConstItem(long0);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-332));
      Float float0 = new Float((float) (-332));
      Item item0 = classWriter0.newConstItem(float0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      Boolean boolean0 = Boolean.TRUE;
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      Boolean boolean0 = Boolean.FALSE;
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      Short short0 = new Short((short)3);
      Item item0 = classWriter0.newConstItem(short0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      Character character0 = new Character('a');
      Item item0 = classWriter0.newConstItem(character0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-330));
      Item item0 = classWriter0.newConstItem(classWriter0.COMPUTE_MAXS);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3454);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-332));
      classWriter0.visit(2, (-332), ";4S!Kc1&={_!F", "", "6q%$y\"`bznP(mYE,nPT", (String[]) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(128, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(41);
      classWriter0.visitSource("", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(77, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3235));
      classWriter0.visitSource("@~1Y>XLv;i]5Darf7.Y", (String) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(67, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(260);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "ot6enZM|u4k?/", "ot6enZM|u4k?/", "ot6enZM|u4k?/", (String[]) null, false, false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(68, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, (-4));
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(55, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-341));
      classWriter0.visitInnerClass("double", "", "0f%eIqBMv+G<o,:", (-341));
      classWriter0.visitInnerClass("LineNumberTable", "(zr>y|QVe|EN2k2\"mY", "", 10);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-295));
      classWriter0.visitAnnotation("", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(67, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-330));
      classWriter0.visitAnnotation("1^3]xSA[\"KIF ]p(e", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(86, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(292552704);
      classWriter0.visitOuterClass("'^Lf&mklg4vq bnvt", "'^Lf&mklg4vq bnvt", "'^Lf&mklg4vq bnvt");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(80, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1995);
      classWriter0.visitOuterClass("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.visitOuterClass("t", (String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-540));
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-332));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.mockito.asm.ClassReader";
      classWriter0.visit((-332), (-332), "M.3+<APsYJ", "M.3+<APsYJ", "M.3+<APsYJ", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(114, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2007));
      String[] stringArray0 = new String[0];
      classWriter0.visit(1517, 1517, "", "", "", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visit(759, 2, ",]}1#N-g9yw)*Y{%", (String) null, (String) null, (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-551));
      classWriter0.visitField((-551), "_&7o\"!Kb", "_&7o\"!Kb", "_&7o\"!Kb", (Object) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(100, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(182);
      classWriter0.newConst("");
      Item item0 = classWriter0.newConstItem("");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-578));
      int int0 = classWriter0.newMethod("Cz(UtqE", "Cz(UtqE", "Cz(UtqE", true);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(11);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        classWriter0.visitMethod((-650), "", "", "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1657));
      Attribute attribute0 = new Attribute("j");
      classWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(292552704);
      int int0 = classWriter0.newField("EnclosingMethod", "", "EnclosingMethod");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(182);
      Item item0 = classWriter0.newFieldItem("", "", "");
      Item item1 = classWriter0.newFieldItem("", "", "");
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.mockito.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      Byte byte0 = new Byte((byte)15);
      Item item0 = classWriter0.newConstItem(byte0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-28));
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }
}

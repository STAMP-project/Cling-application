/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 07:32:48 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.Callable;
import com.google.javascript.rhino.head.ClassShutter;
import com.google.javascript.rhino.head.CompilerEnvirons;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextAction;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.ContextListener;
import com.google.javascript.rhino.head.DefaultErrorReporter;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Evaluator;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.Function;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.InterpretedFunction;
import com.google.javascript.rhino.head.Interpreter;
import com.google.javascript.rhino.head.InterpreterData;
import com.google.javascript.rhino.head.MemberBox;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeDate;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.PolicySecurityController;
import com.google.javascript.rhino.head.RegExpProxy;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.SecurityController;
import com.google.javascript.rhino.head.Synchronizer;
import com.google.javascript.rhino.head.TopLevel;
import com.google.javascript.rhino.head.WrapFactory;
import com.google.javascript.rhino.head.debug.DebuggableScript;
import com.google.javascript.rhino.head.debug.Debugger;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.InvocationTargetException;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Context_ESTest extends Context_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test000()  throws Throwable  {
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        context0.removeActivationName("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Context context0 = new Context();
      context0.removeActivationName("Z+tJgVRW#Qe1eeIO-");
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test002()  throws Throwable  {
      Context context0 = Context.enter();
      boolean boolean0 = context0.isActivationNeeded("error reporter");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      boolean boolean0 = context0.isActivationNeeded("language version");
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test004()  throws Throwable  {
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        context0.addActivationName("*7cxQ5[V&Z3");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Context context0 = new Context();
      context0.addActivationName("QSbUv6");
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Context context0 = Context.enter();
      boolean boolean0 = context0.isVersionECMA1();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      boolean boolean0 = context0.isVersionECMA1();
      assertTrue(boolean0);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Context context0 = new Context();
      RegExpProxy regExpProxy0 = context0.getRegExpProxy();
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(regExpProxy0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test009()  throws Throwable  {
      Context context0 = Context.enter();
      context0.getRegExpProxy();
      assertTrue(context0.generateObserverCount);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test010()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        context0.compileFunction(nativeIterator_StopIteration0, "Context.java.java", "Context.java.java", 2, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // compileFunction only accepts source with single JS function: Context.java.java
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test011()  throws Throwable  {
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        context0.compileFunction((Scriptable) null, "error reporter", "error reporter", 2, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test012()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        context0.compileFunction(nativeIterator_StopIteration0, "", "", 2, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // compileFunction only accepts source with single JS function: 
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test013()  throws Throwable  {
      Context context0 = new Context();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        context0.setApplicationClassLoader(classLoader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Loader can not resolve Rhino classes
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test014()  throws Throwable  {
      Context context0 = Context.getContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      // Undeclared exception!
      try { 
        context0.setApplicationClassLoader(classLoader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Context context0 = new Context();
      context0.setApplicationClassLoader((ClassLoader) null);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Context context0 = new Context();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      assertNotNull(classLoader0);
      
      context0.setApplicationClassLoader(classLoader0);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.generateObserverCount);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Context context0 = new Context();
      context0.setInstructionObserverThreshold(0);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        context0.setInstructionObserverThreshold((-1962));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test019()  throws Throwable  {
      Context context0 = Context.enter();
      assertFalse(context0.generateObserverCount);
      
      // Undeclared exception!
      try { 
        context0.setInstructionObserverThreshold(12);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test020()  throws Throwable  {
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      DebuggableScript debuggableScript0 = Context.getDebuggableView(interpretedFunction0);
      assertNull(debuggableScript0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DebuggableScript debuggableScript0 = Context.getDebuggableView((Script) null);
      assertNull(debuggableScript0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test022()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        context0.setDebugger((Debugger) null, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Context context0 = new Context();
      context0.setDebugger((Debugger) null, (Object) null);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.generateObserverCount);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Context context0 = new Context();
      WrapFactory wrapFactory0 = context0.getWrapFactory();
      assertNotNull(wrapFactory0);
      
      context0.setWrapFactory(wrapFactory0);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test025()  throws Throwable  {
      Context context0 = Context.enter();
      WrapFactory wrapFactory0 = new WrapFactory();
      // Undeclared exception!
      try { 
        context0.setWrapFactory(wrapFactory0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        context0.setWrapFactory((WrapFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockError mockError0 = new MockError();
      Context context0 = new Context();
      context0.putThreadLocal(mockError0, mockError0);
      context0.removeThreadLocal(mockError0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test028()  throws Throwable  {
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        context0.removeThreadLocal(context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockError mockError0 = new MockError();
      Context context0 = new Context();
      context0.removeThreadLocal(mockError0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Context context0 = new Context();
      Byte byte0 = new Byte((byte) (-9));
      context0.putThreadLocal(byte0, byte0);
      context0.putThreadLocal(byte0, byte0);
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test031()  throws Throwable  {
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        context0.putThreadLocal("language version", "language version");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Context context0 = new Context();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      context0.getThreadLocal(nativeJavaClass0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Context context0 = new Context();
      context0.putThreadLocal(context0, context0);
      Context context1 = (Context)context0.getThreadLocal(context0);
      assertEquals(0, context1.getLanguageVersion());
      assertNotNull(context1);
      assertTrue(context1.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getOptimizationLevel());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test034()  throws Throwable  {
      Context context0 = Context.enter();
      Context.ClassShutterSetter context_ClassShutterSetter0 = context0.getClassShutterSetter();
      assertNull(context_ClassShutterSetter0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test035()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        context0.setClassShutter((ClassShutter) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        context0.setClassShutter((ClassShutter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PolicySecurityController policySecurityController0 = new PolicySecurityController();
      SecurityController.initGlobal(policySecurityController0);
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        context0.setSecurityController(policySecurityController0);
        fail("Expecting exception: SecurityException");
      
      } catch(SecurityException e) {
         //
         // Can not overwrite existing global SecurityController object
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test038()  throws Throwable  {
      Context context0 = new Context();
      PolicySecurityController policySecurityController0 = new PolicySecurityController();
      context0.setSecurityController(policySecurityController0);
      // Undeclared exception!
      try { 
        context0.setSecurityController(policySecurityController0);
        fail("Expecting exception: SecurityException");
      
      } catch(SecurityException e) {
         //
         // Can not overwrite existing SecurityController object
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        context0.setSecurityController((SecurityController) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test040()  throws Throwable  {
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        context0.setSecurityController((SecurityController) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test041()  throws Throwable  {
      PolicySecurityController policySecurityController0 = new PolicySecurityController();
      Context context0 = new Context();
      context0.setSecurityController(policySecurityController0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Object;
      Function function0 = TopLevel.getBuiltinCtor(context0, (Scriptable) importerTopLevel0, topLevel_Builtins0);
      Scriptable scriptable0 = TopLevel.getBuiltinPrototype((Scriptable) function0, topLevel_Builtins0);
      StringReader stringReader0 = new StringReader("error reporter");
      // Undeclared exception!
      try { 
        context0.evaluateReader(scriptable0, stringReader0, "language version", 8, stringReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement (language version#8)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Context context0 = new Context();
      context0.setOptimizationLevel((-1));
      context0.setMaximumInterpreterStackDepth(8);
      assertEquals(8, context0.getMaximumInterpreterStackDepth());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test043()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        context0.setMaximumInterpreterStackDepth(170);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        context0.setMaximumInterpreterStackDepth((-3387));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot set maximumInterpreterStackDepth when optimizationLevel != -1
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        Context.checkOptimizationLevel((-306));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Optimization level outside [-1..9]: -306
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Context context0 = new Context();
      context0.setOptimizationLevel((-1));
      // Undeclared exception!
      try { 
        context0.setMaximumInterpreterStackDepth((-3387));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot set maximumInterpreterStackDepth to less than 1
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test047()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertEquals(0, context0.getOptimizationLevel());
      
      // Undeclared exception!
      try { 
        context0.setOptimizationLevel(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        context0.setOptimizationLevel(2343);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Optimization level outside [-1..9]: 2343
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test049()  throws Throwable  {
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        context0.setGeneratingSource(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Context context0 = new Context();
      context0.setGeneratingSource(true);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Context context0 = new Context();
      context0.setGeneratingDebug(false);
      assertFalse(context0.generateObserverCount);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test052()  throws Throwable  {
      Context context0 = Context.enter();
      assertFalse(context0.isGeneratingDebugChanged());
      
      // Undeclared exception!
      try { 
        context0.setGeneratingDebug(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Context context0 = new Context();
      context0.setGeneratingDebug(true);
      assertTrue(context0.isGeneratingDebugChanged());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        Context.throwAsScriptRuntimeEx(mockThrowable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test055()  throws Throwable  {
      MockError mockError0 = new MockError();
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockError0);
      // Undeclared exception!
      try { 
        Context.throwAsScriptRuntimeEx(invocationTargetException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test056()  throws Throwable  {
      EvaluatorException evaluatorException0 = Context.reportRuntimeError("com.google.javascript.rhino.head.ContextListener$MockitoMock$587283693");
      // Undeclared exception!
      try { 
        Context.throwAsScriptRuntimeEx(evaluatorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.google.javascript.rhino.head.ContextListener$MockitoMock$587283693
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Character character0 = new Character('I');
      Object object0 = Context.javaToJS(character0, (Scriptable) null);
      assertEquals("I", object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test058()  throws Throwable  {
      Object object0 = Context.javaToJS((Object) null, (Scriptable) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeContinuation nativeContinuation1 = (NativeContinuation)Context.javaToJS(nativeContinuation0, nativeContinuation0);
      assertFalse(nativeContinuation1.isSealed());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Short short0 = new Short((short)109);
      Object object0 = Context.javaToJS(short0, (Scriptable) null);
      assertEquals((short)109, object0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("R!+Q(.)C(#bn6<lX");
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Object object0 = Context.javaToJS(boolean0, nativeArray0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = Context.javaToJS("@D4/uhMk,F;J\"z", (Scriptable) null);
      assertEquals("@D4/uhMk,F;J\"z", object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test063()  throws Throwable  {
      MockError mockError0 = new MockError();
      Throwable[] throwableArray0 = mockError0.getSuppressed();
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        context0.newArray((Scriptable) null, (Object[]) throwableArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        context0.newArray((Scriptable) null, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Context context0 = new Context();
      BaseFunction baseFunction0 = new BaseFunction();
      String string0 = context0.decompileFunctionBody(baseFunction0, 8);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      assertEquals("[native code, arity=0]\n", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      Synchronizer synchronizer0 = new Synchronizer(nativeArray0, nativeArray0);
      String string0 = context0.decompileFunctionBody(synchronizer0, (-2));
      assertEquals("[native code]\n", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Context context0 = Context.enter();
      BaseFunction baseFunction0 = new BaseFunction();
      String string0 = context0.decompileFunction(baseFunction0, 0);
      assertEquals("function () {\n\t[native code, arity=0]\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        context0.decompileFunction((Function) null, 169);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test069()  throws Throwable  {
      Context context0 = Context.enter();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        context0.evaluateString(nativeIterator_StopIteration0, "Context.ja5va.jaa", "Context.ja5va.jaa", (-553), "Context.ja5va.jaa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // securityDomain should be null if setSecurityController() was never called
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        context0.evaluateString((Scriptable) null, (String) null, (String) null, 62, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Context context0 = Context.enter();
      StringReader stringReader0 = new StringReader("error reporter");
      // Undeclared exception!
      try { 
        context0.evaluateReader((Scriptable) null, stringReader0, "error reporter", (-3982), (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Context context0 = Context.enter();
      boolean boolean0 = context0.stringIsCompilableUnit("language version");
      assertFalse(boolean0);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Context context0 = new Context();
      context0.stringIsCompilableUnit("Rhino 1.7 release 4 PRERELEASE 2019 07 12");
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test074()  throws Throwable  {
      Context context0 = Context.getContext();
      boolean boolean0 = context0.stringIsCompilableUnit("_");
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(boolean0);
      assertEquals(0, context0.getOptimizationLevel());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test075()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Interpreter interpreter0 = new Interpreter();
      DefaultErrorReporter defaultErrorReporter0 = DefaultErrorReporter.instance;
      Script script0 = context0.compileString("com.google.javascript.rhino.head.Co+textListenr$MockitoMock$587283693", (Evaluator) interpreter0, (ErrorReporter) defaultErrorReporter0, "com.google.javascript.rhino.head.Co+textListenr$MockitoMock$587283693", 8, (Object) null);
      NativeCall nativeCall0 = new NativeCall();
      // Undeclared exception!
      try { 
        context0.executeScriptWithContinuations(script0, nativeCall0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ReferenceError: \"com\" is not defined. (com.google.javascript.rhino.head.Co+textListenr$MockitoMock$587283693#8)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Context context0 = new Context();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      // Undeclared exception!
      try { 
        context0.callFunctionWithContinuations(nativeJavaClass0, nativeJavaClass0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Function argument was not created by interpreted mode 
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        context0.executeScriptWithContinuations((Script) null, (Scriptable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Script argument was not a script or was not created by interpreted mode 
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test078()  throws Throwable  {
      Context context0 = Context.enter();
      context0.firePropertyChange("error reporter", "error reporter", "error reporter");
      assertEquals(130, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Context context0 = new Context();
      context0.firePropertyChange("error reporter", "error reporter", "error reporter");
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test080()  throws Throwable  {
      Context context0 = Context.getContext();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("language version", propertyChangeListener0);
      // Undeclared exception!
      try { 
        context0.removePropertyChangeListener(propertyChangeListenerProxy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Context context0 = new Context();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("language version", propertyChangeListener0);
      context0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.generateObserverCount);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Context context0 = new Context();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("error reporter", propertyChangeListener0);
      context0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getOptimizationLevel());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test083()  throws Throwable  {
      Context context0 = Context.getContext();
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        context0.setLocale(locale0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Context context0 = new Context();
      Locale locale0 = Locale.ITALY;
      Locale locale1 = context0.setLocale(locale0);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNull(locale1);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Context context0 = new Context();
      Locale locale0 = context0.getLocale();
      assertNotNull(locale0);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Context context0 = new Context();
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      context0.setErrorReporter(errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        context0.setErrorReporter((ErrorReporter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test088()  throws Throwable  {
      Context context0 = Context.getContext();
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      // Undeclared exception!
      try { 
        context0.setErrorReporter(errorReporter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Context context0 = new Context();
      DefaultErrorReporter defaultErrorReporter0 = DefaultErrorReporter.instance;
      context0.setErrorReporter(defaultErrorReporter0);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test090()  throws Throwable  {
      Context context0 = Context.getContext();
      context0.getImplementationVersion();
      String string0 = context0.getImplementationVersion();
      assertEquals("Rhino 1.7 release 4 PRERELEASE 2019 07 12", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = Context.isValidLanguageVersion(180);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = Context.isValidLanguageVersion(160);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = Context.isValidLanguageVersion(150);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = Context.isValidLanguageVersion(140);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = Context.isValidLanguageVersion(130);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = Context.isValidLanguageVersion(120);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = Context.isValidLanguageVersion(110);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = Context.isValidLanguageVersion(100);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Context.checkLanguageVersion(11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad language version: 11
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test100()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertEquals(0, context0.getLanguageVersion());
      
      // Undeclared exception!
      try { 
        context0.setLanguageVersion(130);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test101()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        context0.unseal((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        context0.unseal("language version");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test103()  throws Throwable  {
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        context0.seal((Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Context context0 = new Context();
      context0.seal((Object) null);
      assertTrue(context0.isSealed());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ContextListener contextListener0 = mock(ContextListener.class, new ViolatedAssumptionAnswer());
      Context.addContextListener(contextListener0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Context context0 = Context.enter();
      ContextFactory contextFactory0 = new ContextFactory();
      BaseFunction baseFunction0 = new BaseFunction();
      Object object0 = Context.call(contextFactory0, (Callable) baseFunction0, (Scriptable) baseFunction0, (Scriptable) baseFunction0, context0.emptyArgs);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Context context0 = null;
      try {
        context0 = new Context((ContextFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factory == null
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = Context.getUndefinedValue();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        context0.decompileScript((Script) null, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        Context.reportRuntimeError3("error reporter", context0, context0, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property error reporter
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Context context0 = Context.enter();
      StringReader stringReader0 = new StringReader("");
      // Undeclared exception!
      try { 
        context0.compileReader((Reader) stringReader0, "", 13, (Object) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        context0.newObject((Scriptable) null, "error reporter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test113()  throws Throwable  {
      Context context0 = Context.enter();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("language version", propertyChangeListener0);
      // Undeclared exception!
      try { 
        context0.addPropertyChangeListener(propertyChangeListenerProxy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Context context0 = Context.enter();
      Object object0 = context0.getDebuggerContextData();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test115()  throws Throwable  {
      Context.reportWarning((String) null, (Throwable) null);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test116()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Debugger debugger0 = context0.getDebugger();
      assertNull(debugger0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        Context.reportRuntimeError4("*", "*", context0, "*", context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property *
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ContextAction contextAction0 = mock(ContextAction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(contextAction0).run(any(com.google.javascript.rhino.head.Context.class));
      Object object0 = Context.call(contextAction0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Context context0 = Context.enter();
      int int0 = context0.getInstructionObserverThreshold();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test120()  throws Throwable  {
      Context context0 = Context.getContext();
      boolean boolean0 = context0.isSealed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test121()  throws Throwable  {
      Context context0 = Context.getContext();
      context0.observeInstructionCount(2005);
      assertTrue(context0.isGeneratingSource());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test122()  throws Throwable  {
      Double double0 = new Double(5);
      TopLevel topLevel0 = new TopLevel();
      Class<NativeDate> class0 = NativeDate.class;
      NativeNumber nativeNumber0 = (NativeNumber)Context.toObject((Object) double0, (Scriptable) topLevel0, (Class<?>) class0);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test123()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      context0.initStandardObjects();
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        context0.captureContinuation();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Interpreter frames not found
         //
         verifyException("com.google.javascript.rhino.head.Interpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        Context.removeContextListener((ContextListener) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Context context0 = new Context();
      context0.setInstructionObserverThreshold(2343);
      assertEquals(2343, context0.getInstructionObserverThreshold());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test127()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        context0.newArray((Scriptable) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Context context0 = new Context();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object object0 = context0.resumeContinuation(nativeContinuation0, nativeContinuation0, nativeContinuation0);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        Context.reportError("error reporter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error reporter
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test130()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        context0.newObject((Scriptable) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeIterator.StopIteration nativeIterator_StopIteration1 = (NativeIterator.StopIteration)Context.toObject((Object) nativeIterator_StopIteration0, (Scriptable) nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration1.isExtensible());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Context context0 = Context.enter();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("language version");
      // Undeclared exception!
      try { 
        context0.getElements(nativeJavaPackage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptableObject(context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type com.google.javascript.rhino.head.Context
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        Context.reportRuntimeError0("error reporter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property error reporter
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      String string0 = Context.toString((Object) context0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Class<NativeString> class0 = NativeString.class;
      try { 
        Context.toType(context0, class0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert com.google.javascript.rhino.head.Context@1 to com.google.javascript.rhino.head.NativeString
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Context context0 = Context.enter();
      double double0 = Context.toNumber(context0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Context context0 = new Context();
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod((MemberBox) null, "language version");
      // Undeclared exception!
      try { 
        Context.call((ContextFactory) null, (Callable) nativeJavaMethod0, (Scriptable) nativeJavaMethod0, (Scriptable) nativeJavaMethod0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeJavaMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Context context0 = new Context();
      Context.ClassShutterSetter context_ClassShutterSetter0 = context0.getClassShutterSetter();
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertNotNull(context_ClassShutterSetter0);
  }
}

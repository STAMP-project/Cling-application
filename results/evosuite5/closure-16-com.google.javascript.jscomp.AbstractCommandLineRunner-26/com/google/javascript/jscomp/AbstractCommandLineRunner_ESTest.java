/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 05:14:53 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Function;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.AbstractCommandLineRunner;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.PhaseOptimizer;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.ResourceBundle;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractCommandLineRunner_ESTest extends AbstractCommandLineRunner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setOutputManifest(list0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Vector<JSModule> vector0 = new Vector<JSModule>();
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph(vector0);
      StringBuffer stringBuffer0 = new StringBuffer();
      commandLineRunner0.printModuleGraphManifestOrBundleTo(jSModuleGraph0, stringBuffer0, false);
      assertTrue(commandLineRunner0.shouldRunCompiler());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      arrayList0.add(".+[#R18p\"hk.u=lY");
      // Undeclared exception!
      try { 
        AbstractCommandLineRunner.createDefineOrTweakReplacements(arrayList0, compilerOptions0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // --tweak flag syntax invalid: .+[#R18p\"hk.u=lY
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      arrayList0.add(".+[#R18p\"hk.u=Y");
      // Undeclared exception!
      try { 
        AbstractCommandLineRunner.createDefineOrTweakReplacements(arrayList0, compilerOptions0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // --define flag syntax invalid: .+[#R18p\"hk.u=Y
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      AbstractCommandLineRunner.createDefineOrTweakReplacements(list0, compilerOptions0, false);
      assertFalse(compilerOptions0.printInputDelimiter);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("// Input %num%");
      AbstractCommandLineRunner.createDefineOrTweakReplacements(arrayList0, compilerOptions0, true);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      arrayList0.add("");
      // Undeclared exception!
      try { 
        AbstractCommandLineRunner.createDefineOrTweakReplacements(arrayList0, compilerOptions0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // --define flag syntax invalid: 
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      OutputStream outputStream0 = commandLineRunner0.filenameToOutputStream((String) null);
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      OutputStream outputStream0 = commandLineRunner0.filenameToOutputStream("q iRW`@5%_Z");
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MockPrintStream mockPrintStream0 = new MockPrintStream("Can't specify stdin twice.");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Result result0 = compiler0.getResult();
      // Undeclared exception!
      try { 
        commandLineRunner0.processResults(result0, (List<JSModule>) null, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("condition always evaluates to the same value\nleft : {0}\nright: {1}");
      AbstractCommandLineRunner.writeOutput(mockPrintStream0, (Compiler) null, ".h4G'seP)Uhh4", "?;C:yi ", "?;C:yi ");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("2@LE'o/m5");
      Compiler compiler0 = new Compiler();
      AbstractCommandLineRunner.writeOutput(mockPrintStream0, compiler0, "2@LE'o/m5", " oE^qQgS6B*Av", "");
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("nV!M.=.J4G'sP)Uhh4");
      Compiler compiler0 = new Compiler();
      AbstractCommandLineRunner.writeOutput(mockPrintStream0, compiler0, "nV!M.=.J4G'sP)Uhh4", "nV!M.=.J4G'sP)Uhh4", ".J4G'sP)Uhh4");
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("condition always evaluates to the same value\nleft : {0}\nright: {1}");
      Compiler compiler0 = new Compiler();
      AbstractCommandLineRunner.writeOutput(mockPrintStream0, compiler0, "Lf2 CbF$TY;ii", "condition always evaluates to the same value\nleft : {0}\nright: {1}", "Lf2 CbF$TY;ii");
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      // Undeclared exception!
      try { 
        commandLineRunner0.writeModuleOutput((Appendable) null, (JSModule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      try { 
        AbstractCommandLineRunner.parseModuleWrappers(list0, arrayList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected module wrapper to have <name>:<wrapper> format: java.class
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("Referenced Names: ");
      Vector<JSModule> vector0 = new Vector<JSModule>();
      try { 
        AbstractCommandLineRunner.parseModuleWrappers(arrayList0, vector0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown module: 'Referenced Names'
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      Stack<JSModule> stack0 = new Stack<JSModule>();
      stack0.add((JSModule) null);
      // Undeclared exception!
      try { 
        AbstractCommandLineRunner.parseModuleWrappers(list0, stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Stack<JSModule> stack0 = new Stack<JSModule>();
      // Undeclared exception!
      try { 
        AbstractCommandLineRunner.parseModuleWrappers((List<String>) null, stack0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("ES:4kDKO0'*;If");
      try { 
        commandLineRunner0.createJsModules(arrayList0, arrayList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid JS file count '4kDKO0'*;If' for module: ES
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[0];
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      try { 
        commandLineRunner0.createJsModules(list0, list0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected 2-4 colon-delimited parts in module spec: java.class
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("condition always evaluates to the same value\nleft : {0}\nright: {1}");
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      // Undeclared exception!
      try { 
        commandLineRunner0.createJsModules(arrayList0, (List<String>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        commandLineRunner0.createJsModules(arrayList0, arrayList0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      // Undeclared exception!
      try { 
        commandLineRunner0.createJsModules((List<String>) null, list0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "condition always evaluates to the same value\nleft : {0}\nright: {1}";
      stringArray0[1] = "condition always evaluates to the same value\nleft : {0}\nright: {1}";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Supplier<List<JSModule>> supplier0 = (Supplier<List<JSModule>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      commandLineRunner0.enableTestMode((Supplier<List<SourceFile>>) null, (Supplier<List<SourceFile>>) null, supplier0, (Function<Integer, Boolean>) null);
      List<JSModule> list0 = commandLineRunner0.createJsModules(arrayList0, arrayList0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      JSModule jSModule0 = new JSModule("-");
      List<String> list0 = jSModule0.getProvides();
      try { 
        commandLineRunner0.createInputs(list0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't specify stdin.
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      JSModule jSModule0 = new JSModule("-");
      List<String> list0 = jSModule0.getProvides();
      List<SourceFile> list1 = commandLineRunner0.createInputs(list0, true);
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      List<SourceFile> list1 = commandLineRunner0.createInputs(list0, true);
      assertEquals(2, list1.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        CommandLineRunner.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "BZ|yZ%Rpw";
      stringArray0[1] = "SV^Y){Ia+v_";
      stringArray0[2] = "W!e{]HQ WaW-O4L'_K";
      stringArray0[3] = "\"AS-VXWUe5?\"0ps<";
      stringArray0[4] = "--tweak flag syntax invalid: ";
      stringArray0[5] = "ECMASCRIPT5_STRICT";
      stringArray0[6] = "Module '";
      stringArray0[7] = "3?yx7";
      stringArray0[8] = ",W>Y=,j~;iG;O";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      // Undeclared exception!
      try { 
        commandLineRunner0.setRunOptions((CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      commandLineRunner0.setRunOptions(compilerOptions0);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AbstractCommandLineRunner.WarningGuardSpec abstractCommandLineRunner_WarningGuardSpec0 = new AbstractCommandLineRunner.WarningGuardSpec();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      abstractCommandLineRunner_WarningGuardSpec0.add(checkLevel0, "");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MockPrintStream mockPrintStream0 = new MockPrintStream("o.kg *\"~}i}ZvSpe9N");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((MessageFormatter) null, mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Result result0 = compiler0.getResult();
      LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
      int int0 = commandLineRunner0.processResults(result0, linkedList0, compilerOptions0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "~";
      stringArray0[1] = "l]lQgnvBtS}A";
      stringArray0[2] = "e_5M4'j;xN7&.EvY";
      stringArray0[3] = "compileRegExp";
      stringArray0[4] = "com.google.common.collect.ImmutableMap$Builder";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Compiler compiler0 = commandLineRunner0.getCompiler();
      assertNull(compiler0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Ia8V,zG2VvL|@s&8v";
      stringArray0[1] = "m,~YMW>/(m%(";
      stringArray0[2] = "Ia8V,zG2VvL|@s&8v";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      commandLineRunner0.initOptionsFromFlags(compilerOptions0);
      assertFalse(compilerOptions0.checkTypes);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Supplier<List<SourceFile>> supplier0 = (Supplier<List<SourceFile>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      Function<Integer, Boolean> function0 = (Function<Integer, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(anyInt());
      commandLineRunner0.enableTestMode(supplier0, supplier0, (Supplier<List<JSModule>>) null, function0);
      commandLineRunner0.run();
      assertTrue(commandLineRunner0.shouldRunCompiler());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setSourceMapDetailLevel(sourceMap_DetailLevel0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setComputePhaseOrdering(true);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setTweak(list0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      CompilerOptions.TweakProcessing compilerOptions_TweakProcessing0 = CompilerOptions.TweakProcessing.CHECK;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setTweakProcessing(compilerOptions_TweakProcessing0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setManifestMaps(list0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      Stack<String> stack0 = new Stack<String>();
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setOutputBundle(stack0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setSkipNormalOutputs(true);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("No %s placeholder in module wrapper: '");
      try { 
        commandLineRunner0.createJsModules(arrayList0, arrayList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid module name: 'No %s placeholder in module wrapper'
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }
}

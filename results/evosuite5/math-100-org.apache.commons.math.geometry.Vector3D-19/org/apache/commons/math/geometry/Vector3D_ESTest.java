/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 16:22:10 GMT 2019
 */

package org.apache.commons.math.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Vector3D_ESTest extends Vector3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusK;
      Vector3D vector3D1 = new Vector3D((-601.0), 386.6218496);
      double double0 = Vector3D.angle(vector3D0, vector3D1);
      assertEquals(1.776749535250347, double0, 0.01);
      assertEquals(0.5647599013758311, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(408.24, 408.24, 408.24);
      Vector3D vector3D1 = new Vector3D(408.24, vector3D0, 408.24, vector3D0, (-940.5500472788144), vector3D0);
      double double0 = Vector3D.angle(vector3D0, vector3D1);
      assertEquals((-50650.356101103185), vector3D1.getZ(), 0.01);
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = vector3D0.plusJ.negate();
      Vector3D vector3D2 = vector3D0.subtract((-1.0), vector3D1);
      Vector3D vector3D3 = vector3D2.normalize();
      Vector3D vector3D4 = vector3D3.orthogonal();
      assertEquals((-0.7071067811865476), vector3D4.getX(), 0.01);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D3.getDelta(), 0.01);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01);
      assertEquals(0.7071067811865475, vector3D3.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusK;
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertEquals(-0.0, vector3D1.getDelta(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(1.0, vector3D1.getNorm(), 0.01);
      assertEquals(1.0, vector3D0.getNorm(), 0.01);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.zero;
      // Undeclared exception!
      try { 
        vector3D0.orthogonal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // null norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01);
      assertEquals(1.0, vector3D0.getNorm(), 0.01);
      assertEquals(1.0, vector3D1.getNorm(), 0.01);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(408.24, 408.24, 408.24);
      Vector3D vector3D1 = vector3D0.plusI.scalarMultiply(0.0);
      // Undeclared exception!
      try { 
        vector3D1.normalize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = vector3D0.plusJ.subtract((-1.0), vector3D0);
      Vector3D vector3D2 = vector3D1.orthogonal();
      assertEquals(0.0, vector3D0.getDelta(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.4142135623730951, vector3D1.getNorm(), 0.01);
      assertEquals((-0.7853981633974483), vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusJ;
      Vector3D vector3D1 = new Vector3D(0.6, vector3D0, (-1281.8799097055798), vector3D0, (-2603.7), vector3D0, (-1595.0), vector3D0);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(5479.97990970558, vector3D1.getNorm(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusK;
      double double0 = vector3D0.getY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      double double0 = vector3D0.getX();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNorm(), 0.01);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      assertEquals(0.0, vector3D0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      double double0 = vector3D0.getDelta();
      assertEquals(1.0, vector3D0.getNorm(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusJ;
      Vector3D vector3D1 = vector3D0.add(vector3D0);
      assertEquals((-2.0), vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(2.0, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.zero;
      double double0 = vector3D0.getZ();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusJ;
      Vector3D vector3D1 = new Vector3D(3209.01653988882, vector3D0, 3209.01653988882, vector3D0);
      assertEquals(6418.03307977764, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusK;
      double double0 = vector3D0.getAlpha();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = vector3D0.plusI.negate();
      Vector3D vector3D2 = vector3D1.orthogonal();
      assertEquals(1.0, vector3D0.getNorm(), 0.01);
      assertEquals((-1.0), vector3D1.getX(), 0.01);
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01);
      assertEquals((-1.0), vector3D2.getZ(), 0.01);
      assertEquals(0.0, vector3D0.getDelta(), 0.01);
      assertEquals((-1.5707963267948966), vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = vector3D0.subtract(vector3D0);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01);
      assertEquals(1.0, vector3D0.getNorm(), 0.01);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = vector3D0.add((-1.0), vector3D0);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getNorm(), 0.01);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01);
      assertEquals(1.0, vector3D0.getNorm(), 0.01);
      assertEquals(0.0, vector3D0.getDelta(), 0.01);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusK;
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        Vector3D.angle(vector3D1, vector3D0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // null norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusJ;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(-0.0, vector3D1.getAlpha(), 0.01);
  }
}

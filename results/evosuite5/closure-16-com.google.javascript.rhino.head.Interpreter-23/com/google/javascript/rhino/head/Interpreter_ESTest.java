/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 15:13:14 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.InterpreterData;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Interpreter_ESTest extends Interpreter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Context context0 = new Context();
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isSealed());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertNotNull(context0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Context context0 = Context.enter();
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertNotNull(context0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData((-1779), (String) null, (String) null, true);
      assertFalse(interpreterData0.isTopLevel());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isFunction());
      assertNull(interpreterData0.getSourceName());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertEquals(0, interpreterData0.getParamCount());
      assertNotNull(interpreterData0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData((-739), "language version", "error reporter", true);
      assertFalse(interpreterData0.isFunction());
      assertNull(interpreterData0.getFunctionName());
      assertEquals(0, interpreterData0.getParamCount());
      assertFalse(interpreterData0.isTopLevel());
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertEquals("language version", interpreterData0.getSourceName());
      assertNotNull(interpreterData0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(10, "error reporter", "language version", false);
      assertFalse(interpreterData0.isFunction());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isGeneratedScript());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isTopLevel());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertEquals(0, interpreterData0.getParamCount());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      interpreterData0.itsICode = byteArray0;
      assertFalse(interpreterData0.isFunction());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isGeneratedScript());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isTopLevel());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertEquals(0, interpreterData0.getParamCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(10, "error reporter", "language version", true);
      assertFalse(interpreterData0.isTopLevel());
      assertFalse(interpreterData0.isFunction());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertEquals(0, interpreterData0.getParamCount());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isGeneratedScript());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[16];
      byteArray0[11] = (byte)72;
      interpreterData0.itsICode = byteArray0;
      assertFalse(interpreterData0.isTopLevel());
      assertFalse(interpreterData0.isFunction());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertEquals(0, interpreterData0.getParamCount());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isGeneratedScript());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(10, "error reporter", "language version", true);
      assertEquals(0, interpreterData0.getParamCount());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isTopLevel());
      assertFalse(interpreterData0.isFunction());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      interpreterData0.itsICode = byteArray0;
      assertEquals(0, interpreterData0.getParamCount());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isTopLevel());
      assertFalse(interpreterData0.isFunction());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(10, "error reporter", "language version", true);
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isFunction());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertFalse(interpreterData0.isTopLevel());
      assertNull(interpreterData0.getFunctionName());
      assertEquals(0, interpreterData0.getParamCount());
      assertFalse(interpreterData0.isGeneratedScript());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      interpreterData0.itsICode = byteArray0;
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isFunction());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertFalse(interpreterData0.isTopLevel());
      assertNull(interpreterData0.getFunctionName());
      assertEquals(0, interpreterData0.getParamCount());
      assertFalse(interpreterData0.isGeneratedScript());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(10, "error reporter", "language version", true);
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isTopLevel());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isFunction());
      assertEquals(0, interpreterData0.getParamCount());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-6);
      interpreterData0.itsICode = byteArray0;
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isTopLevel());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isFunction());
      assertEquals(0, interpreterData0.getParamCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(10, "error reporter", "language version", true);
      assertFalse(interpreterData0.isFunction());
      assertFalse(interpreterData0.isTopLevel());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals(0, interpreterData0.getParamCount());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-8);
      interpreterData0.itsICode = byteArray0;
      assertFalse(interpreterData0.isFunction());
      assertFalse(interpreterData0.isTopLevel());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals(0, interpreterData0.getParamCount());
      assertEquals(0, interpreterData0.getFunctionCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData((-23), "com.google.javascript.rhino.head.Interpreter$CallFrame", "com.google.javascript.rhino.head.Interpreter$CallFrame", true);
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals(0, interpreterData0.getParamCount());
      assertNull(interpreterData0.getFunctionName());
      assertEquals("com.google.javascript.rhino.head.Interpreter$CallFrame", interpreterData0.getSourceName());
      assertFalse(interpreterData0.isFunction());
      assertFalse(interpreterData0.isTopLevel());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-9);
      interpreterData0.itsICode = byteArray0;
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals(0, interpreterData0.getParamCount());
      assertNull(interpreterData0.getFunctionName());
      assertEquals("com.google.javascript.rhino.head.Interpreter$CallFrame", interpreterData0.getSourceName());
      assertFalse(interpreterData0.isFunction());
      assertFalse(interpreterData0.isTopLevel());
      assertEquals(0, interpreterData0.getFunctionCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(10, "error reporter", "language version", false);
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertFalse(interpreterData0.isFunction());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertEquals(0, interpreterData0.getParamCount());
      assertFalse(interpreterData0.isTopLevel());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-10);
      interpreterData0.itsICode = byteArray0;
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertFalse(interpreterData0.isFunction());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertEquals(0, interpreterData0.getParamCount());
      assertFalse(interpreterData0.isTopLevel());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(10, "error reporter", "language version", true);
      assertEquals(0, interpreterData0.getParamCount());
      assertNull(interpreterData0.getFunctionName());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isTopLevel());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertFalse(interpreterData0.isFunction());
      assertFalse(interpreterData0.isGeneratedScript());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-11);
      interpreterData0.itsICode = byteArray0;
      assertEquals(0, interpreterData0.getParamCount());
      assertNull(interpreterData0.getFunctionName());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isTopLevel());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertFalse(interpreterData0.isFunction());
      assertFalse(interpreterData0.isGeneratedScript());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(10, "error reporter", "language version", true);
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertFalse(interpreterData0.isTopLevel());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isFunction());
      assertEquals(0, interpreterData0.getParamCount());
      assertFalse(interpreterData0.isGeneratedScript());
      assertNull(interpreterData0.getFunctionName());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[2] = (byte) (-21);
      interpreterData0.itsICode = byteArray0;
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertFalse(interpreterData0.isTopLevel());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isFunction());
      assertEquals(0, interpreterData0.getParamCount());
      assertFalse(interpreterData0.isGeneratedScript());
      assertNull(interpreterData0.getFunctionName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(10, "error reporter", "language version", true);
      assertEquals(0, interpreterData0.getParamCount());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isFunction());
      assertFalse(interpreterData0.isTopLevel());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isGeneratedScript());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-27);
      interpreterData0.itsICode = byteArray0;
      assertEquals(0, interpreterData0.getParamCount());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isFunction());
      assertFalse(interpreterData0.isTopLevel());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isGeneratedScript());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(10, "error reporter", "language version", true);
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isGeneratedScript());
      assertFalse(interpreterData0.isTopLevel());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isFunction());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertEquals(0, interpreterData0.getParamCount());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-28);
      interpreterData0.itsICode = byteArray0;
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isGeneratedScript());
      assertFalse(interpreterData0.isTopLevel());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isFunction());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertEquals(0, interpreterData0.getParamCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(10, "error reporter", "language version", true);
      assertEquals(0, interpreterData0.getFunctionCount());
      assertNull(interpreterData0.getFunctionName());
      assertEquals(0, interpreterData0.getParamCount());
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertFalse(interpreterData0.isTopLevel());
      assertFalse(interpreterData0.isFunction());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-39);
      interpreterData0.itsICode = byteArray0;
      assertEquals(0, interpreterData0.getFunctionCount());
      assertNull(interpreterData0.getFunctionName());
      assertEquals(0, interpreterData0.getParamCount());
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertFalse(interpreterData0.isTopLevel());
      assertFalse(interpreterData0.isFunction());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(10, "error reporter", "language version", true);
      assertEquals(0, interpreterData0.getParamCount());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isFunction());
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isTopLevel());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-46);
      interpreterData0.itsICode = byteArray0;
      assertEquals(0, interpreterData0.getParamCount());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isFunction());
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isTopLevel());
      assertEquals("error reporter", interpreterData0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(10, "error reporter", "language version", true);
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertEquals(0, interpreterData0.getParamCount());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertFalse(interpreterData0.isTopLevel());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isFunction());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-47);
      interpreterData0.itsICode = byteArray0;
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertEquals(0, interpreterData0.getParamCount());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertFalse(interpreterData0.isTopLevel());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isFunction());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(10, "error reporter", "language version", false);
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isGeneratedScript());
      assertFalse(interpreterData0.isTopLevel());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isFunction());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertEquals(0, interpreterData0.getParamCount());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-48);
      interpreterData0.itsICode = byteArray0;
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isGeneratedScript());
      assertFalse(interpreterData0.isTopLevel());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isFunction());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertEquals(0, interpreterData0.getParamCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(10, "error reporter", "language version", true);
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertFalse(interpreterData0.isFunction());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertEquals(0, interpreterData0.getParamCount());
      assertFalse(interpreterData0.isTopLevel());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-54);
      interpreterData0.itsICode = byteArray0;
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertFalse(interpreterData0.isFunction());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertEquals(0, interpreterData0.getParamCount());
      assertFalse(interpreterData0.isTopLevel());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(10, "error reporter", "language version", true);
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isGeneratedScript());
      assertFalse(interpreterData0.isFunction());
      assertFalse(interpreterData0.isTopLevel());
      assertNull(interpreterData0.getFunctionName());
      assertEquals(0, interpreterData0.getParamCount());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-61);
      interpreterData0.itsICode = byteArray0;
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isGeneratedScript());
      assertFalse(interpreterData0.isFunction());
      assertFalse(interpreterData0.isTopLevel());
      assertNull(interpreterData0.getFunctionName());
      assertEquals(0, interpreterData0.getParamCount());
      assertEquals("error reporter", interpreterData0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(10, "error reporter", "language version", true);
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isFunction());
      assertFalse(interpreterData0.isTopLevel());
      assertNull(interpreterData0.getFunctionName());
      assertEquals(0, interpreterData0.getParamCount());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-62);
      interpreterData0.itsICode = byteArray0;
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isFunction());
      assertFalse(interpreterData0.isTopLevel());
      assertNull(interpreterData0.getFunctionName());
      assertEquals(0, interpreterData0.getParamCount());
      assertEquals("error reporter", interpreterData0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(10, "error reporter", "language version", false);
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isGeneratedScript());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isTopLevel());
      assertEquals(0, interpreterData0.getParamCount());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertFalse(interpreterData0.isFunction());
      assertNotNull(interpreterData0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-63);
      interpreterData0.itsICode = byteArray0;
      assertEquals(0, interpreterData0.getFunctionCount());
      assertFalse(interpreterData0.isGeneratedScript());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isTopLevel());
      assertEquals(0, interpreterData0.getParamCount());
      assertEquals("error reporter", interpreterData0.getSourceName());
      assertFalse(interpreterData0.isFunction());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertNull(context0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 14:01:02 GMT 2019
 */

package org.mockito.cglib.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.Type;
import org.mockito.cglib.core.ClassEmitter;
import org.mockito.cglib.core.CodeEmitter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ClassEmitter_ESTest extends ClassEmitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.CHAR_TYPE;
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(9, "F>n67SR!9c a", type0, (Object) null);
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(3, "char charValue()", type0, classEmitter_FieldInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.cglib.core.ClassEmitter$FieldInfo@c2292ced
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(36);
      Type type0 = Type.getObjectType("org.mockto.cglib.core.ClassEmitter$2");
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(36, "org.mockto.cglib.core.ClassEmitter$2", type0, "org.mockto.cglib.core.ClassEmitter$2");
      // Undeclared exception!
      try { 
        classWriter0.newConst(classEmitter_FieldInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.cglib.core.ClassEmitter$FieldInfo@8e17eaf4
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(1, "org.mockito.clib.core.ClassEmitter$2", type0, "org.mockito.clib.core.ClassEmitter$2");
      classEmitter_FieldInfo0.value = null;
      boolean boolean0 = classEmitter_FieldInfo0.equals(classEmitter_FieldInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(36);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.DOUBLE_TYPE;
      classEmitter0.declare_field(1640, "org.mockito.cglib.core.ClassEmitter$3", type0, "Name '");
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(1640, "org.mockito.cglib.core.ClassEmitter$3", type0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field \"org.mockito.cglib.core.ClassEmitter$3\" has been declared differently
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(1, "org.mockito.cglib.core.ClassEmitter$2", type0, "org.mockito.cglib.core.ClassEmitter$2");
      Type type1 = Type.CHAR_TYPE;
      classEmitter_FieldInfo0.access = 0;
      ClassEmitter.FieldInfo classEmitter_FieldInfo1 = new ClassEmitter.FieldInfo(0, "org.mockito.cglib.core.ClassEmitter$2", type1, "org.mockito.cglib.core.ClassEmitter$2");
      boolean boolean0 = classEmitter_FieldInfo0.equals(classEmitter_FieldInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(1, "", type0, "");
      classEmitter_FieldInfo0.access = 0;
      ClassEmitter.FieldInfo classEmitter_FieldInfo1 = new ClassEmitter.FieldInfo(0, "org.mockito.cglib.core.ClassEmitter$2", type0, "");
      boolean boolean0 = classEmitter_FieldInfo0.equals(classEmitter_FieldInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.CHAR_TYPE;
      classEmitter0.declare_field(3, "", type0, type0);
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(2, "", type0, type0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field \"\" has been declared differently
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(179, "Name '", type0, type0);
      boolean boolean0 = classEmitter_FieldInfo0.equals("org.mockito.cglib.core.ClassEmitter$3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo((-1), "$", type0, type0);
      boolean boolean0 = classEmitter_FieldInfo0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      // Undeclared exception!
      try { 
        classEmitter0.getFieldInfo("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(36);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.CHAR_TYPE;
      classEmitter0.declare_field(1, "", type0, type0);
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = classEmitter0.getFieldInfo("");
      assertNotNull(classEmitter_FieldInfo0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Class<ClassEmitter.FieldInfo> class0 = ClassEmitter.FieldInfo.class;
      Type type0 = Type.getType(class0);
      classEmitter0.declare_field(0, "=}3kvRnos9F", type0, (Object) null);
      boolean boolean0 = classEmitter0.isFieldDeclared("=}3kvRnos9F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(36);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      boolean boolean0 = classEmitter0.isFieldDeclared("Name '");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(36);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.CHAR_TYPE;
      classEmitter0.declare_field(1, "", type0, type0);
      classEmitter0.declare_field(1, "", type0, type0);
      assertEquals(8, Type.DOUBLE);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(36);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.CHAR_TYPE;
      classEmitter0.declare_field(1, "", type0, type0);
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(1, "", type0, classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field \"\" has been declared differently
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(36);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(36, (-7), "org.mockito.cglib.core.ClassEmitter$2", "org.mockito.cglib.core.ClassEmitter$2", "org.mockito.cglib.core.ClassEmitter$2", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      // Undeclared exception!
      try { 
        classEmitter0.begin_static();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // classInfo is null! org.mockito.cglib.core.ClassEmitter@1
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(0, 2, "org.mockito.cglib.core.ClassEmitter$2", "org.mockito.cglib.core.ClassEmitter$2", "5", stringArray0);
      classEmitter0.begin_static();
      classEmitter0.end_class();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "org.mockito.cglib.core.ClassEmitter", "org.mockito.cglib.core.ClassEmitter", "org.mockito.cglib.core.ClassEmitter", (String[]) null);
      classEmitter0.getStaticHook();
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, (-9), "", "", "", (String[]) null);
      // Undeclared exception!
      try { 
        classEmitter0.getStaticHook();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // static hook is invalid for this class
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(36);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Class<Integer> class0 = Integer.class;
      Type type0 = Type.getType(class0);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      classEmitter0.begin_class(9, 46, "Name '", type0, typeArray0, "");
      assertEquals(5, Type.INT);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type[] typeArray0 = new Type[9];
      // Undeclared exception!
      try { 
        classEmitter0.begin_class(1841, 1841, "uM*qCCmEQ", (Type) null, typeArray0, "uM*qCCmEQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassEmitter classEmitter1 = new ClassEmitter(classEmitter0);
      Type type0 = Type.BOOLEAN_TYPE;
      // Undeclared exception!
      try { 
        classEmitter1.declare_field(602, "<clinit>", type0, "<clinit>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        classEmitter0.visitMethod((-4811), (String) null, (String) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      // Undeclared exception!
      try { 
        classEmitter0.getSuperType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      // Undeclared exception!
      try { 
        classEmitter0.visitEnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(0, 2, "org.mockito.cglib.core.CassEmitter$", "org.mockito.cglib.core.CassEmitter$", "5", stringArray0);
      classEmitter0.getStaticHook();
      classEmitter0.end_class();
  }
}

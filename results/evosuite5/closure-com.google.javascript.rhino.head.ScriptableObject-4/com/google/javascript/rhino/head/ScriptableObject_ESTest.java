/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 08:01:31 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Arguments;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.FieldAndMethods;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.InterpretedFunction;
import com.google.javascript.rhino.head.InterpreterData;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.LazilyLoadedCtor;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeDate;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeGenerator;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaArray;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeMath;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.Synchronizer;
import com.google.javascript.rhino.head.TopLevel;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ScriptableObject_ESTest extends ScriptableObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeError nativeError0 = new NativeError();
      nativeError0.isDataDescriptor(nativeContinuation0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Class<FunctionObject> class0 = FunctionObject.class;
      // Undeclared exception!
      try { 
        nativeError0.defineProperty("ruA", class0, (-4047));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4047
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Delegator delegator0 = new Delegator(nativeContinuation0);
      delegator0.hasInstance(nativeContinuation0);
      // Undeclared exception!
      try { 
        NativeBoolean.init(delegator0, false);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeError.init(nativeContinuation0, true);
      NativeError nativeError0 = new NativeError();
      nativeError0.getClassName();
      nativeError0.getIds(false);
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeContinuation0, (String) null, (String) null, true);
      // Undeclared exception!
      try { 
        nativeError0.addLazilyInitializedValue((String) null, 8, lazilyLoadedCtor0, 51);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 51
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test004()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      ScriptableObject.hasProperty((Scriptable) nativeError0, 127);
      NativeError nativeError1 = new NativeError();
      ScriptableObject.isFalse(nativeError0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.put(1, (Scriptable) nativeContinuation0, (Object) nativeContinuation0);
      NativeArray nativeArray0 = new NativeArray(4);
      nativeArray0.isEmpty();
      NativeError nativeError0 = new NativeError();
      nativeError0.isDataDescriptor(nativeContinuation0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      importerTopLevel0.putConst("error reporter", scriptableObject0, nativeIterator_StopIteration0);
      NativeCall nativeCall0 = context0.currentActivationCall;
      Arguments arguments0 = null;
      try {
        arguments0 = new Arguments((NativeCall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Arguments", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context();
      Context context1 = contextFactory0.enterContext(context0);
      NativeArray nativeArray0 = new NativeArray(context1.emptyArgs);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context1, false);
      importerTopLevel0.checkPropertyChange("language version", (ScriptableObject) null, (ScriptableObject) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Class<NativeCall> class0 = NativeCall.class;
      nativeContinuation0.defineProperty("msg.ctor.multiple.parms", class0, 6);
      ScriptableObject.putConstProperty(nativeContinuation0, "msg.ctor.multiple.parms", class0);
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeContinuation0, "j;M1n>F=1}O^j*p1,J");
      NativeBoolean.init(nativeContinuation0, true);
      nativeContinuation0.initImplementation(object0);
      NativeError nativeError0 = new NativeError();
      nativeError0.getClassName();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test009()  throws Throwable  {
      Context context0 = Context.getContext();
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      ScriptableObject.hasProperty((Scriptable) scriptableObject0, "language version");
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      ContextFactory contextFactory0 = new ContextFactory();
      contextFactory0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      // Undeclared exception!
      try { 
        nativeJavaTopPackage0.setAttributes("$@4^Y", (Scriptable) scriptableObject0, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 100
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Context.enter();
      BaseFunction baseFunction0 = null;
      try {
        baseFunction0 = new BaseFunction((Scriptable) null, (Scriptable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2987L);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeArray0.indexOf(nativeIterator_StopIteration0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Delegator delegator0 = new Delegator(nativeContinuation0);
      // Undeclared exception!
      try { 
        nativeContinuation0.getGetterOrSetter("bp'{q43,x>X%S", (-1737), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bp'{q43,x>X%S
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test013()  throws Throwable  {
      Context context0 = new Context();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context1 = new Context();
      ClassLoader classLoader0 = context1.getApplicationClassLoader();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage(false, "msg.no.brace.block", classLoader0);
      Synchronizer synchronizer0 = new Synchronizer(nativeJavaPackage0, classLoader0);
      // Undeclared exception!
      try { 
        Context.javaToJS(classLoader0, synchronizer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      ScriptableObject.hasProperty((Scriptable) nativeError0, 127);
      NativeError nativeError1 = new NativeError();
      ScriptableObject.deleteProperty((Scriptable) nativeError0, 1);
      String[] stringArray0 = new String[3];
      Class<NativeNumber> class0 = NativeNumber.class;
      // Undeclared exception!
      try { 
        nativeError0.defineFunctionProperties(stringArray0, class0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Delegator delegator0 = new Delegator(nativeContinuation0);
      ScriptableObject.putConstProperty(delegator0, "4T7f^9BfT[", nativeContinuation0);
      // Undeclared exception!
      try { 
        ScriptableObject.putProperty((Scriptable) delegator0, 0, (Object) nativeContinuation0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test016()  throws Throwable  {
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("com.google.javascript.rhino.head.NativeJSON$StringifyState");
      // Undeclared exception!
      try { 
        ScriptableObject.redefineProperty(nativeJavaPackage0, "com.google.javascript.rhino.head.NativeJSON$StringifyState", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: redeclaration of var com.google.javascript.rhino.head.NativeJSON$StringifyState.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test017()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      // Undeclared exception!
      try { 
        importerTopLevel0.putConst("language version", nativeJavaClass0, context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeJavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Delegator delegator0 = new Delegator(nativeContinuation0);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeContinuation nativeContinuation1 = new NativeContinuation();
      nativeContinuation0.defineConst(",:-$^(h_", nativeIterator_StopIteration0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeContinuation0, "rjV9c-}lv4G.q%'x#<", 0);
      ContextFactory contextFactory0 = new ContextFactory();
      NativeError nativeError0 = new NativeError();
      nativeError0.checkPropertyDefinition(scriptableObject0);
      ContextFactory.getGlobal();
      NativeError nativeError1 = new NativeError();
      NativeError nativeError2 = new NativeError();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeContinuation0, "rjV9c-}lv4Gwq'x#<", 0);
      ContextFactory contextFactory0 = new ContextFactory();
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      nativeBoolean0.delete(0);
      ContextFactory contextFactory1 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      contextFactory1.onContextCreated(context0);
      // Undeclared exception!
      try { 
        nativeBoolean0.defineOwnProperties(context0, scriptableObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type string
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test021()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeError0);
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      
      NativeError.init(nativeError0, true);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeError0, 127);
      assertFalse(boolean0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      
      String string0 = nativeError0.getClassName();
      assertEquals("Error", string0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(string0);
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      
      nativeError0.getIds(true);
      Class<FieldAndMethods> class0 = FieldAndMethods.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getTypedProperty((Scriptable) nativeError0, "Error", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot convert com.google.javascript.rhino.head.IdFunctionObject@b to com.google.javascript.rhino.head.FieldAndMethods
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Delegator delegator0 = new Delegator();
      Synchronizer synchronizer0 = new Synchronizer(delegator0);
      nativeContinuation0.getGetterOrSetter((String) null, 13, false);
      NativeError nativeError0 = new NativeError();
      Double double0 = new Double(0.0);
      ScriptableObject.isFalse((Object) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(504L);
      ScriptableObject.putProperty((Scriptable) nativeArray0, 13, (Object) nativeArray0);
      Class<FieldAndMethods> class0 = FieldAndMethods.class;
      ScriptableObject.getTypedProperty((Scriptable) nativeArray0, "com.google.javascript.rhino.head.ScriptableObject$Slot", class0);
      // Undeclared exception!
      try { 
        BaseFunction.isApply((IdFunctionObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.BaseFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Delegator delegator0 = new Delegator(nativeContinuation0);
      Synchronizer synchronizer0 = new Synchronizer(delegator0);
      nativeContinuation0.getGetterOrSetter((String) null, 13, false);
      NativeCall nativeCall0 = new NativeCall();
      ContextFactory contextFactory0 = new ContextFactory();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      nativeContinuation0.delete("com.google.javascript.rhino.head.NativeWith");
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        nativeContinuation0.getGetterOrSetter("", 11, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ContextFactory.getGlobal();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      // Undeclared exception!
      try { 
        importerTopLevel0.getOwnPropertyDescriptor(context0, nativeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Context context0 = Context.enter();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      importerTopLevel0.putConst("error reporter", nativeIterator_StopIteration0, nativeIterator_StopIteration0);
      NativeCall nativeCall0 = context0.currentActivationCall;
      NativeError nativeError0 = new NativeError();
      importerTopLevel0.checkPropertyChange("error reporter", nativeIterator_StopIteration0, nativeError0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeError.init(nativeError0, true);
      ScriptableObject.hasProperty((Scriptable) nativeError0, 127);
      Double double0 = new Double(0.0);
      Double.max((-333.916633831), 0.0);
      ScriptableObject.isFalse(double0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) double0;
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeArray nativeArray1 = new NativeArray(objectArray0);
      nativeArray0.containsAll(nativeArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeContinuation0, nativeContinuation0, 8);
      ContextFactory contextFactory0 = new ContextFactory();
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      nativeBoolean0.delete(13);
      NativeError nativeError0 = new NativeError();
      nativeError0.checkPropertyDefinition(nativeBoolean0);
      ContextFactory contextFactory1 = ContextFactory.getGlobal();
      Context context0 = contextFactory1.enterContext();
      Context context1 = contextFactory1.enterContext(context0);
      Context context2 = Context.enter(context1);
      NativeArray nativeArray0 = new NativeArray(context2.emptyArgs);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      // Undeclared exception!
      try { 
        importerTopLevel0.checkPropertyChange("3+$Ajdm;ApV_ZFyH,", nativeContinuation0, scriptableObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot change the configurable attribute of \"3+$Ajdm;ApV_ZFyH,\" from false to true.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test030()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeError nativeError0 = new NativeError();
      Class<NativeArray> class0 = NativeArray.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) nativeError0, class0, false, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.NativeArray\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ScriptableObject.hasProperty((Scriptable) nativeContinuation0, 4);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      nativeBoolean0.delete(13);
      NativeDate.init(nativeContinuation0, false);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(504L);
      Synchronizer synchronizer0 = new Synchronizer(nativeArray0, nativeArray0);
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      Context.javaToJS(nativeBoolean0, nativeBoolean0);
      Long long0 = new Long(8);
      // Undeclared exception!
      try { 
        ScriptableObject.defineConstProperty(synchronizer0, "80@-e5%FM6BMgyu");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      ScriptableObject.getClassPrototype(nativeBoolean0, (String) null);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test034()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ScriptableObject.getProperty((Scriptable) nativeContinuation0, 4);
      Context.getContext();
      BaseFunction baseFunction0 = new BaseFunction();
      baseFunction0.getIds();
      Class<Synchronizer> class0 = Synchronizer.class;
      baseFunction0.applyDescriptorToAttributeBitset(15, nativeContinuation0);
      NativeJavaClass nativeJavaClass0 = null;
      try {
        nativeJavaClass0 = new NativeJavaClass(nativeContinuation0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.put(1, (Scriptable) nativeContinuation0, (Object) nativeContinuation0);
      Long long0 = new Long(838L);
      ScriptableObject.defineConstProperty(nativeIterator_StopIteration0, (String) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Class<InterpretedFunction> class0 = InterpretedFunction.class;
      nativeContinuation0.get((Object) class0);
      Double double0 = new Double(734.838);
      ScriptableObject.isFalse(double0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test037()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      int int0 = (-1);
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel();
      Class<NativeArray> class0 = NativeArray.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) importerTopLevel0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.NativeArray\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Context context0 = Context.enter();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Class<Object> class0 = Object.class;
      ScriptableObject.getTypedProperty((Scriptable) importerTopLevel0, 5, class0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      ScriptableObject.hasProperty((Scriptable) nativeError0, 127);
      NativeError nativeError1 = new NativeError();
      ScriptableObject.deleteProperty((Scriptable) nativeError0, 1);
      String[] stringArray0 = new String[0];
      Class<NativeNumber> class0 = NativeNumber.class;
      nativeError0.defineFunctionProperties(stringArray0, class0, 1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeError.init(nativeError0, true);
      ScriptableObject.hasProperty((Scriptable) nativeError0, 127);
      nativeError0.getClassName();
      nativeError0.getIds(true);
      NativeArray.getMaximumInitialCapacity();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.get("Error", (Scriptable) nativeError0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.findPrototypeId("Interpreter not present");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context();
      Context context1 = contextFactory0.enterContext(context0);
      NativeArray nativeArray0 = new NativeArray(context1.emptyArgs);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      // Undeclared exception!
      try { 
        nativeBoolean0.setGetterOrSetter("(:dKI", 1, nativeContinuation0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (:dKI
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader1);
      context0.initStandardObjects();
      BaseFunction baseFunction0 = new BaseFunction(nativeJavaTopPackage0, nativeJavaTopPackage0);
      baseFunction0.getGetterOrSetter("getTypeOf", 0, false);
      // Undeclared exception!
      try { 
        nativeJavaTopPackage0.checkPropertyDefinition(baseFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeContinuation0, "rjV9c-}lv4G.q%'x#<", (-1994461965));
      ContextFactory contextFactory0 = new ContextFactory();
      scriptableObject0.has(1, (Scriptable) nativeContinuation0);
      NativeError nativeError0 = new NativeError();
      nativeError0.checkPropertyDefinition(scriptableObject0);
      ContextFactory.getGlobal();
      NativeError nativeError1 = new NativeError();
      NativeError nativeError2 = new NativeError();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ScriptableObject.putConstProperty(nativeContinuation0, (String) null, nativeContinuation0);
      BaseFunction baseFunction0 = new BaseFunction(nativeContinuation0, nativeContinuation0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      nativeJavaTopPackage0.isDataDescriptor(nativeContinuation0);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ContextFactory contextFactory0 = new ContextFactory();
      nativeContinuation0.isGenericDescriptor(nativeJavaTopPackage0);
      NativeContinuation nativeContinuation1 = new NativeContinuation();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeContinuation0, "rjV9c-}lv4Gwq'x#<", 0);
      ContextFactory contextFactory0 = new ContextFactory();
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      nativeBoolean0.delete(1);
      NativeError nativeError0 = new NativeError();
      nativeError0.checkPropertyDefinition(scriptableObject0);
      ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Context.enter(context0);
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      importerTopLevel0.checkPropertyChange("error reporter", scriptableObject0, scriptableObject0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test047()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Delegator delegator0 = new Delegator(nativeContinuation0);
      Synchronizer synchronizer0 = new Synchronizer(delegator0, delegator0);
      Double double0 = new Double(13);
      ScriptableObject.isFalse(synchronizer0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeError nativeError0 = new NativeError();
      Class<FieldAndMethods> class0 = FieldAndMethods.class;
      ScriptableObject.getTypedProperty((Scriptable) nativeContinuation0, "y$$5yoR!S]_f*)", class0);
      // Undeclared exception!
      try { 
        BaseFunction.isApply((IdFunctionObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.BaseFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ScriptableObject.putConstProperty(nativeContinuation0, (String) null, nativeContinuation0);
      BaseFunction baseFunction0 = new BaseFunction(nativeContinuation0, nativeContinuation0);
      ClassLoader.getSystemClassLoader();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Byte byte0 = new Byte((byte) (-113));
      importerTopLevel0.getOwnPropertyDescriptor(context0, byte0);
      BoundFunction boundFunction0 = null;
      try {
        boundFunction0 = new BoundFunction(context0, (Scriptable) null, baseFunction0, baseFunction0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      ContextFactory contextFactory1 = ContextFactory.getGlobal();
      Context context0 = contextFactory1.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      importerTopLevel0.getOwnPropertyDescriptor(context0, contextFactory0);
      NativeError nativeError0 = new NativeError();
      // Undeclared exception!
      try { 
        nativeError0.isDataDescriptor((ScriptableObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      BaseFunction baseFunction0 = new BaseFunction(nativeJavaTopPackage0, nativeJavaTopPackage0);
      ScriptableObject.getProperty((Scriptable) baseFunction0, 8);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext((Context) null);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      ScriptableObject.getTopScopeValue(importerTopLevel0, context0);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Number;
      importerTopLevel0.getBuiltinCtor(topLevel_Builtins0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      contextFactory0.getE4xImplementationFactory();
      ScriptableObject.getArrayPrototype(nativeContinuation0);
      // Undeclared exception!
      try { 
        NativeBoolean.init((Scriptable) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: Boolean.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      int int0 = 127;
      ScriptableObject.getArrayPrototype(nativeError0);
      // Undeclared exception!
      try { 
        ScriptableObject.getTopScopeValue((Scriptable) null, nativeError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray((-11L));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArray0, context0, 11, 3);
      idFunctionObject0.setAttributes(130, 12);
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      nativeBoolean0.delete(125);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context1 = contextFactory0.enterContext();
      Context.enter(context1);
      // Undeclared exception!
      try { 
        nativeBoolean0.defineOwnProperties(context1, idFunctionObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type object
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      ScriptableObject.hasProperty((Scriptable) nativeError0, 127);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      nativeBoolean0.delete(0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      BaseFunction baseFunction0 = new BaseFunction(nativeContinuation0, nativeContinuation0);
      ScriptableObject.getProperty((Scriptable) baseFunction0, 2);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeError nativeError0 = new NativeError();
      NativeContinuation nativeContinuation1 = new NativeContinuation();
      nativeError0.setAttributes(8, (Scriptable) nativeContinuation0, 8);
      nativeContinuation1.defineConst((String) null, baseFunction0);
      NativeBoolean.init(nativeError0, true);
      nativeError0.getClassName();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test056()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeContinuation0, "rjV9c-}lv4Gwq'x#<", 0);
      ContextFactory contextFactory0 = new ContextFactory();
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      // Undeclared exception!
      try { 
        importerTopLevel0.putConst("value", scriptableObject0, nativeContinuation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: redeclaration of var value.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = Context.enter((Context) null, contextFactory0);
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage(true, ".HHvb", classLoader0);
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeJavaPackage0, "construct", "error reporter", false, false);
      // Undeclared exception!
      try { 
        nativeJavaPackage0.addLazilyInitializedValue(".HHvb", (-3308), lazilyLoadedCtor0, 1456);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // .HHvb
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test058()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Class<NativeNumber> class0 = NativeNumber.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) nativeContinuation0, class0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.NativeNumber\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object[] objectArray0 = Context.emptyArgs;
      nativeContinuation0.size();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ContextFactory contextFactory0 = new ContextFactory();
      nativeContinuation0.isGenericDescriptor(nativeIterator_StopIteration0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test060()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      BaseFunction baseFunction0 = new BaseFunction(nativeJavaTopPackage0, nativeJavaTopPackage0);
      NativeArray nativeArray0 = new NativeArray(0);
      ScriptableObject.deleteProperty((Scriptable) nativeArray0, "");
      NativeError nativeError0 = new NativeError();
      ScriptableObject.ensureScriptableObject(nativeJavaTopPackage0);
      nativeError0.isDataDescriptor(baseFunction0);
      // Undeclared exception!
      try { 
        NativeMath.init(baseFunction0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Context context0 = Context.enter();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      importerTopLevel0.putConst("error reporter", nativeIterator_StopIteration0, nativeIterator_StopIteration0);
      Class<Integer> class0 = Integer.class;
      NativeError nativeError0 = new NativeError();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "error reporter";
      // Undeclared exception!
      try { 
        nativeError0.defineFunctionProperties(stringArray0, class0, (-1588406278));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"error reporter\" not found in \"java.lang.Integer\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Delegator delegator0 = new Delegator(nativeContinuation0);
      // Undeclared exception!
      try { 
        NativeBoolean.init(delegator0, false);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test063()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      BaseFunction baseFunction0 = new BaseFunction(nativeJavaTopPackage0, nativeJavaTopPackage0);
      ScriptableObject.redefineProperty(baseFunction0, "set", false);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.replace((Object) baseFunction0, (Object) "");
      nativeIterator_StopIteration0.isEmpty();
      // Undeclared exception!
      try { 
        JavaAdapter.getFunction(nativeJavaTopPackage0, "A-r4<hy0M{Y6 +O?87");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Delegator delegator0 = new Delegator(nativeContinuation0);
      nativeContinuation0.get((Object) delegator0);
      NativeContinuation nativeContinuation1 = new NativeContinuation();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray((-11L));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArray0, context0, 11, 3);
      idFunctionObject0.setAttributes(130, 12);
      // Undeclared exception!
      try { 
        nativeArray0.getOwnPropertyDescriptor(context0, idFunctionObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test066()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(504L);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeArray0);
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(504L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(504L, nativeArray0.getLength());
      
      Context context0 = Context.getCurrentContext();
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertNotNull(context0);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      Context context1 = contextFactory0.enter();
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context1.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertNotNull(context1);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(0, context1.getOptimizationLevel());
      assertTrue(context1.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertFalse(context1.isSealed());
      assertSame(context1, context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context1);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context1.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(importerTopLevel0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(0, context1.getOptimizationLevel());
      assertTrue(context1.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertFalse(context1.isSealed());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Array;
      IdFunctionObject idFunctionObject0 = (IdFunctionObject)importerTopLevel0.getBuiltinCtor(topLevel_Builtins0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context1.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(idFunctionObject0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(0, context1.getOptimizationLevel());
      assertTrue(context1.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertFalse(context1.isSealed());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(1, idFunctionObject0.getArity());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertTrue(idFunctionObject0.isExtensible());
      assertFalse(idFunctionObject0.isEmpty());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(1, idFunctionObject0.methodId());
      assertEquals(1, idFunctionObject0.getLength());
      assertEquals("Array", idFunctionObject0.getFunctionName());
      assertSame(context1, context0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) contextFactory0;
      objectArray0[1] = (Object) topLevel_Builtins0;
      BoundFunction boundFunction0 = new BoundFunction(context0, nativeArray0, idFunctionObject0, nativeArray0, objectArray0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context1.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(boundFunction0);
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(504L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(504L, nativeArray0.getLength());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(0, context1.getOptimizationLevel());
      assertTrue(context1.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertFalse(context1.isSealed());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(1, idFunctionObject0.getArity());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertTrue(idFunctionObject0.isExtensible());
      assertFalse(idFunctionObject0.isEmpty());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(1, idFunctionObject0.methodId());
      assertEquals(1, idFunctionObject0.getLength());
      assertEquals("Array", idFunctionObject0.getFunctionName());
      assertTrue(boundFunction0.isExtensible());
      assertEquals(0, boundFunction0.getLength());
      assertEquals("function", boundFunction0.getTypeOf());
      assertFalse(boundFunction0.hasPrototypeMap());
      assertFalse(boundFunction0.isSealed());
      assertEquals("Function", boundFunction0.getClassName());
      assertFalse(boundFunction0.isEmpty());
      assertFalse(boundFunction0.avoidObjectDetection());
      assertEquals(2, objectArray0.length);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeIterator_StopIteration0);
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      
      Delegator delegator0 = new Delegator();
      assertNotNull(delegator0);
      
      Object object0 = nativeIterator_StopIteration0.replace((Object) context1, (Object) delegator0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context1.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNull(object0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(0, context1.getOptimizationLevel());
      assertTrue(context1.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertFalse(context1.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertSame(context1, context0);
      
      Synchronizer synchronizer0 = new Synchronizer(idFunctionObject0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context1.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(synchronizer0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(0, context1.getOptimizationLevel());
      assertTrue(context1.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertFalse(context1.isSealed());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(1, idFunctionObject0.getArity());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertTrue(idFunctionObject0.isExtensible());
      assertFalse(idFunctionObject0.isEmpty());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(1, idFunctionObject0.methodId());
      assertEquals(1, idFunctionObject0.getLength());
      assertEquals("Array", idFunctionObject0.getFunctionName());
      
      boolean boolean0 = ScriptableObject.isFalse(idFunctionObject0);
      assertFalse(boolean0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context1.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(0, context1.getOptimizationLevel());
      assertTrue(context1.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertFalse(context1.isSealed());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(1, idFunctionObject0.getArity());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertTrue(idFunctionObject0.isExtensible());
      assertFalse(idFunctionObject0.isEmpty());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(1, idFunctionObject0.methodId());
      assertEquals(1, idFunctionObject0.getLength());
      assertEquals("Array", idFunctionObject0.getFunctionName());
      assertSame(context1, context0);
      
      Context context2 = contextFactory0.makeContext();
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context2.generateObserverCount);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertNotNull(context2);
      assertFalse(context2.equals((Object)context1));
      assertFalse(context2.equals((Object)context0));
      assertEquals(0, context2.getLanguageVersion());
      assertFalse(context2.isGeneratingDebug());
      assertFalse(context2.isSealed());
      assertEquals(0, context2.getInstructionObserverThreshold());
      assertEquals(0, context2.getOptimizationLevel());
      assertTrue(context2.isGeneratingSource());
      assertFalse(context2.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context2.getMaximumInterpreterStackDepth());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotSame(context2, context1);
      assertNotSame(context2, context0);
      
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel(context2, false);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context2.generateObserverCount);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(importerTopLevel1);
      assertFalse(context2.equals((Object)context1));
      assertFalse(context2.equals((Object)context0));
      assertFalse(importerTopLevel1.equals((Object)importerTopLevel0));
      assertEquals(0, context2.getLanguageVersion());
      assertFalse(context2.isGeneratingDebug());
      assertFalse(context2.isSealed());
      assertEquals(0, context2.getInstructionObserverThreshold());
      assertEquals(0, context2.getOptimizationLevel());
      assertTrue(context2.isGeneratingSource());
      assertFalse(context2.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context2.getMaximumInterpreterStackDepth());
      assertFalse(importerTopLevel1.avoidObjectDetection());
      assertEquals("object", importerTopLevel1.getTypeOf());
      assertEquals("global", importerTopLevel1.getClassName());
      assertTrue(importerTopLevel1.isExtensible());
      assertTrue(importerTopLevel1.hasPrototypeMap());
      assertFalse(importerTopLevel1.isSealed());
      assertFalse(importerTopLevel1.isEmpty());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.clearAssertionStatus();
      NativeError nativeError0 = new NativeError();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeError0);
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      
      String string0 = nativeError0.getClassName();
      assertEquals("Error", string0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(string0);
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test067()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeContinuation0);
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isExtensible());
      
      BaseFunction baseFunction0 = new BaseFunction(nativeContinuation0, nativeContinuation0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(baseFunction0);
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.isSealed());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeJavaTopPackage0);
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      
      int int0 = (-942);
      nativeJavaTopPackage0.setAttributes("+B}", (Scriptable) nativeContinuation0, 5);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      
      Context context0 = Context.getContext();
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertNotNull(context0);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(importerTopLevel0);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      
      // Undeclared exception!
      try { 
        baseFunction0.defineOwnProperty(context0, importerTopLevel0, nativeJavaTopPackage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test068()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeContinuation0);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      
      Scriptable scriptable0 = ScriptableObject.getArrayPrototype(nativeContinuation0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNull(scriptable0);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      
      // Undeclared exception!
      try { 
        NativeBoolean.init((Scriptable) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: Boolean.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test069()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeJavaTopPackage0);
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      
      BaseFunction baseFunction0 = new BaseFunction(nativeJavaTopPackage0, nativeJavaTopPackage0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(baseFunction0);
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertTrue(baseFunction0.isEmpty());
      assertTrue(baseFunction0.isExtensible());
      assertEquals("function", baseFunction0.getTypeOf());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertFalse(baseFunction0.isSealed());
      
      Object object0 = ScriptableObject.getProperty((Scriptable) baseFunction0, 8);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(object0);
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertTrue(baseFunction0.isEmpty());
      assertTrue(baseFunction0.isExtensible());
      assertEquals("function", baseFunction0.getTypeOf());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertFalse(baseFunction0.isSealed());
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      NativeError nativeError0 = new NativeError();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeError0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeContinuation0);
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      
      // Undeclared exception!
      try { 
        nativeContinuation0.getAttributes("removeAll", (Scriptable) nativeJavaTopPackage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property removeAll not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeContinuation0);
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeContinuation0, 4);
      assertFalse(boolean0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeBoolean0);
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isEmpty());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      
      nativeBoolean0.delete(13);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isEmpty());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      Context context0 = contextFactory0.enterContext();
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertNotNull(context0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      
      Context context1 = Context.enter(context0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context1.generateObserverCount);
      assertNotNull(context1);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context1.getOptimizationLevel());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isSealed());
      assertFalse(context1.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertTrue(context1.isGeneratingSource());
      assertSame(context0, context1);
      assertSame(context1, context0);
      
      nativeBoolean0.defineOwnProperties(context0, nativeContinuation0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isEmpty());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertSame(context0, context1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      
      BaseFunction baseFunction0 = new BaseFunction(nativeContinuation0, nativeContinuation0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(baseFunction0);
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(baseFunction0.isEmpty());
      assertTrue(baseFunction0.isExtensible());
      assertEquals("function", baseFunction0.getTypeOf());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertFalse(baseFunction0.isSealed());
      assertEquals("Function", baseFunction0.getClassName());
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) baseFunction0, 861);
      assertFalse(boolean0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(baseFunction0.isEmpty());
      assertTrue(baseFunction0.isExtensible());
      assertEquals("function", baseFunction0.getTypeOf());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertFalse(baseFunction0.isSealed());
      assertEquals("Function", baseFunction0.getClassName());
      
      NativeError nativeError0 = new NativeError();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeError0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      
      boolean boolean1 = ScriptableObject.deleteProperty((Scriptable) nativeError0, (-4966));
      assertTrue(boolean1);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(boolean1 == boolean0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      
      Delegator delegator0 = new Delegator(nativeContinuation0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(delegator0);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      
      Synchronizer synchronizer0 = new Synchronizer(delegator0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(synchronizer0);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      
      synchronizer0.delete((String) null);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      
      Object object0 = nativeContinuation0.getGetterOrSetter((String) null, 13, false);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNull(object0);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      
      nativeContinuation0.initImplementation(delegator0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      
      NativeError nativeError0 = new NativeError();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeError0);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      
      String string0 = nativeError0.getClassName();
      assertEquals("Error", string0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(string0);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test073()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      
      Delegator delegator0 = new Delegator(nativeContinuation0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(delegator0);
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      
      Synchronizer synchronizer0 = new Synchronizer(delegator0, delegator0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(synchronizer0);
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      
      Class<NativeDate> class0 = NativeDate.class;
      // Undeclared exception!
      try { 
        synchronizer0.getDefaultValue(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.NativeDate
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeJavaTopPackage0);
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      
      BaseFunction baseFunction0 = new BaseFunction(nativeJavaTopPackage0, nativeJavaTopPackage0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(baseFunction0);
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertTrue(baseFunction0.isExtensible());
      assertEquals("function", baseFunction0.getTypeOf());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertEquals("Function", baseFunction0.getClassName());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertFalse(baseFunction0.isSealed());
      assertTrue(baseFunction0.isEmpty());
      
      NativeArray nativeArray0 = new NativeArray(0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeArray0);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(0L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.isSealed());
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeArray0, "");
      assertTrue(boolean0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(0L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.isSealed());
      
      NativeError nativeError0 = new NativeError();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeError0);
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      
      boolean boolean1 = nativeError0.isDataDescriptor(baseFunction0);
      assertTrue(boolean1);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(boolean1 == boolean0);
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertTrue(baseFunction0.isExtensible());
      assertEquals("function", baseFunction0.getTypeOf());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertEquals("Function", baseFunction0.getClassName());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertFalse(baseFunction0.isSealed());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(422.672654118311);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeNumber0);
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.isSealed());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isEmpty());
      
      NativeNumber nativeNumber1 = (NativeNumber)ScriptableObject.ensureScriptable(nativeNumber0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeNumber1);
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.isSealed());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber1.avoidObjectDetection());
      assertTrue(nativeNumber1.isExtensible());
      assertTrue(nativeNumber1.isEmpty());
      assertEquals("Number", nativeNumber1.getClassName());
      assertFalse(nativeNumber1.hasPrototypeMap());
      assertFalse(nativeNumber1.isSealed());
      assertEquals("object", nativeNumber1.getTypeOf());
      assertSame(nativeNumber0, nativeNumber1);
      assertSame(nativeNumber1, nativeNumber0);
      
      // Undeclared exception!
      try { 
        nativeNumber0.setInstanceIdAttributes((-16), (-16));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -16
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeContinuation0);
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      
      BaseFunction baseFunction0 = new BaseFunction(nativeContinuation0, nativeContinuation0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(baseFunction0);
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertFalse(baseFunction0.isSealed());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("function", baseFunction0.getTypeOf());
      assertEquals("Function", baseFunction0.getClassName());
      assertTrue(baseFunction0.isEmpty());
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) baseFunction0, "Wl+");
      assertTrue(boolean0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertFalse(baseFunction0.isSealed());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("function", baseFunction0.getTypeOf());
      assertEquals("Function", baseFunction0.getClassName());
      assertTrue(baseFunction0.isEmpty());
      
      NativeError nativeError0 = new NativeError();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeError0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(importerTopLevel0);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      
      Scriptable scriptable0 = JavaAdapter.createAdapterWrapper(importerTopLevel0, importerTopLevel0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(scriptable0);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("JavaObject", scriptable0.getClassName());
      
      importerTopLevel0.putConst("language version", scriptable0, scriptable0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("JavaObject", scriptable0.getClassName());
      
      NativeCall nativeCall0 = context0.currentActivationCall;
      assertNull(nativeCall0);
      
      Arguments arguments0 = null;
      try {
        arguments0 = new Arguments((NativeCall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Arguments", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(importerTopLevel0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeCall0);
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.avoidObjectDetection());
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(importerTopLevel0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(objectArray0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeError0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeError0, 8);
      assertFalse(boolean0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeBoolean0);
      assertTrue(nativeBoolean0.isEmpty());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      
      nativeError0.checkPropertyDefinition(nativeBoolean0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      
      NativeError nativeError1 = new NativeError();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeError1);
      assertFalse(nativeError1.equals((Object)nativeError0));
      assertFalse(nativeError1.avoidObjectDetection());
      assertEquals("Error", nativeError1.getClassName());
      assertFalse(nativeError1.isSealed());
      assertTrue(nativeError1.isEmpty());
      assertTrue(nativeError1.isExtensible());
      assertFalse(nativeError1.hasPrototypeMap());
      assertEquals("object", nativeError1.getTypeOf());
      
      boolean boolean1 = nativeError1.isDataDescriptor(nativeError0);
      assertFalse(boolean1);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeError0.equals((Object)nativeError1));
      assertFalse(nativeError1.equals((Object)nativeError0));
      assertTrue(boolean1 == boolean0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError1.avoidObjectDetection());
      assertEquals("Error", nativeError1.getClassName());
      assertFalse(nativeError1.isSealed());
      assertTrue(nativeError1.isEmpty());
      assertTrue(nativeError1.isExtensible());
      assertFalse(nativeError1.hasPrototypeMap());
      assertEquals("object", nativeError1.getTypeOf());
      assertNotSame(nativeError0, nativeError1);
      assertNotSame(nativeError1, nativeError0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test080()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      
      ScriptableObject.redefineProperty(nativeIterator_StopIteration0, "put", false);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeIterator_StopIteration1);
      assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertTrue(nativeIterator_StopIteration1.isEmpty());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertTrue(nativeIterator_StopIteration1.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      
      Object[] objectArray0 = nativeIterator_StopIteration1.getAllIds();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(objectArray0);
      assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertTrue(nativeIterator_StopIteration1.isEmpty());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertTrue(nativeIterator_StopIteration1.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      assertNotSame(nativeIterator_StopIteration1, nativeIterator_StopIteration0);
      assertEquals(0, objectArray0.length);
      
      Context context0 = Context.getContext();
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(importerTopLevel0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      
      importerTopLevel0.checkPropertyChange("put", nativeIterator_StopIteration1, nativeIterator_StopIteration0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeIterator_StopIteration0.equals((Object)nativeIterator_StopIteration1));
      assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertTrue(nativeIterator_StopIteration1.isEmpty());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertTrue(nativeIterator_StopIteration1.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertNotSame(nativeIterator_StopIteration0, nativeIterator_StopIteration1);
      assertNotSame(nativeIterator_StopIteration1, nativeIterator_StopIteration0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeContinuation0);
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      
      ScriptableObject.putConstProperty(nativeContinuation0, (String) null, nativeContinuation0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      
      BaseFunction baseFunction0 = new BaseFunction(nativeContinuation0, nativeContinuation0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(baseFunction0);
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertFalse(baseFunction0.isSealed());
      assertEquals("Function", baseFunction0.getClassName());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertTrue(baseFunction0.isEmpty());
      assertTrue(baseFunction0.isExtensible());
      assertEquals("function", baseFunction0.getTypeOf());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeJavaTopPackage0);
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      
      ScriptableObject.putProperty((Scriptable) nativeContinuation0, 13, (Object) classLoader0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      
      Float float0 = new Float((-2705.58286444741));
      assertEquals((-2705.5828F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = ScriptableObject.isFalse(float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test082()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeContinuation0);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isEmpty());
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeBoolean0);
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      
      Class<NativeContinuation> class0 = NativeContinuation.class;
      ScriptableObject.defineClass((Scriptable) nativeContinuation0, class0, false);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isEmpty());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      
      NativeError nativeError0 = new NativeError();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeError0);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      
      ContextFactory contextFactory1 = ContextFactory.getGlobal();
      assertNotNull(contextFactory1);
      assertFalse(contextFactory1.equals((Object)contextFactory0));
      assertFalse(contextFactory1.isSealed());
      assertFalse(contextFactory1.hasExplicitGlobal());
      assertNotSame(contextFactory1, contextFactory0);
      
      Context context0 = contextFactory0.enterContext();
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertNotNull(context0);
      assertFalse(contextFactory0.equals((Object)contextFactory1));
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotSame(contextFactory0, contextFactory1);
      
      NativeError nativeError1 = new NativeError();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeError1);
      assertFalse(nativeError1.equals((Object)nativeError0));
      assertTrue(nativeError1.isEmpty());
      assertEquals("Error", nativeError1.getClassName());
      assertFalse(nativeError1.avoidObjectDetection());
      assertFalse(nativeError1.isSealed());
      assertTrue(nativeError1.isExtensible());
      assertFalse(nativeError1.hasPrototypeMap());
      assertEquals("object", nativeError1.getTypeOf());
      
      boolean boolean0 = ScriptableObject.isFalse(contextFactory0);
      assertFalse(boolean0);
      assertFalse(contextFactory0.equals((Object)contextFactory1));
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotSame(contextFactory0, contextFactory1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Context context0 = new Context();
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertNotNull(context0);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeCall0);
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeCall0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(objectArray0);
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeBoolean0);
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      
      Class<FieldAndMethods> class0 = FieldAndMethods.class;
      FieldAndMethods fieldAndMethods0 = ScriptableObject.getTypedProperty((Scriptable) nativeBoolean0, 495, class0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNull(fieldAndMethods0);
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        nativeBoolean0.getDefaultValue(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeContinuation0);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      
      Delegator delegator0 = new Delegator();
      assertNotNull(delegator0);
      
      boolean boolean0 = nativeContinuation0.isGetterOrSetter("getArity", 204, false);
      assertFalse(boolean0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      
      nativeContinuation0.defineConst("init", delegator0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeContinuation0);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isExtensible());
      
      ScriptableObject.redefineProperty(nativeContinuation0, "", false);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isExtensible());
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.enter();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertNotNull(context0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      
      BoundFunction boundFunction0 = new BoundFunction(context0, nativeContinuation0, nativeContinuation0, nativeIterator_StopIteration0, context0.emptyArgs);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(boundFunction0);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(boundFunction0.isSealed());
      assertFalse(boundFunction0.hasPrototypeMap());
      assertEquals(0, boundFunction0.getLength());
      assertEquals("Function", boundFunction0.getClassName());
      assertFalse(boundFunction0.isEmpty());
      assertFalse(boundFunction0.avoidObjectDetection());
      assertTrue(boundFunction0.isExtensible());
      assertEquals("function", boundFunction0.getTypeOf());
      
      Object object0 = nativeIterator_StopIteration0.replace((Object) "", (Object) boundFunction0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNull(object0);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(boundFunction0.isSealed());
      assertFalse(boundFunction0.hasPrototypeMap());
      assertEquals(0, boundFunction0.getLength());
      assertEquals("Function", boundFunction0.getClassName());
      assertFalse(boundFunction0.isEmpty());
      assertFalse(boundFunction0.avoidObjectDetection());
      assertTrue(boundFunction0.isExtensible());
      assertEquals("function", boundFunction0.getTypeOf());
      
      Synchronizer synchronizer0 = new Synchronizer(nativeContinuation0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(synchronizer0);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isExtensible());
      
      boolean boolean0 = ScriptableObject.isFalse(synchronizer0);
      assertFalse(boolean0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isExtensible());
      
      boolean boolean1 = nativeContinuation0.isGenericDescriptor(nativeIterator_StopIteration0);
      assertTrue(boolean1);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(boolean1 == boolean0);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      
      NativeContinuation nativeContinuation1 = new NativeContinuation();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeContinuation1);
      assertFalse(nativeContinuation1.equals((Object)nativeContinuation0));
      assertFalse(nativeContinuation1.avoidObjectDetection());
      assertFalse(nativeContinuation1.isSealed());
      assertTrue(nativeContinuation1.isEmpty());
      assertTrue(nativeContinuation1.isExtensible());
      assertFalse(nativeContinuation1.hasPrototypeMap());
      assertEquals("object", nativeContinuation1.getTypeOf());
      assertEquals("Continuation", nativeContinuation1.getClassName());
      
      Scriptable scriptable0 = ScriptableObject.getArrayPrototype(synchronizer0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNull(scriptable0);
      assertFalse(nativeContinuation0.equals((Object)nativeContinuation1));
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isExtensible());
      assertNotSame(nativeContinuation0, nativeContinuation1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeContinuation0);
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      
      Delegator delegator0 = new Delegator(nativeContinuation0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(delegator0);
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      
      // Undeclared exception!
      try { 
        ScriptableObject.putProperty((Scriptable) delegator0, 0, (Object) nativeContinuation0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      
      nativeIterator_StopIteration0.put(1, (Scriptable) nativeContinuation0, (Object) nativeContinuation0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      
      NativeArray nativeArray0 = new NativeArray(4);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeArray0);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.isSealed());
      assertEquals(4L, nativeArray0.getLength());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(4L, nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      
      boolean boolean0 = nativeArray0.isEmpty();
      assertTrue(boolean0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.isSealed());
      assertEquals(4L, nativeArray0.getLength());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(4L, nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      
      NativeError nativeError0 = new NativeError();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeError0);
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      
      boolean boolean1 = nativeIterator_StopIteration0.has(1, (Scriptable) nativeError0);
      assertFalse(boolean1);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(boolean1 == boolean0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.enterContext();
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertNotNull(context0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(importerTopLevel0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      
      // Undeclared exception!
      try { 
        importerTopLevel0.initStandardObjects(context0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeContinuation0);
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      
      Delegator delegator0 = new Delegator(nativeContinuation0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(delegator0);
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      
      boolean boolean0 = nativeContinuation0.sameValue(delegator0, delegator0);
      assertTrue(boolean0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      
      // Undeclared exception!
      try { 
        NativeBoolean.init(delegator0, false);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeError0);
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeError0, 127);
      assertFalse(boolean0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      
      String string0 = nativeError0.getClassName();
      assertEquals("Error", string0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(string0);
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test091()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertNotNull(nativeError0);
      //  // Unstable assertion: assertTrue(nativeError0.isEmpty());
      //  // Unstable assertion: assertFalse(nativeError0.avoidObjectDetection());
      //  // Unstable assertion: assertEquals("Error", nativeError0.getClassName());
      //  // Unstable assertion: assertFalse(nativeError0.isSealed());
      //  // Unstable assertion: assertFalse(nativeError0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeError0.getTypeOf());
      //  // Unstable assertion: assertTrue(nativeError0.isExtensible());
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeError0, 127);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertTrue(nativeError0.isEmpty());
      //  // Unstable assertion: assertFalse(nativeError0.avoidObjectDetection());
      //  // Unstable assertion: assertEquals("Error", nativeError0.getClassName());
      //  // Unstable assertion: assertFalse(nativeError0.isSealed());
      //  // Unstable assertion: assertFalse(nativeError0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeError0.getTypeOf());
      //  // Unstable assertion: assertTrue(nativeError0.isExtensible());
      
      NativeError nativeError1 = new NativeError();
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertNotNull(nativeError1);
      //  // Unstable assertion: assertFalse(nativeError1.equals((Object)nativeError0));
      //  // Unstable assertion: assertTrue(nativeError1.isExtensible());
      //  // Unstable assertion: assertFalse(nativeError1.avoidObjectDetection());
      //  // Unstable assertion: assertEquals("Error", nativeError1.getClassName());
      //  // Unstable assertion: assertTrue(nativeError1.isEmpty());
      //  // Unstable assertion: assertFalse(nativeError1.isSealed());
      //  // Unstable assertion: assertFalse(nativeError1.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeError1.getTypeOf());
      
      boolean boolean1 = ScriptableObject.deleteProperty((Scriptable) nativeError0, 2);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertFalse(nativeError0.equals((Object)nativeError1));
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(nativeError0.isEmpty());
      //  // Unstable assertion: assertFalse(nativeError0.avoidObjectDetection());
      //  // Unstable assertion: assertEquals("Error", nativeError0.getClassName());
      //  // Unstable assertion: assertFalse(nativeError0.isSealed());
      //  // Unstable assertion: assertFalse(nativeError0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeError0.getTypeOf());
      //  // Unstable assertion: assertTrue(nativeError0.isExtensible());
      //  // Unstable assertion: assertNotSame(nativeError0, nativeError1);
      
      NativeArray nativeArray0 = new NativeArray(0L);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertNotNull(nativeArray0);
      //  // Unstable assertion: assertFalse(nativeArray0.isSealed());
      //  // Unstable assertion: assertFalse(nativeArray0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeArray0.getTypeOf());
      //  // Unstable assertion: assertTrue(nativeArray0.isEmpty());
      //  // Unstable assertion: assertEquals(0L, nativeArray0.jsGet_length());
      //  // Unstable assertion: assertEquals("Array", nativeArray0.getClassName());
      //  // Unstable assertion: assertTrue(nativeArray0.isExtensible());
      //  // Unstable assertion: assertEquals(0L, nativeArray0.getLength());
      //  // Unstable assertion: assertFalse(nativeArray0.avoidObjectDetection());
      
      Iterator iterator0 = nativeArray0.iterator();
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertNotNull(iterator0);
      //  // Unstable assertion: assertFalse(nativeArray0.isSealed());
      //  // Unstable assertion: assertFalse(nativeArray0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeArray0.getTypeOf());
      //  // Unstable assertion: assertTrue(nativeArray0.isEmpty());
      //  // Unstable assertion: assertEquals(0L, nativeArray0.jsGet_length());
      //  // Unstable assertion: assertEquals("Array", nativeArray0.getClassName());
      //  // Unstable assertion: assertTrue(nativeArray0.isExtensible());
      //  // Unstable assertion: assertEquals(0L, nativeArray0.getLength());
      //  // Unstable assertion: assertFalse(nativeArray0.avoidObjectDetection());
      
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(8, (Scriptable) nativeError0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Property 8 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertNotNull(context0);
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      
      NativeObject nativeObject0 = (NativeObject)context0.initStandardObjects();
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeObject0);
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(nativeObject0.isSealed());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.avoidObjectDetection());
      
      double double0 = Context.toNumber(nativeObject0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(nativeObject0.isSealed());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.avoidObjectDetection());
      
      InterpreterData interpreterData0 = new InterpreterData(1, "language version", "language version", false);
      assertNotNull(interpreterData0);
      assertEquals(0, interpreterData0.getParamCount());
      assertNull(interpreterData0.getFunctionName());
      assertFalse(interpreterData0.isFunction());
      assertFalse(interpreterData0.isGeneratedScript());
      assertEquals(0, interpreterData0.getFunctionCount());
      assertEquals("language version", interpreterData0.getSourceName());
      assertFalse(interpreterData0.isTopLevel());
      
      NativeString nativeString0 = new NativeString("error reporter");
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeString0);
      assertTrue(nativeString0.isEmpty());
      assertEquals("String", nativeString0.getClassName());
      assertFalse(nativeString0.hasPrototypeMap());
      assertEquals("object", nativeString0.getTypeOf());
      assertTrue(nativeString0.isExtensible());
      assertEquals("error reporter", nativeString0.toString());
      assertFalse(nativeString0.avoidObjectDetection());
      assertFalse(nativeString0.isSealed());
      
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) nativeObject0, "language version", context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000349 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeContinuation0);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      
      String string0 = null;
      NativeError nativeError0 = new NativeError();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeError0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      
      // Undeclared exception!
      try { 
        NativeJavaArray.wrap((Scriptable) nativeContinuation0, (Object) nativeError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      NativeString nativeString0 = new NativeString("error reporter");
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) scriptableObject0, "language version", context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000346 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeContinuation0, true);
      ScriptableObject.buildDataDescriptor(nativeContinuation0, nativeGenerator0, 4);
      ContextFactory contextFactory0 = new ContextFactory();
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      nativeBoolean0.delete(4215);
      NativeError nativeError0 = new NativeError();
      nativeError0.checkPropertyDefinition(nativeContinuation0);
      ContextFactory.getGlobal();
      NativeError nativeError1 = new NativeError();
      NativeError nativeError2 = new NativeError();
      NativeError nativeError3 = new NativeError();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ScriptableObject.redefineProperty(nativeIterator_StopIteration0, "put", false);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      ContextFactory contextFactory0 = new ContextFactory();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertTrue(nativeContinuation0.isExtensible());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test097()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeNumber nativeNumber0 = new NativeNumber(0.4342944819032518);
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptable(classLoader0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeObject nativeObject0 = new NativeObject();
      nativeError0.setStack(nativeObject0);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Context context0 = Context.enter();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      importerTopLevel0.putConst("error reporter", nativeIterator_StopIteration0, nativeIterator_StopIteration0);
      NativeCall nativeCall0 = context0.currentActivationCall;
      Arguments arguments0 = null;
      try {
        arguments0 = new Arguments((NativeCall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Arguments", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeError0, (-4966));
      assertTrue(nativeError0.isExtensible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Delegator delegator0 = new Delegator(nativeContinuation0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      ScriptableObject.putProperty((Scriptable) nativeContinuation0, 865, (Object) null);
      Context context0 = Context.enter();
      Context context1 = Context.enter(context0);
      BoundFunction boundFunction0 = new BoundFunction(context1, delegator0, delegator0, nativeContinuation0, context0.emptyArgs);
      JavaAdapter.getFunction(delegator0, "language version");
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeContinuation0, delegator0, 130, "SHc]X><&H.T#)qQJ", 2, nativeContinuation0);
      assertFalse(nativeContinuation0.isEmpty());
  }
}

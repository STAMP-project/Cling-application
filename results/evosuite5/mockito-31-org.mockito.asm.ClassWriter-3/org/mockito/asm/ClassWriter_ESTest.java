/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 21:49:17 GMT 2019
 */

package org.mockito.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.Attribute;
import org.mockito.asm.ClassReader;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.FieldVisitor;
import org.mockito.asm.Item;
import org.mockito.asm.MethodWriter;
import org.mockito.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(891);
      String string0 = classWriter0.getCommonSuperClass("org.mockito.asm.ByteVector", "java/lang/Object");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      String string0 = classWriter0.getCommonSuperClass("org.mockito.asm.ClassAdapter", "org.mockito.asm.ClassAdapter");
      assertEquals("org.mockito.asm.ClassAdapter", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-188));
      String string0 = classWriter0.getCommonSuperClass("org.mockito.asm.ByteVector", "org.mockito.asm.ClassAdapter");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2039));
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1, (-2145));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-188));
      Item[] itemArray0 = new Item[6];
      classWriter0.addType("org.mockito.asm.ClassAdapter");
      classWriter0.typeTable = itemArray0;
      classWriter0.addType("vMxgyu?&");
      classWriter0.addType("[JzM-AJ\"[HcLOwOCr");
      classWriter0.addType("$3$<L");
      classWriter0.addUninitializedType("yJGJB@}MSF>C8", 1564);
      int int0 = classWriter0.addUninitializedType("m$ dB`(", (-188));
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2039));
      classWriter0.addUninitializedType("Synthetic", (-2039));
      int int0 = classWriter0.addUninitializedType("Synthetic", (-2039));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      int int0 = classWriter0.addType("vMxgyu?&");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("vMxgyu?&");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(171);
      int int0 = classWriter0.newNameType("", "");
      assertEquals(2, int0);
      
      int int1 = classWriter0.newMethod("", "", "", false);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3110));
      classWriter0.visitField((-3110), "@We", "@We", "@We", "@We");
      int int0 = classWriter0.newConst("@We");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1302));
      Item item0 = classWriter0.newDouble((-1302));
      Item item1 = classWriter0.newDouble((-1302));
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(171);
      Item item0 = classWriter0.newLong(171);
      Item item1 = classWriter0.newLong(171);
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1752);
      Item item0 = classWriter0.newFloat(1752);
      Item item1 = classWriter0.newFloat(1752);
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1740);
      Item item0 = classWriter0.newInteger(1740);
      Item item1 = classWriter0.newInteger(1740);
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-261));
      int int0 = classWriter0.newMethod("SourceDebugExtension", "SourceDebugExtension", "SourceDebugExtension", true);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      Item item0 = classWriter0.newFieldItem("", "", "");
      Item item1 = classWriter0.newFieldItem("", "", "");
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(451);
      Type type0 = Type.BOOLEAN_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classWriter0.newConst(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@484d1989
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      Type type0 = Type.getObjectType("- X{Ma5jZZ>c(8");
      FieldVisitor fieldVisitor0 = classWriter0.visitField(4, "- X{Ma5jZZ>c(8", "- X{Ma5jZZ>c(8", "- X{Ma5jZZ>c(8", type0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-261));
      Double double0 = new Double(1);
      int int0 = classWriter0.newConst(double0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(22);
      Long long0 = new Long(1);
      int int0 = classWriter0.newConst(long0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Float float0 = new Float((double) 2);
      Item item0 = classWriter0.newConstItem(float0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      Boolean boolean0 = Boolean.FALSE;
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(40);
      Boolean boolean0 = Boolean.TRUE;
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-300));
      Short short0 = new Short((short)41);
      Item item0 = classWriter0.newConstItem(short0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      Character character0 = new Character('=');
      FieldVisitor fieldVisitor0 = classWriter0.visitField(7, "- X{Ma5jZZ>c(8", "- X{Ma5jZZ>c(8", "- X{Ma5jZZ>c(8", character0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(170);
      int int0 = classWriter0.newConst(classWriter0.COMPUTE_FRAMES);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      Attribute attribute0 = new Attribute("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
      byte[] byteArray0 = new byte[6];
      attribute0.value = byteArray0;
      classWriter0.visitAttribute(attribute0);
      byte[] byteArray1 = classWriter0.toByteArray();
      assertEquals(259, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(22);
      classWriter0.visitInnerClass("InnerClasses", "InnerClasses", "InnerClasses", 22);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(58, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-277));
      String[] stringArray0 = new String[0];
      classWriter0.visit((-277), (-277), "bk=/cR[bbi8u", "bk=/cR[bbi8u", "bk=/cR[bbi8u", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(81, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      String[] stringArray0 = new String[0];
      classWriter0.visit(8, (-3080), "", "", "qZ5{5o!7K!*:+PynY", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(110, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      stringArray0[2] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Deprecated", "Deprecated", "Deprecated", stringArray0, false, false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(95, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(71);
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 71);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(22);
      classWriter0.visitInnerClass(".s.IFJDCS", "3,nLP%)9G?QK", ".s.IFJDCS", 41);
      classWriter0.visitInnerClass("InnerClasses", "InnerClasses", "InnerClasses", 22);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      classWriter0.visitAnnotation("", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(67, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2270));
      classWriter0.visitAnnotation(";H", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(71, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(457);
      classWriter0.visitOuterClass("org.mockito.asm.Item", "A", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitOuterClass("t~1{i`NI>5*5iX", (String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2036));
      classWriter0.visitSource("", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(77, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-609));
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2622);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "RuntimeVisibleAnnotations";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "v(w5D]H@Jx c";
      stringArray0[4] = "v(w5D]H@Jx c";
      stringArray0[5] = "";
      classWriter0.visit(168, 2622, "v(w5D]H@Jx c", "RuntimeVisibleAnnotations", "", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(111, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(14);
      classWriter0.visit(14, 14, "?p*{", "?p*{", "?p*{", (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(185);
      classWriter0.visit(23, 718, "InnerClasses", (String) null, (String) null, (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(494);
      classWriter0.visitField((-3171), "#nk4Dk;<`2zFWVbZ", "#nk4Dk;<`2zFWVbZ", "#nk4Dk;<`2zFWVbZ", "#nk4Dk;<`2zFWVbZ");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(135, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1752);
      Byte byte0 = new Byte((byte) (-105));
      int int0 = classWriter0.newConst(byte0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(171);
      classWriter0.newMethod("", "", "", false);
      Item item0 = classWriter0.newMethodItem("", "", "", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(451);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(451, "StackMap", "StackMap", "StackMap", stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(11);
      int int0 = classWriter0.newField("8Foi,uugyj#", "8Foi,uugyj#", "8Foi,uugyj#");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitOuterClass("3 KN3acQ", "V=YaWq7s,G,", "3 KN3acQ");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(85, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.mockito.asm.ByteVector");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 853);
      int int0 = classWriter0.addUninitializedType("org.mockito.asm.ByteVector", 4);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1302));
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }
}

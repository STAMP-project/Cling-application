/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 18:53:17 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Months;
import org.joda.time.Period;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class TimeOfDay_ESTest extends TimeOfDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      Months months0 = Months.ONE;
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.plus(months0);
      assertEquals(0, timeOfDay1.getHourOfDay());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      Period period0 = new Period((-357), 2, 2, 2731);
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withPeriodAdded(period0, 0);
      assertEquals(0, timeOfDay1.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.minusMinutes(0);
      assertEquals(0, timeOfDay1.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      TimeOfDay timeOfDay0 = new TimeOfDay(14, 3, 14, 3, gJChronology0);
      DateTimeFieldType dateTimeFieldType0 = timeOfDay0.getFieldType(3);
      TimeOfDay timeOfDay1 = timeOfDay0.withField(dateTimeFieldType0, 3);
      assertSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withChronologyRetainFields((Chronology) null);
      assertEquals(4, timeOfDay1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      TimeOfDay timeOfDay1 = timeOfDay0.withChronologyRetainFields(gJChronology0);
      assertNotSame(timeOfDay1, timeOfDay0);
      assertEquals(21, timeOfDay1.getSecondOfMinute());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      // Undeclared exception!
      try { 
        timeOfDay0.getField(99);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 99
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1073), 3, 3, 0, 0, 3);
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(mockDate0);
      assertEquals(0, timeOfDay0.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      String string0 = timeOfDay0.MIDNIGHT.toString();
      assertEquals("T00:00:00.000", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay(3, 3, buddhistChronology0);
      assertEquals(3, timeOfDay0.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      TimeOfDay timeOfDay0 = new TimeOfDay(dateTimeZone0);
      assertEquals(21, timeOfDay0.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.plusSeconds((-848));
      assertEquals(52, timeOfDay1.getSecondOfMinute());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.plusMinutes(1);
      assertEquals(1, timeOfDay1.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.plusMillis(3);
      assertEquals(3, timeOfDay1.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.plus((ReadablePeriod) null);
      assertEquals(4, timeOfDay1.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0, 1, 1);
      assertEquals(1, timeOfDay0.getSecondOfMinute());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeOfDay timeOfDay0 = new TimeOfDay(mockGregorianCalendar0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      // Undeclared exception!
      try { 
        timeOfDay0.withField(dateTimeFieldType0, 505);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 505 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.minusHours(3);
      assertEquals(21, timeOfDay1.getHourOfDay());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.minusSeconds(3);
      assertEquals(57, timeOfDay1.getSecondOfMinute());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      DateTime dateTime0 = timeOfDay0.toDateTimeToday();
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withMillisOfSecond(2);
      assertEquals(2, timeOfDay1.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay(mockGregorianCalendar0, ethiopicChronology0);
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, (Chronology) ethiopicChronology0);
      assertEquals(21, timeOfDay1.getSecondOfMinute());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      timeOfDay0.MIDNIGHT.toLocalTime();
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.withHourOfDay(5);
      assertEquals(5, timeOfDay1.getHourOfDay());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = timeOfDay0.getFieldTypes();
      assertEquals(4, dateTimeFieldTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      assertEquals(4, timeOfDay0.size());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      
      TimeOfDay timeOfDay1 = timeOfDay0.minusMillis((-181));
      assertEquals(501, timeOfDay1.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      assertEquals(21, timeOfDay0.getHourOfDay());
      
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.plusHours(3);
      assertEquals(3, timeOfDay1.getHourOfDay());
      assertEquals(4, timeOfDay1.size());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(683, 683, 3, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 683 for hourOfDay must not be larger than 23
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.withMinuteOfHour(1);
      assertEquals(4, timeOfDay1.size());
      assertEquals(320, timeOfDay1.getMillisOfSecond());
      assertEquals(1, timeOfDay1.getMinuteOfHour());
      assertEquals(21, timeOfDay1.getHourOfDay());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(5L);
      assertEquals(0, timeOfDay0.getMinuteOfHour());
      assertEquals(5, timeOfDay0.getMillisOfSecond());
      assertEquals(4, timeOfDay0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      Seconds seconds0 = Seconds.ONE;
      TimeOfDay timeOfDay1 = timeOfDay0.minus(seconds0);
      assertEquals(59, timeOfDay1.getSecondOfMinute());
      assertEquals(4, timeOfDay1.size());
      assertEquals(0, timeOfDay1.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.withSecondOfMinute(2);
      assertEquals(2, timeOfDay1.getSecondOfMinute());
      assertEquals(21, timeOfDay1.getHourOfDay());
      assertEquals(320, timeOfDay1.getMillisOfSecond());
      assertEquals(4, timeOfDay0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) null);
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals(4, timeOfDay0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((long) 2);
      assertEquals(2, timeOfDay0.getMillisOfSecond());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getHourOfDay());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(3, 2);
      assertEquals(4, timeOfDay0.size());
  }
}

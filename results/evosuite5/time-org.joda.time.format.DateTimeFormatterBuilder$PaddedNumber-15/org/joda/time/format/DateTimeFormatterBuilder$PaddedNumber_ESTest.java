/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 16:51:43 GMT 2019
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.Writer;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DateTimeFormatterBuilder$PaddedNumber_ESTest extends DateTimeFormatterBuilder$PaddedNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, 785);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(273);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      File file0 = MockFile.createTempFile("Millis", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      dateTimeFormatterBuilder_PaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localDate0, locale0);
      assertEquals("zho", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2162, false, 3875);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = new LocalTime((-1L), (DateTimeZone) fixedDateTimeZone0);
      Locale locale0 = Locale.JAPANESE;
      dateTimeFormatterBuilder_PaddedNumber0.printTo((Writer) charArrayWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals(3875, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, 785);
      StringBuffer stringBuffer0 = new StringBuffer("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(273);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localDate0, locale0);
      assertEqualsstringBuffer0.toString());
      assertEquals(785, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 3588, false, 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      MockDate mockDate0 = new MockDate(0, 1467, 0, 0, 1467, 0);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      Locale locale0 = Locale.GERMANY;
      dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1), false);
      int int0 = dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 0, false);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.UK;
      dateTimeFormatterBuilder_FixedNumber0.printTo((Writer) null, (long) 0, (Chronology) lenientChronology0, 1167, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("en", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber((DateTimeFieldType) null, 0, false);
      StringBuffer stringBuffer0 = new StringBuffer("org.joda.time.chrono.StrictChronology");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      dateTimeFormatterBuilder_FixedNumber0.printTo(stringBuffer0, 1677L, (Chronology) islamicChronology0, (-203), dateTimeZone0, (Locale) null);
      assertEquals(37, stringBuffer0.length());
      assertEquals("org.joda.time.chrono.StrictChronology", stringBuffer0.toString());
  }
}

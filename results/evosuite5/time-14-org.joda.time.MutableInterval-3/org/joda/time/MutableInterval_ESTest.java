/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 21:41:51 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MutableInterval_ESTest extends MutableInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      mutableInterval0.setPeriodBeforeEnd((ReadablePeriod) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 844, 0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      mutableInterval0.setPeriodBeforeEnd(weeks0);
      assertEquals((-59918065090680L), mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null);
      mutableInterval0.setPeriodAfterStart((ReadablePeriod) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      Hours hours0 = Hours.TWO;
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, hours0);
      mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) dateTime0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      Hours hours0 = Hours.TWO;
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, hours0);
      mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      // Undeclared exception!
      try { 
        mutableInterval0.setInterval((ReadableInterval) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Interval must not be null
         //
         verifyException("org.joda.time.MutableInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      Interval interval0 = new Interval(1, 1, dateTimeZone0);
      mutableInterval0.setInterval((ReadableInterval) interval0);
      assertEquals(1L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      mutableInterval0.setDurationAfterStart((ReadableDuration) null);
      assertEquals(0L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      // Undeclared exception!
      try { 
        mutableInterval0.setDurationAfterStart((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(261);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
      // Undeclared exception!
      try { 
        mutableInterval0.setEnd(mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableInterval mutableInterval0 = MutableInterval.parse((String) null);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Weeks weeks0 = Weeks.THREE;
      MutableInterval mutableInterval0 = new MutableInterval(weeks0, dateTime0);
      assertEquals(1390594881320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      Duration duration0 = Duration.ZERO;
      MutableInterval mutableInterval0 = new MutableInterval(duration0, dateTime0);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        mutableInterval0.setStart(mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      mutableInterval0.setDurationBeforeEnd(0L);
      assertEquals(0L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 844, 0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      Duration duration0 = mutableInterval0.toDuration();
      MutableInterval mutableInterval1 = new MutableInterval(dateTime0, duration0);
      assertEquals((-59916250690680L), mutableInterval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      assertNotSame(mutableInterval0, mutableInterval1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval("Interval must not be null", julianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: Interval must not be null
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      Hours hours0 = Hours.TWO;
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, hours0);
      mutableInterval0.setPeriodAfterStart(hours0);
      assertEquals(1392416481320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(1, 1);
      assertEquals(1L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval(86400000L, 1643L, islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }
}

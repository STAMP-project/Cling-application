/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 20:56:45 GMT 2019
 */

package org.mockito.asm.tree.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.Label;
import org.mockito.asm.Opcodes;
import org.mockito.asm.Type;
import org.mockito.asm.tree.FieldInsnNode;
import org.mockito.asm.tree.IincInsnNode;
import org.mockito.asm.tree.InsnNode;
import org.mockito.asm.tree.IntInsnNode;
import org.mockito.asm.tree.JumpInsnNode;
import org.mockito.asm.tree.LabelNode;
import org.mockito.asm.tree.LdcInsnNode;
import org.mockito.asm.tree.MethodInsnNode;
import org.mockito.asm.tree.MultiANewArrayInsnNode;
import org.mockito.asm.tree.TypeInsnNode;
import org.mockito.asm.tree.VarInsnNode;
import org.mockito.asm.tree.analysis.BasicInterpreter;
import org.mockito.asm.tree.analysis.BasicValue;
import org.mockito.asm.tree.analysis.SourceValue;
import org.mockito.asm.tree.analysis.Value;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BasicInterpreter_ESTest extends BasicInterpreter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)BasicValue.INT_VALUE;
      Value value0 = basicInterpreter0.merge(basicValue1, basicValue0);
      assertSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.merge(basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode(".", 164);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        basicInterpreter0.naryOperation(multiANewArrayInsnNode0, linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.mockito.asm.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(475);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        basicInterpreter0.naryOperation(insnNode0, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.InsnNode cannot be cast to org.mockito.asm.tree.MethodInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(181, 181);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(180, 180);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(179, 179);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(178, 161);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(177, 177);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(176, 176);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(175, 175);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(174, 174);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      VarInsnNode varInsnNode0 = new VarInsnNode(173, 120);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(172, 172);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(171, 171);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(170, 170);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(169, 55);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(168, 168);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(167, 167);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(166, 166);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(165, 165);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(164, 164);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(163, 163);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(162, 162);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(161, 161);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(160, 160);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(159);
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, (Value) null, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      VarInsnNode varInsnNode0 = new VarInsnNode(158, 158);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(157, 157);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(156, 156);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(155, 155);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(154, 154);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(153, 153);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(152, 152);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(151, 151);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(150, 150);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(149, 149);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(148, 148);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(147, 147);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(146, 146);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(145, 85);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(144, 113);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(143, 143);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(142, 142);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(141, 141);
      SourceValue sourceValue0 = new SourceValue(5);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, sourceValue0, sourceValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      VarInsnNode varInsnNode0 = new VarInsnNode(140, 140);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(139, 141);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(138, 138);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(137, 169);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      InsnNode insnNode0 = new InsnNode(136);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(135, 135);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(134, 134);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(133, 133);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      IincInsnNode iincInsnNode0 = new IincInsnNode(753, 753);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(iincInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(131, 131);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(130, ">BvvU)\u0012+b", ">BvvU)\u0012+b", "R!bj,Z");
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(fieldInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(129, 129);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertFalse(value0.equals((Object)basicValue0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(128, 128);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(127, 127);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(126, 126);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(125, 125);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(124, 124);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(122, 122);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(121, 121);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertFalse(value0.equals((Object)basicValue0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(120, 120);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertFalse(value0.equals((Object)basicValue0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(119, 119);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(118, 118);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      VarInsnNode varInsnNode0 = new VarInsnNode(117, 125);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(116, 116);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(115, 115);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertFalse(value0.equals((Object)basicValue0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(114, 114);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(113, 113);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(112, 112);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(111, 111);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(110, 110);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(109, 109);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(108, 108);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(107, 167);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(106, "EuNV*ajF>mS9Z' cc&v");
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(105, 105);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(104, 104);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(103, 103);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(102, 102);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(101, 101);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(100, 100);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(99, 99);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(98, 98);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(97, 97);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(96, 96);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(95, 95);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(94, 94);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(93, 166);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(92, 92);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(91, 91);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(90, 90);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(89, 89);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(88, 88);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(87, 87);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(86, 86);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(85, 85);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(84, 73);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(83, 83);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(82, 82);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(81, 81);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(80, 80);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(79, "");
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(78, 78);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(77, 77);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(76, 76);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(75, 75);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(74, 74);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(73, 73);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(72, 72);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(71, 71);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(70, 70);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(69, 69);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(68, 68);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(67, 67);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(66, 66);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(65, 65);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(64, 64);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(63, 63);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(62, 62);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(61, 61);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(60, 60);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(59, 59);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(58, 58);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(57, 57);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(56, 56);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(55, 55);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(54, 54);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(53, 53);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertFalse(value0.equals((Object)basicValue0));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(52, 52);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(51, 51);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(50, 50);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertTrue(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(49, 49);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(48, 48);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(47, 47);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(value0.equals((Object)basicValue0));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(123, 123);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.SHORT_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      Value value1 = basicInterpreter0.binaryOperation(varInsnNode0, value0, value0);
      assertEquals(2, value1.getSize());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(46, 46);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(varInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 188);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid array type
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 188);
      intInsnNode0.operand = 10;
      SourceValue sourceValue0 = new SourceValue(1);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, sourceValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 188);
      intInsnNode0.operand = 9;
      SourceValue sourceValue0 = new SourceValue(6);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, sourceValue0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 188);
      intInsnNode0.operand = 8;
      SourceValue sourceValue0 = new SourceValue(6);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, sourceValue0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 7);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertTrue(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 6);
      SourceValue sourceValue0 = new SourceValue(14);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, sourceValue0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 5);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 188);
      intInsnNode0.operand = 4;
      SourceValue sourceValue0 = new SourceValue(1);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, sourceValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(199);
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(198);
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(197, 197);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(196, 196);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(195, 195);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(194);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(193);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, basicValue0);
      assertFalse(value0.equals((Object)basicValue0));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(192);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.InsnNode cannot be cast to org.mockito.asm.tree.TypeInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(191);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(190);
      SourceValue sourceValue0 = new SourceValue(4, insnNode0);
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, sourceValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(189);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.InsnNode cannot be cast to org.mockito.asm.tree.TypeInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(187, 187);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(186);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(185, 185);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(184);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(183, 183);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(182, 182);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(181, 181);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(varInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(180);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, (Value) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.InsnNode cannot be cast to org.mockito.asm.tree.FieldInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(179);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(178);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(177, 177);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(176);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(175, 175);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(174);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(173);
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(172);
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(171, 171);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(170, 170);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(varInsnNode0, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(169);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(168);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(167);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(166, 166);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(165, 170);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(164);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      VarInsnNode varInsnNode0 = new VarInsnNode(163, 163);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(varInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(162);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(161);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(160, 160);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(159);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(158);
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(157);
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(156, "W('[$q#p");
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(155, 155);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(154);
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(153);
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(152, 152);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(151);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(150);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(149);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(148, 148);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(147, "");
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertFalse(value0.equals((Object)basicValue0));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(146, 146);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(varInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(145);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(144, 144);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(143, "\" >o2DlRg2lHE%");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(142, 559);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertFalse(value0.equals((Object)basicValue0));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Label label0 = new Label();
      LabelNode labelNode0 = new LabelNode(label0);
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(141, labelNode0);
      Value value0 = basicInterpreter0.unaryOperation(jumpInsnNode0, (Value) null);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      VarInsnNode varInsnNode0 = new VarInsnNode(140, 140);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(varInsnNode0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(139, 141);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(138);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.unaryOperation(insnNode0, (Value) null);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(137, 137);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(varInsnNode0, basicValue0);
      assertFalse(value0.equals((Object)basicValue0));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(136);
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, basicValue0);
      assertFalse(value0.equals((Object)basicValue0));
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(135, 135);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      SourceValue sourceValue0 = new SourceValue(11, varInsnNode0);
      Value value0 = basicInterpreter0.unaryOperation(varInsnNode0, sourceValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(134, 134);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(varInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(133);
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      IincInsnNode iincInsnNode0 = new IincInsnNode(753, 753);
      Value value0 = basicInterpreter0.unaryOperation(iincInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(131, "");
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(130, 7);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(129, 129);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(varInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(128, 128);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(127, 127);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(126, 126);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(125, 125);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(varInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(124, 188);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(123, 123);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.SHORT_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(varInsnNode0, value0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(122, 122);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(121, 121);
      SourceValue sourceValue0 = new SourceValue((-1681));
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, sourceValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(120, "%oL\"");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      VarInsnNode varInsnNode0 = new VarInsnNode(119, 119);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.INT_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      Value value1 = basicInterpreter0.unaryOperation(varInsnNode0, value0);
      assertNotSame(value0, value1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(118, 183);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      VarInsnNode varInsnNode0 = new VarInsnNode(117, 125);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(varInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(116, 1787);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicInterpreter0);
      Value value0 = basicInterpreter0.newOperation(ldcInsnNode0);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(ldcInsnNode0, value0, value0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Double double0 = new Double((-1.0));
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(double0);
      Value value0 = basicInterpreter0.newOperation(ldcInsnNode0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Long long0 = new Long((-2210L));
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(long0);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.newOperation(ldcInsnNode0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Float float0 = new Float((float) 101);
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(float0);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(ldcInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Integer integer0 = Opcodes.INTEGER;
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(integer0);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(ldcInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(118, 183);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.newOperation(intInsnNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(187, 187);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.newOperation(intInsnNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.IntInsnNode cannot be cast to org.mockito.asm.tree.TypeInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(178, 166);
      // Undeclared exception!
      try { 
        basicInterpreter0.newOperation(intInsnNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.IntInsnNode cannot be cast to org.mockito.asm.tree.FieldInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(168);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(insnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.DOUBLE_TYPE;
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(type0);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(ldcInsnNode0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(16, 16);
      Value value0 = basicInterpreter0.newOperation(intInsnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(15);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.newOperation(insnNode0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(14, (String) null, (String) null, (String) null);
      Value value0 = basicInterpreter0.newOperation(methodInsnNode0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(13);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(insnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(12, "[I");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.newOperation(typeInsnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(11, 60);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.newOperation(intInsnNode0);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, value0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(10, "~7)");
      Value value0 = basicInterpreter0.newOperation(typeInsnNode0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(9, ">BvvU)\u0012+b");
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(typeInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(8);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.newOperation(insnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(7);
      Value value0 = basicInterpreter0.newOperation(insnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(6, 7);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(intInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(5, 5);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(intInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(4, "Invalid array type", "Invalid array type", "Invalid array type");
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(fieldInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(3, "O`%9lQ'v+", "O`%9lQ'v+", "O`%9lQ'v+");
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(fieldInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(2);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(insnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(1, 6);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(intInsnNode0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.DOUBLE_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.LONG_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.FLOAT_TYPE;
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newValue(type0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.BYTE_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.CHAR_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newValue(type0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.VOID_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.newValue((Type) null);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 11);
      SourceValue sourceValue0 = new SourceValue(2);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, sourceValue0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicInterpreter0);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.copyOperation(ldcInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(17);
      Value value0 = basicInterpreter0.newOperation(insnNode0);
      Value value1 = basicInterpreter0.ternaryOperation(insnNode0, value0, value0, value0);
      assertNull(value1);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 22:55:24 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.Visitor;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionType_ESTest extends FunctionType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.toDebugHashCodeString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      FunctionType functionType1 = functionType0.getBindReturnType((-2058414972));
      functionType1.toDebugHashCodeString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      FunctionType functionType1 = functionType0.getBindReturnType(687);
      functionType1.toDebugHashCodeString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      functionType0.toDebugHashCodeString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      noResolvedType0.hasCachedValues();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
      ObjectType objectType0 = instanceObjectType0.getImplicitPrototype();
      // Undeclared exception!
      try { 
        functionType0.setImplicitPrototype(objectType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[2] = (JSType) noResolvedType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(noResolvedType0, jSTypeArray0);
      functionType0.clearCachedValues();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      Node node0 = Node.newString(1, "Unknown class name", 1, 1);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      functionType0.setPrototype(noType0, node0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      functionType0.hasImplementedInterfaces();
      Node node0 = new Node((-125));
      functionType0.setSource(node0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)errorFunctionType0.forceResolve(simpleErrorReporter0, errorFunctionType0);
      errorFunctionType1.setSource((Node) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      Node node0 = Node.newString("Not declared as a type name", 0, 0);
      noResolvedType0.setSource(node0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      functionType0.getTypeOfThis();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      errorFunctionType0.isSubtype(functionType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "this:");
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "M4W_i");
      errorFunctionType0.getTypesUnderShallowEquality(enumElementType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("1", (Node) null);
      functionType0.toStringHelper(true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      functionType0.toStringHelper(false);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      errorFunctionType0.toStringHelper(false);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      functionType0.toDebugHashCodeString();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);
      JSType.isSubtypeHelper(functionType0, functionType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);
      FunctionType functionType1 = FunctionType.forInterface(jSTypeRegistry0, "Named type with empty name component", (Node) null);
      functionType0.supAndInfHelper(functionType1, false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("1", (Node) null);
      JSType.isEquivalent(functionType0, functionType0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getTopMostDefiningType("Named type with empty name component");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      // Undeclared exception!
      try { 
        functionType0.getTopMostDefiningType("call");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType.getTopDefiningInterface(noResolvedType0, "Unknown class name");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      FunctionType.getTopDefiningInterface(functionType0, "new:");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);
      // Undeclared exception!
      try { 
        functionType0.getSuperClassConstructor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "6\"Au'");
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Unknown class name", (Node) null);
      functionType0.supAndInfHelper(errorFunctionType0, true);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      NoObjectType noObjectType0 = (NoObjectType)functionType0.getTopMostDefiningType("Named type with empty name component");
      functionType0.supAndInfHelper(noObjectType0, false);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      NoObjectType noObjectType0 = (NoObjectType)functionType0.getTopMostDefiningType("Named type with empty name component");
      functionType0.supAndInfHelper(noObjectType0, true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      NoObjectType noObjectType0 = (NoObjectType)functionType0.getTopMostDefiningType("Named type with empty name component");
      noObjectType0.supAndInfHelper(functionType0, false);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      NoObjectType noObjectType0 = (NoObjectType)functionType0.getTopMostDefiningType("Named type with empty name component");
      noObjectType0.supAndInfHelper(functionType0, true);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoType noType0 = new NoType(jSTypeRegistry0);
      Node node0 = Node.newString("Unknown class name", 1171, 56);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, node0);
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = (JSType) noType0;
      jSTypeArray0[1] = (JSType) noType0;
      jSTypeArray0[2] = (JSType) noType0;
      jSTypeArray0[3] = (JSType) noType0;
      jSTypeArray0[4] = (JSType) functionType0;
      jSTypeArray0[5] = (JSType) functionType0;
      jSTypeArray0[6] = (JSType) noType0;
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, jSTypeArray0);
      functionType1.supAndInfHelper(functionType0, false);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoType noType0 = new NoType(jSTypeRegistry0);
      Node node0 = new Node(0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, node0);
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = (JSType) noType0;
      jSTypeArray0[1] = (JSType) noType0;
      jSTypeArray0[2] = (JSType) noType0;
      jSTypeArray0[3] = (JSType) noType0;
      jSTypeArray0[4] = (JSType) functionType0;
      jSTypeArray0[5] = (JSType) functionType0;
      jSTypeArray0[6] = (JSType) noType0;
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, jSTypeArray0);
      functionType1.supAndInfHelper(functionType0, true);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      FunctionType functionType1 = functionType0.getBindReturnType(687);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) noType0;
      jSTypeArray0[1] = (JSType) noType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType1, (JSType) functionType1, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType1, (JSType) functionType1, (JSType) functionType1, (JSType) functionType1, (JSType) noType0, (JSType) noType0, (JSType) functionType1, jSTypeArray0);
      FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) immutableList0);
      functionType2.supAndInfHelper(functionType1, false);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      functionType0.supAndInfHelper(functionType1, false);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      JSType.getGreatestSubtype((JSType) functionType0, (JSType) functionType0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.getBindReturnType(48);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = noResolvedType0.getBindReturnType(0);
      functionType0.toAnnotationString();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      FunctionType functionType1 = functionType0.getBindReturnType((-2058414972));
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) noType0;
      jSTypeArray0[1] = (JSType) noType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType1, (JSType) functionType1, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType1, (JSType) functionType1, (JSType) functionType1, (JSType) functionType1, (JSType) noType0, (JSType) noType0, (JSType) functionType1, jSTypeArray0);
      FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) immutableList0);
      functionType2.supAndInfHelper(functionType1, false);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.VoidType");
      errorFunctionType0.getPropertyType("apply");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "6\"Au'");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      FunctionType functionType0 = (FunctionType)errorFunctionType0.getPropertyType("call");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(";7?MR}^", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      Stack<ObjectType> stack0 = new Stack<ObjectType>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      functionType0.setExtendedInterfaces(stack0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      ArrayList<ObjectType> arrayList0 = new ArrayList<ObjectType>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      try { 
        noResolvedType0.setExtendedInterfaces(arrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("CONSTRUCTOR", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isStringValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      Iterable<ObjectType> iterable0 = functionType0.getAllExtendedInterfaces();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isStringValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isEnumType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noType0);
      
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noType0, (ObjectType) noType0, (ObjectType) noType0, (ObjectType) noType0, (ObjectType) noType0, (ObjectType) noType0, (ObjectType) noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isEnumType());
      assertEquals(7, immutableList0.size());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList0);
      
      noType0.setImplementedInterfaces(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isEnumType());
      assertEquals(7, immutableList0.size());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      Iterable<ObjectType> iterable0 = functionType0.getAllImplementedInterfaces();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("U5`Ua", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      Iterable<ObjectType> iterable0 = functionType0.getAllImplementedInterfaces();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("1", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      // Undeclared exception!
      try { 
        functionType0.getTopMostDefiningType("1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      assertEquals(0, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertTrue(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertEquals(83, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotNull(node0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);
      assertEquals(0, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      FunctionType functionType1 = jSTypeRegistry0.createConstructorTypeWithVarArgs((JSType) null, jSTypeArray0);
      assertNotSame(functionType1, functionType0);
      assertEquals(0, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType1.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isBooleanValueType());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.hasCachedValues());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertTrue(functionType1.isConstructor());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.equals((Object)functionType0));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType1);
      
      functionType0.setPrototypeBasedOn(functionType1);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertEquals(0, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType1.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isBooleanValueType());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isRecordType());
      assertTrue(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.hasCachedValues());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertTrue(functionType1.isConstructor());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      functionType0.setPrototypeBasedOn((ObjectType) functionType1, node0);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertEquals(0, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertTrue(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertEquals(83, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType1.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isBooleanValueType());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.hasCachedValues());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertTrue(functionType1.isConstructor());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      Node node0 = new Node(0, 1, 0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertNotNull(node0);
      
      boolean boolean0 = noResolvedType0.setPrototype((ObjectType) null, node0);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      Node node0 = Node.newString("Not declared as a type name");
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertNotNull(node0);
      
      noResolvedType0.setPrototypeBasedOn((ObjectType) noResolvedType0, node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      noResolvedType0.setSource(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      Set<String> set0 = noResolvedType0.getOwnPropertyNames();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "6\"Au'");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isStringValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(instanceObjectType0);
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)errorFunctionType0.resolveInternal(simpleErrorReporter0, instanceObjectType0);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isVoidType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertFalse(errorFunctionType1.isNominalType());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertFalse(errorFunctionType1.isUnionType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isRecordType());
      assertTrue(errorFunctionType1.canBeCalled());
      assertTrue(errorFunctionType1.isConstructor());
      assertFalse(errorFunctionType1.isInterface());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertFalse(errorFunctionType1.isTemplateType());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertTrue(errorFunctionType1.isResolved());
      assertTrue(errorFunctionType1.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType1);
      
      Set<String> set0 = errorFunctionType0.getOwnPropertyNames();
      assertSame(errorFunctionType0, errorFunctionType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains("6\"Au'"));
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      ObjectType.Property objectType_Property0 = noResolvedType0.getSlot("prototype");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(objectType_Property0.isTypeInferred());
      assertEquals("prototype", objectType_Property0.getName());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(objectType_Property0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.hasInstanceType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      FunctionType functionType1 = functionType0.getBindReturnType(687);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isConstructor());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertTrue(functionType1.isOrdinaryFunction());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType1);
      
      boolean boolean0 = functionType1.matchesInt32Context();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isConstructor());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertTrue(functionType1.isOrdinaryFunction());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      int int0 = errorFunctionType0.getMaxArguments();
      assertEquals(3, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("!RoPk<vPDStDIm*8f5t", (Node) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      int int0 = functionType0.getMaxArguments();
      assertEquals(0, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      int int0 = noResolvedType0.getMaxArguments();
      assertEquals(Integer.MAX_VALUE, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      JSType[] jSTypeArray0 = new JSType[0];
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertTrue(indexedType0.isConstructor());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isStringValueType());
      assertTrue(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isRecordType());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isBooleanValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(indexedType0);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) indexedType0, (JSType) indexedType0, (JSType) indexedType0, (JSType) noResolvedType0, jSTypeArray0);
      assertEquals(0, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertTrue(indexedType0.isConstructor());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isStringValueType());
      assertTrue(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isRecordType());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isBooleanValueType());
      assertEquals(12, immutableList0.size());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, (List<JSType>) immutableList0);
      assertEquals(0, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertTrue(indexedType0.isConstructor());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isStringValueType());
      assertTrue(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isRecordType());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isBooleanValueType());
      assertEquals(12, immutableList0.size());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      int int0 = functionType0.getMinArguments();
      assertEquals(12, int0);
      assertEquals(0, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertTrue(indexedType0.isConstructor());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isStringValueType());
      assertTrue(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isRecordType());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isBooleanValueType());
      assertEquals(12, immutableList0.size());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      int int0 = noResolvedType0.getMinArguments();
      assertEquals(0, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "6\"Au'");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      int int0 = errorFunctionType0.getMinArguments();
      assertEquals(0, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createInterfaceType((String) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = Node.newString("k~");
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isString());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotNull(node0);
      
      node0.setType(105);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertEquals(105, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "k~", node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertEquals(105, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      functionType0.hashCode();
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertEquals(105, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Node node0 = Node.newString("Not declared as a type name");
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetProp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertEquals(40, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createInterfaceType("Not declared as a constructor", node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesNumberContext());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noType0);
      
      NoType noType1 = new NoType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType1.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertFalse(noType1.isNumberValueType());
      assertFalse(noType1.isUnionType());
      assertFalse(noType1.isNoResolvedType());
      assertTrue(noType1.isNoType());
      assertFalse(noType1.isVoidType());
      assertFalse(noType1.isNoObjectType());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertFalse(noType1.isReturnTypeInferred());
      assertFalse(noType1.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noType1.getPropertiesCount());
      assertFalse(noType1.isStringValueType());
      assertFalse(noType1.isResolved());
      assertFalse(noType1.isTemplateType());
      assertFalse(noType1.isBooleanValueType());
      assertFalse(noType1.isAllType());
      assertFalse(noType1.isFunctionType());
      assertTrue(noType1.matchesObjectContext());
      assertFalse(noType1.isOrdinaryFunction());
      assertFalse(noType1.isInterface());
      assertTrue(noType1.matchesNumberContext());
      assertTrue(noType1.canBeCalled());
      assertFalse(noType1.isEnumType());
      assertFalse(noType1.isNominalConstructor());
      assertFalse(noType1.isRecordType());
      assertFalse(noType1.isEnumElementType());
      assertFalse(noType1.isFunctionPrototypeType());
      assertTrue(noType1.matchesStringContext());
      assertTrue(noType1.isConstructor());
      assertTrue(noType1.hasInstanceType());
      assertTrue(noType1.isNullable());
      assertNull(noType1.getReferenceName());
      assertFalse(noType1.isCheckedUnknownType());
      assertFalse(noType1.isNominalType());
      assertFalse(noType1.isNullType());
      assertFalse(noType1.equals((Object)noType0));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noType1);
      
      Node node0 = Node.newString("Unknown class name", 1171, 56);
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertEquals(4796472, node0.getSourcePosition());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals(56, node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertEquals(1171, node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotNull(node0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType1, node0);
      assertNotSame(noType1, noType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType1.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertFalse(noType1.isNumberValueType());
      assertFalse(noType1.isUnionType());
      assertFalse(noType1.isNoResolvedType());
      assertTrue(noType1.isNoType());
      assertFalse(noType1.isVoidType());
      assertFalse(noType1.isNoObjectType());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertFalse(noType1.isReturnTypeInferred());
      assertFalse(noType1.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noType1.getPropertiesCount());
      assertFalse(noType1.isStringValueType());
      assertFalse(noType1.isResolved());
      assertFalse(noType1.isTemplateType());
      assertFalse(noType1.isBooleanValueType());
      assertFalse(noType1.isAllType());
      assertFalse(noType1.isFunctionType());
      assertTrue(noType1.matchesObjectContext());
      assertFalse(noType1.isOrdinaryFunction());
      assertFalse(noType1.isInterface());
      assertTrue(noType1.matchesNumberContext());
      assertTrue(noType1.canBeCalled());
      assertFalse(noType1.isEnumType());
      assertFalse(noType1.isNominalConstructor());
      assertFalse(noType1.isRecordType());
      assertFalse(noType1.isEnumElementType());
      assertFalse(noType1.isFunctionPrototypeType());
      assertTrue(noType1.matchesStringContext());
      assertTrue(noType1.isConstructor());
      assertTrue(noType1.hasInstanceType());
      assertTrue(noType1.isNullable());
      assertNull(noType1.getReferenceName());
      assertFalse(noType1.isCheckedUnknownType());
      assertFalse(noType1.isNominalType());
      assertFalse(noType1.isNullType());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertEquals(4796472, node0.getSourcePosition());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals(56, node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertEquals(1171, node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(noType1.equals((Object)noType0));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[2] = (JSType) noType0;
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType(jSTypeArray0[2], node0);
      assertNotSame(functionType1, functionType0);
      assertEquals(7, jSTypeArray0.length);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertEquals(4796472, node0.getSourcePosition());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals(56, node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertEquals(1171, node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.isFunctionType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.equals((Object)functionType0));
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType1);
      
      FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
      assertNotSame(noType1, noType0);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType2, functionType1);
      assertNotSame(functionType2, functionType0);
      assertEquals(7, jSTypeArray0.length);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType1.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertFalse(noType1.isNumberValueType());
      assertFalse(noType1.isUnionType());
      assertFalse(noType1.isNoResolvedType());
      assertTrue(noType1.isNoType());
      assertFalse(noType1.isVoidType());
      assertFalse(noType1.isNoObjectType());
      assertTrue(noType1.hasCachedValues());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertFalse(noType1.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noType1.getPropertiesCount());
      assertFalse(noType1.isStringValueType());
      assertFalse(noType1.isResolved());
      assertFalse(noType1.isTemplateType());
      assertFalse(noType1.isBooleanValueType());
      assertFalse(noType1.isAllType());
      assertFalse(noType1.isFunctionType());
      assertTrue(noType1.matchesObjectContext());
      assertFalse(noType1.isOrdinaryFunction());
      assertFalse(noType1.isInterface());
      assertTrue(noType1.matchesNumberContext());
      assertTrue(noType1.canBeCalled());
      assertFalse(noType1.isEnumType());
      assertFalse(noType1.isNominalConstructor());
      assertFalse(noType1.isRecordType());
      assertFalse(noType1.isEnumElementType());
      assertFalse(noType1.isFunctionPrototypeType());
      assertTrue(noType1.matchesStringContext());
      assertTrue(noType1.isConstructor());
      assertTrue(noType1.hasInstanceType());
      assertTrue(noType1.isNullable());
      assertNull(noType1.getReferenceName());
      assertFalse(noType1.isCheckedUnknownType());
      assertFalse(noType1.isNominalType());
      assertFalse(noType1.isNullType());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertEquals(4796472, node0.getSourcePosition());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals(56, node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertEquals(1171, node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.isFunctionType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType2.isTemplateType());
      assertFalse(functionType2.isInterface());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isReturnTypeInferred());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.isVoidType());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isCheckedUnknownType());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isParameterizedType());
      assertTrue(functionType2.isOrdinaryFunction());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.isNullType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isAllType());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isNominalConstructor());
      assertFalse(noType1.equals((Object)noType0));
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType0));
      assertTrue(functionType2.equals((Object)functionType1));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType2);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      Node node0 = Node.newString("Not declared as a type name", 1, 0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createConstructorType("Not declared as a type name", node0, node0, (JSType) noResolvedType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      List<FunctionType> list0 = noResolvedType0.getSubTypes();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      Iterable<ObjectType> iterable0 = noResolvedType0.getOwnImplementedInterfaces();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      int int0 = noResolvedType0.getExtendedInterfacesCount();
      assertEquals(0, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      boolean boolean0 = noResolvedType0.canBeCalled();
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      boolean boolean0 = noResolvedType0.isInstanceType();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      boolean boolean0 = noResolvedType0.isReturnTypeInferred();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(allType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) allType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(8, immutableList0.size());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, (List<JSType>) immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(8, immutableList0.size());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      String string0 = functionType0.toStringHelper(false);
      assertEquals("function (function (new:Not declared as a type name, *=, *=, *=): Not declared as a type name, function (new:Not declared as a type name, *=, *=, *=): Not declared as a type name, *, function (new:Not declared as a type name, *=, *=, *=): Not declared as a type name, function (new:Not declared as a type name, *=, *=, *=): Not declared as a type name, function (new:Not declared as a type name, *=, *=, *=): Not declared as a type name, function (new:Not declared as a type name, *=, *=, *=): Not declared as a type name, ...[function (new:Not declared as a type name, *=, *=, *=): Not declared as a type name]): function (new:Not declared as a type name, *=, *=, *=): Not declared as a type name", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(8, immutableList0.size());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      // Undeclared exception!
      try { 
        noResolvedType0.hasEqualCallType((FunctionType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      
      FunctionType functionType1 = functionType0.getBindReturnType(687);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNominalConstructor());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isStringValueType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.canBeCalled());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType1);
      
      boolean boolean0 = functionType1.hasImplementedInterfaces();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNominalConstructor());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isStringValueType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.canBeCalled());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "ORDINARY");
      Visitor<AllType> visitor0 = (Visitor<AllType>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(visitor0).caseFunctionType(any(com.google.javascript.rhino.jstype.FunctionType.class));
      errorFunctionType0.visit(visitor0);
      assertFalse(errorFunctionType0.isInterface());
  }
}

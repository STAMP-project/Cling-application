/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 12:23:11 GMT 2019
 */

package org.apache.commons.lang3.text.translate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
import org.apache.commons.lang3.text.translate.NumericEntityUnescaper;
import org.apache.commons.lang3.text.translate.UnicodeEscaper;
import org.apache.commons.lang3.text.translate.UnicodeUnescaper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CharSequenceTranslator_ESTest extends CharSequenceTranslator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.below(3957);
      CharBuffer charBuffer0 = CharBuffer.allocate(8);
      String string0 = unicodeEscaper0.translate((CharSequence) charBuffer0);
      assertEquals("\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UnicodeUnescaper.OPTION unicodeUnescaper_OPTION0 = UnicodeUnescaper.OPTION.escapePlus;
      UnicodeUnescaper.OPTION[] unicodeUnescaper_OPTIONArray0 = new UnicodeUnescaper.OPTION[2];
      unicodeUnescaper_OPTIONArray0[0] = unicodeUnescaper_OPTION0;
      unicodeUnescaper_OPTIONArray0[1] = unicodeUnescaper_OPTION0;
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper(unicodeUnescaper_OPTIONArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "FFFFF840");
      String string0 = unicodeUnescaper0.translate((CharSequence) charBuffer0);
      assertEquals("FFFFF840", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.between((-931), (-931));
      // Undeclared exception!
      try { 
        unicodeEscaper0.translate((CharSequence) null, (Writer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
         verifyException("org.apache.commons.lang3.text.translate.CharSequenceTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      String string0 = numericEntityUnescaper0.translate((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[3];
      CharSequenceTranslator charSequenceTranslator0 = numericEntityUnescaper0.with(charSequenceTranslatorArray0);
      assertNotNull(charSequenceTranslator0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.below(0);
      StringWriter stringWriter0 = new StringWriter(0);
      unicodeEscaper0.translate((CharSequence) null, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }
}

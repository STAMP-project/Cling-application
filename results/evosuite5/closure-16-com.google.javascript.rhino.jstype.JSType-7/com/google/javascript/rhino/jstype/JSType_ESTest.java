/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 03:26:00 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.UnknownType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSType jSType0 = JSType.safeResolve((JSType) null, simpleErrorReporter0, (StaticScope<JSType>) null);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(numberType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isRecordType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isConstructor());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNoObjectType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isStringValueType());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isTemplateType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isBooleanValueType());
      
      boolean boolean0 = parameterizedType0.canTestForShallowEqualityWith(numberType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isRecordType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isConstructor());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNoObjectType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isStringValueType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isTemplateType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isBooleanValueType());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isUnionType());
      assertTrue(objectType0.isObject());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isNominalConstructor());
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(objectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isUnionType());
      assertTrue(objectType0.isObject());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isNativeObjectType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      
      JSType.TypePair jSType_TypePair0 = objectType0.getTypesUnderShallowEquality(jSType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType_TypePair0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isUnionType());
      assertTrue(objectType0.isObject());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isNativeObjectType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = (UnknownType)modificationVisitor0.caseUnknownType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(unknownType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isNominalType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createAnonymousObjectType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(prototypeObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isNullType());
      
      boolean boolean0 = prototypeObjectType0.isSubtype(unknownType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isNominalType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isNullType());
  }
}

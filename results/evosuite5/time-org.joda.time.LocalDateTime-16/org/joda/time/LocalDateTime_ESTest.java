/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 16:55:50 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Partial;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LocalDateTime_ESTest extends LocalDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.ITALIAN;
      localDateTime0.toString((String) null, locale0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.JAPANESE;
      try { 
        localDateTime0.toString("M}b=B.Bpki`", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
      try { 
        localDateTime0.toString("Invalid index: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        localDateTime0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime(60000L, (Chronology) iSOChronology0);
      localDateTime0.minusMillis(0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.minusMillis(3670);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1392409261320L);
      localDateTime0.minusSeconds(0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.minusSeconds(4398);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.minusMinutes(0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.minusMinutes(168);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.minusHours(0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.minusHours((-2184));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1392409261320L);
      localDateTime0.minusDays(0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.minusDays(852);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.minusWeeks(0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.minusWeeks(1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.minusMonths(0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.minusMonths((-649));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.minusYears(0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.minusYears(3670);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.plusMillis(0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.plusSeconds(0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.plusSeconds((-1114));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.plusMinutes(0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.plusMinutes(814);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1392409261320L);
      localDateTime0.plusHours(0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.plusHours((-306));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.plusDays(0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.plusDays((-14));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(0);
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(1032);
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(0);
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMonths((-2122));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusYears(0);
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusYears(64);
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Years years0 = Years.MIN_VALUE;
      assertNotNull(years0);
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.plus((ReadablePeriod) years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481634 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Hours hours0 = Hours.FIVE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      assertEquals(5, hours0.getHours());
      
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(hours0, 0);
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(1, hours0.size());
      assertEquals(5, hours0.getHours());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Duration duration0 = Duration.standardMinutes(113L);
      assertNotNull(duration0);
      assertEquals(6780000L, duration0.getMillis());
      assertEquals(6780L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardHours());
      assertEquals(113L, duration0.getStandardMinutes());
      
      LocalDateTime localDateTime1 = localDateTime0.withDurationAdded(duration0, 0);
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(6780000L, duration0.getMillis());
      assertEquals(6780L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardHours());
      assertEquals(113L, duration0.getStandardMinutes());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, (-330));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withFieldAdded((DurationFieldType) null, (-4144));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertNotNull(durationFieldType0);
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, 0);
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withField((DateTimeFieldType) null, 61);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      LocalDateTime localDateTime1 = localDateTime0.withField(dateTimeFieldType0, 5);
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withFields((ReadablePartial) null);
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Partial partial0 = new Partial(localDateTime0);
      assertNotNull(partial0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withFields(partial0);
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.isAfter(localDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMillis((-9));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      boolean boolean0 = localDateTime0.equals(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(boolean0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = localDateTime0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Date date0 = localDateTime0.toDate();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(date0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Mon Feb 14 20:21:21 GMT 2557", date0.toString());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = localDateTime0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      
      boolean boolean0 = localDateTime0.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(4, localDateTime0.size());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = localDateTime0.isSupported((DateTimeFieldType) null);
      assertFalse(boolean0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.getValue((-2722));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -2722
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.getField(1567);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 1567
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      assertNotNull(localDateTime0);
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getDayOfWeek();
      assertEquals(5, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadablePeriod) null);
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withTime((-1451), (-1451), (-1451), (-1451));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1451 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withMinuteOfHour(1364);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1364 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getWeekyear();
      assertEquals(2014, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.era();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekyear();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getCenturyOfEra();
      assertEquals(20, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(5, 5, 5, 5, 13);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withSecondOfMinute(5);
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withEra(80);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 80 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(2014);
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getMillisOfDay();
      assertEquals(76881320, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(12, 12, 12, 12, 12, 14);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withDate(12, 12, (-751));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -751 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfCentury();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getYearOfEra();
      assertEquals(2014, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Duration duration0 = Duration.standardMinutes(0L);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadableDuration) duration0);
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(1072);
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      int int0 = localDateTime0.compareTo((ReadablePartial) localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(1, int0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) null);
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertNotNull(dateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfWeek(1918);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1918 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(1900);
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withWeekOfWeekyear(168);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 168 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.monthOfYear();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getYearOfCentury();
      assertEquals(14, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.minuteOfHour();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfEra();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(fixedDateTimeZone0, fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.tz.FixedDateTimeZone
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfYear();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withHourOfDay((-189));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -189 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(localDateTime0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfDay();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withMonthOfYear(1);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfSecond();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getDayOfYear();
      assertEquals(45, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getEra();
      assertEquals(1, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfYear((-3278));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3278 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withYearOfCentury((-564));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -564 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getWeekOfWeekyear();
      assertEquals(7, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadablePeriod) null);
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.secondOfMinute();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalTime localTime0 = localDateTime0.toLocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Date date0 = localDateTime0.toDate();
      assertEquals("Fri Feb 14 21:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(5, 5, 5, 5, 13);
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfSecond(5);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      String string0 = localDateTime0.toString((String) null);
      assertEquals("2014-02-14T21:21:21.320", string0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfMonth((-2677));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2677 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1, dateTimeZone0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.withYear(1416);
      int int0 = localDateTime1.compareTo((ReadablePartial) localDateTime0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfDay(0);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.parse(">:|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \">:|\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gJChronology0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
      LocalDateTime localDateTime1 = localDateTime_Property0.withMaximumValue();
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      Chronology chronology0 = localDateTime_Property0.getChronology();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      LocalDateTime localDateTime1 = localDateTime_Property0.roundFloorCopy();
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfFloorCopy();
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      LocalDateTime localDateTime1 = localDateTime_Property0.addToCopy((-1104));
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) julianChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      LocalDateTime localDateTime1 = localDateTime_Property0.getLocalDateTime();
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1, 1, 1, 1, 1, 1, 1);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfMonth();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundCeilingCopy();
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfEvenCopy();
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) julianChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      LocalDateTime localDateTime1 = localDateTime_Property0.addWrapFieldToCopy(2125);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1683, 833, (-4129));
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      LocalDateTime localDateTime1 = localDateTime_Property0.addToCopy((long) 833);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) julianChronology0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfCeilingCopy();
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      LocalDateTime localDateTime1 = localDateTime_Property0.withMinimumValue();
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) julianChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("K<IFWS`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"K<IFWS`\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 07:59:47 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Arguments;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Callable;
import com.google.javascript.rhino.head.CompilerEnvirons;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.ContextListener;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Function;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.IdFunctionCall;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.InterpretedFunction;
import com.google.javascript.rhino.head.Interpreter;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.LazilyLoadedCtor;
import com.google.javascript.rhino.head.MemberBox;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeFunction;
import com.google.javascript.rhino.head.NativeGenerator;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeMath;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.ScriptRuntime;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.Synchronizer;
import com.google.javascript.rhino.head.TopLevel;
import com.google.javascript.rhino.head.UniqueTag;
import java.lang.reflect.Method;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ScriptableObject_ESTest extends ScriptableObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      ScriptableObject.getTopScopeValue(nativeIterator_StopIteration0, importerTopLevel0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test001()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Context.getCurrentContext();
      ScriptableObject.ensureScriptable(nativeCall0);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.defineConst("error reporter", nativeCall0);
      Class<NativeMath> class0 = NativeMath.class;
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration1.getDefaultValue(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.NativeMath
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      importerTopLevel0.getAllIds();
      importerTopLevel0.size();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      importerTopLevel0.isGenericDescriptor(nativeIterator_StopIteration0);
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test003()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Context context0 = Context.getCurrentContext();
      Synchronizer synchronizer0 = new Synchronizer(nativeCall0);
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      scriptableObject0.delete(506);
      NativeObject nativeObject0 = new NativeObject();
      context0.initStandardObjects(scriptableObject0, false);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.defineOwnProperty(context0, (Object) context0, (ScriptableObject) nativeObject0, false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ContextFactory.getGlobal();
      Object[] objectArray0 = new Object[8];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      String string0 = "a-} C85$=J-ep^]";
      NativeArray nativeArray1 = new NativeArray(4);
      nativeArray0.containsAll(nativeArray1);
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) nativeArray0, "a-} C85$=J-ep^]", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000005 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ContextFactory.getGlobal();
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      String string0 = "a-} C85$=J-ep^]";
      Class<InterpretedFunction> class0 = InterpretedFunction.class;
      ScriptableObject.getTypedProperty((Scriptable) nativeArray0, (-1513), class0);
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) nativeArray0, "a-} C85$=J-ep^]", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000003 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.setGetterOrSetter((String) null, 2, (Callable) null, true);
      ScriptableObject.getPropertyIds(importerTopLevel0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      ClassLoader.getSystemClassLoader();
      Context context0 = new Context(contextFactory0);
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      ContextFactory.getGlobal();
      Context context1 = contextFactory0.enterContext();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      nativeBoolean0.defineOwnProperties(context1, scriptableObject0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context1);
      Class<NativeWith> class0 = NativeWith.class;
      // Undeclared exception!
      try { 
        nativeBoolean0.getDefaultValue(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.NativeWith
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      ScriptableObject.hasProperty((Scriptable) nativeCall0, "execIdCall");
      Class<NativeGenerator> class0 = NativeGenerator.class;
      NativeNumber nativeNumber0 = new NativeNumber(4);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        nativeNumber0.defineFunctionProperties(stringArray0, class0, 98);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Context context0 = contextFactory0.enterContext();
      nativeArray0.getOwnPropertyDescriptor(context0, contextFactory0);
      contextFactory0.enterContext(context0);
      ScriptableObject.deleteProperty((Scriptable) nativeArray0, 4);
      ScriptableObject.getPropertyIds((Scriptable) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Context context0 = new Context();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.getGetterOrSetter("error reporter", 0, false);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertNotNull(context0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertNotNull(nativeIterator_StopIteration0);
      
      Synchronizer synchronizer0 = new Synchronizer(nativeIterator_StopIteration0);
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      synchronizer0.setPrototype(nativeBoolean0);
      ScriptableObject scriptableObject0 = context0.initStandardObjects((ScriptableObject) nativeBoolean0, false);
      nativeIterator_StopIteration0.defineOwnProperty(context0, (Object) synchronizer0, scriptableObject0, false);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ContextFactory contextFactory0 = new ContextFactory();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.setGetterOrSetter("5jtXlOpJ$`\u0006y~'7f", 8, nativeContinuation0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5jtXlOpJ$`\u0006y~'7f
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test013()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      contextFactory0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      Context context0 = contextFactory0.makeContext();
      ScriptableObject.deleteProperty((Scriptable) nativeJavaTopPackage0, "language version");
      ScriptableObject.deleteProperty((Scriptable) nativeJavaTopPackage0, "language version");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      importerTopLevel0.isGenericDescriptor(nativeJavaTopPackage0);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      importerTopLevel0.isGenericDescriptor(nativeIterator_StopIteration0);
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(importerTopLevel0, "t+2=]", "language version", true);
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.addLazilyInitializedValue("rXP\"m|5A\"d", 13, lazilyLoadedCtor0, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rXP\"m|5A\"d
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test015()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertNotNull(nativeIterator_StopIteration0);
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeIterator_StopIteration0, "com.google.javascript.rhino.head.ScriptableObject$GetterSlot");
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(boolean0);
      
      boolean boolean1 = nativeIterator_StopIteration0.isEmpty();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeIterator_StopIteration0, nativeIterator_StopIteration0, 4, 0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(0, idFunctionObject0.getLength());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals(4, idFunctionObject0.methodId());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("", idFunctionObject0.getFunctionName());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(0, idFunctionObject0.getArity());
      assertTrue(idFunctionObject0.isEmpty());
      assertNotNull(idFunctionObject0);
      
      Long long0 = new Long(1);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Context context0 = Context.getContext();
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertNotNull(context0);
      
      idFunctionObject0.setAttributes(4, 10);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      scriptableObject0.put("U9FTb&^a", (Scriptable) nativeArray0, (Object) contextFactory0);
      nativeArray0.isEmpty();
      // Undeclared exception!
      try { 
        scriptableObject0.getGetterOrSetter("language version", 180, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // language version
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Context context0 = new Context();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.sameValue((Object) null, "com.google.javascript.rhino.head.ScriptRuntime");
      NativeObject nativeObject0 = new NativeObject();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test018()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration1.getAttributes(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property 2 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Context.enter();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ScriptableObject.redefineProperty(nativeIterator_StopIteration0, "error reporter", true);
      NativeNumber nativeNumber0 = new NativeNumber(4);
      NativeIterator.init(nativeIterator_StopIteration0, false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.putConst("5", nativeCall0, "5");
      NativeObject nativeObject0 = new NativeObject();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test021()  throws Throwable  {
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ScriptableObject.isTrue(nativeIterator_StopIteration0);
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeJavaTopPackage0, (String) null, (String) null, true);
      NativeCall nativeCall0 = new NativeCall();
      nativeCall0.equivalentValues(lazilyLoadedCtor0);
      ScriptableObject.deleteProperty((Scriptable) nativeIterator_StopIteration0, (String) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      contextFactory0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      Context.enter();
      ScriptableObject.deleteProperty((Scriptable) nativeJavaTopPackage0, "language version");
      NativeObject nativeObject0 = new NativeObject();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeGenerator.init(nativeCall0, true);
      ScriptableObject.deleteProperty((Scriptable) nativeCall0, 0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Object[] objectArray1 = Context.emptyArgs;
      Context context0 = new Context(contextFactory0);
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      contextFactory0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.putConst("error reporter", scriptableObject0, classLoader0);
      Context context1 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel(context1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test025()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Class<NativeMath> class0 = NativeMath.class;
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.getDefaultValue(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.NativeMath
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test026()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      importerTopLevel0.isGetterOrSetter("error reporter", 1, false);
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      NativeIterator.StopIteration nativeIterator_StopIteration2 = new NativeIterator.StopIteration();
      ScriptableObject.getTopScopeValue(importerTopLevel0, nativeIterator_StopIteration2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration1.remove((Object) nativeIterator_StopIteration0, (Object) nativeIterator_StopIteration0);
      ScriptableObject.hasProperty((Scriptable) nativeIterator_StopIteration1, 1);
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) nativeIterator_StopIteration0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      importerTopLevel0.checkPropertyChange("language version", nativeIterator_StopIteration0, nativeIterator_StopIteration0);
      NativeCall nativeCall0 = context0.currentActivationCall;
      ScriptableObject.deleteProperty((Scriptable) importerTopLevel0, 0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test029()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      ScriptableObject.hasProperty((Scriptable) nativeCall0, "execIdCall");
      Class<NativeGenerator> class0 = NativeGenerator.class;
      NativeNumber nativeNumber0 = new NativeNumber(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "execIdCall";
      // Undeclared exception!
      try { 
        nativeNumber0.defineFunctionProperties(stringArray0, class0, 2213);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"com.google.javascript.rhino.head.Context\" in method \"execIdCall\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context();
      NativeCall nativeCall0 = context0.currentActivationCall;
      ScriptableObject scriptableObject0 = context0.initStandardObjects((ScriptableObject) null, true);
      NativeWith nativeWith0 = new NativeWith((Scriptable) null, scriptableObject0);
      NativeWith nativeWith1 = new NativeWith((Scriptable) null, nativeWith0);
      ScriptableObject.defineConstProperty(nativeWith1, "language version");
      MemberBox memberBox0 = null;
      try {
        memberBox0 = new MemberBox((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.MemberBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      ScriptableObject.defineConstProperty(nativeCall0, "kmTj&NZ Fb'");
      MemberBox memberBox0 = null;
      try {
        memberBox0 = new MemberBox((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.MemberBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Context.getCurrentContext();
      ScriptableObject.getArrayPrototype(nativeCall0);
      ScriptableObject.getPropertyIds(nativeCall0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Context.getCurrentContext();
      ScriptableObject.isTrue((Object) null);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Context.getCurrentContext();
      Context.enter();
      ScriptableObject.isTrue((Object) null);
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeCall0, "language version", "error reporter", false);
      lazilyLoadedCtor0.init();
      nativeCall0.equivalentValues(lazilyLoadedCtor0);
      // Undeclared exception!
      try { 
        ScriptableObject.redefineProperty(nativeCall0, "language version", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: redeclaration of var language version.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test035()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ScriptableObject.getProperty((Scriptable) nativeContinuation0, 2);
      nativeContinuation0.isSealed();
      Context context0 = Context.getContext();
      BoundFunction boundFunction0 = new BoundFunction(context0, nativeContinuation0, nativeContinuation0, nativeContinuation0, (Object[]) null);
      ContextFactory contextFactory0 = new ContextFactory();
      contextFactory0.getE4xImplementationFactory();
      NativeObject nativeObject0 = new NativeObject();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test036()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      importerTopLevel0.isGetterOrSetter("error reporter", 1, false);
      Context.reportWarning("language version");
      ContextFactory.getGlobal();
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test037()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      ScriptableObject.putProperty((Scriptable) nativeCall0, 2, (Object) nativeCall0);
      Context context0 = Context.getCurrentContext();
      Synchronizer synchronizer0 = new Synchronizer(nativeCall0);
      Context.reportWarning("error reporter");
      ContextFactory.getGlobal();
      NativeObject nativeObject0 = new NativeObject();
      nativeObject0.defineOwnProperties(context0, nativeCall0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test038()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      ContextFactory.getGlobal();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeCall0, "5", 13, "8E/2Law@z", 13, nativeCall0);
      ScriptableObject.getTopScopeValue(nativeCall0, "8E/2Law@z");
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.setAttributes("5", (Scriptable) idFunctionObject0, 13);
      NativeNumber nativeNumber0 = new NativeNumber(0.0);
      nativeNumber0.checkPropertyDefinition(nativeCall0);
      // Undeclared exception!
      try { 
        ScriptableObject.redefineProperty(nativeIterator_StopIteration0, "5", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: redeclaration of const 5.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context();
      NativeCall nativeCall0 = context0.currentActivationCall;
      ScriptableObject scriptableObject0 = context0.initStandardObjects((ScriptableObject) null, true);
      NativeWith nativeWith0 = new NativeWith((Scriptable) null, scriptableObject0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject((IdFunctionCall) null, nativeWith0, 170, "language version", 1237, scriptableObject0);
      Short short0 = new Short((short)1156);
      Short.compare((short)1156, (short) (-2529));
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      ScriptableObject.getTopScopeValue(idFunctionObject0, nativeJavaClass0);
      ScriptableObject.getPropertyIds(idFunctionObject0);
      Double.isFinite(813.5948874478279);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      // Undeclared exception!
      try { 
        nativeContinuation0.associateValue(importerTopLevel0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      importerTopLevel0.checkPropertyChange("language version", nativeIterator_StopIteration0, nativeIterator_StopIteration0);
      NativeCall nativeCall0 = context0.currentActivationCall;
      Arguments arguments0 = null;
      try {
        arguments0 = new Arguments((NativeCall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Arguments", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isEmpty());
      assertNotNull(nativeContinuation0);
      
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeContinuation0, 2);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isEmpty());
      assertNotNull(object0);
      
      boolean boolean0 = nativeContinuation0.isSealed();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(boolean0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertNotNull(nativeIterator_StopIteration0);
      
      boolean boolean1 = ScriptableObject.hasProperty((Scriptable) nativeIterator_StopIteration0, (-1));
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test043()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertNotNull(nativeCall0);
      
      Context context0 = Context.getCurrentContext();
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertNotNull(nativeIterator_StopIteration0);
      
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)nativeIterator_StopIteration0.entrySet();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      ScriptableObject.putConstProperty(nativeCall0, "language version", set0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration1.isExtensible());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertTrue(nativeIterator_StopIteration1.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertNotNull(nativeIterator_StopIteration1);
      assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeIterator_StopIteration0, 1);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(boolean0);
      assertFalse(nativeIterator_StopIteration0.equals((Object)nativeIterator_StopIteration1));
      assertNotSame(nativeIterator_StopIteration0, nativeIterator_StopIteration1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertNotNull(nativeIterator_StopIteration0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeIterator_StopIteration1.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertTrue(nativeIterator_StopIteration1.isEmpty());
      assertNotNull(nativeIterator_StopIteration1);
      assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeIterator_StopIteration1, 1);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeIterator_StopIteration1.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertTrue(nativeIterator_StopIteration1.isEmpty());
      assertFalse(boolean0);
      assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
      assertNotSame(nativeIterator_StopIteration1, nativeIterator_StopIteration0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      ClassLoader classLoader0 = contextFactory0.getApplicationClassLoader();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertNotNull(nativeJavaTopPackage0);
      
      Context context0 = Context.enter();
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(context0);
      
      ScriptableObject.redefineProperty(nativeJavaTopPackage0, "getStopIterationObject", false);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertNotNull(nativeIterator_StopIteration0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertNotNull(nativeCall0);
      
      UniqueTag uniqueTag0 = (UniqueTag)Scriptable.NOT_FOUND;
      assertNotNull(uniqueTag0);
      
      Class<Double> class0 = Double.class;
      Double double0 = ScriptableObject.getTypedProperty((Scriptable) nativeCall0, 3825, class0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertNull(double0);
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertNotNull(nativeBoolean0);
      
      // Undeclared exception!
      try { 
        nativeBoolean0.getDefaultValue(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      ClassLoader classLoader0 = contextFactory0.getApplicationClassLoader();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertNotNull(nativeJavaTopPackage0);
      
      Context context1 = Context.enter();
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context1.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertTrue(context1.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getOptimizationLevel());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertFalse(context1.isGeneratingDebugChanged());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertNotNull(context1);
      assertSame(context1, context0);
      
      Synchronizer synchronizer0 = new Synchronizer(nativeJavaTopPackage0, context1);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context1.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(context1.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getOptimizationLevel());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertFalse(context1.isGeneratingDebugChanged());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertNotNull(synchronizer0);
      
      Class<Long> class0 = Long.class;
      Object object0 = synchronizer0.getDefaultValue(class0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context1.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(context1.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getOptimizationLevel());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertFalse(context1.isGeneratingDebugChanged());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertEquals("[JavaPackage ]", object0);
      assertNotNull(object0);
      assertSame(context1, context0);
      
      ScriptableObject.redefineProperty(synchronizer0, "exportAsScopeProperty", false);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context1.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(context1.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getOptimizationLevel());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertFalse(context1.isGeneratingDebugChanged());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertSame(context1, context0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertNotNull(nativeIterator_StopIteration0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test048()  throws Throwable  {
      int int0 = NativeArray.getMaximumInitialCapacity();
      assertEquals(10000, int0);
      
      NativeObject nativeObject0 = new NativeObject();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertTrue(nativeObject0.isEmpty());
      assertNotNull(nativeObject0);
      
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeObject0, false);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertTrue(nativeObject0.isEmpty());
      assertTrue(nativeGenerator0.isExtensible());
      assertFalse(nativeGenerator0.isSealed());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertTrue(nativeGenerator0.isEmpty());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertNotNull(nativeGenerator0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, objectArray0.length);
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals(0L, nativeArray0.getLength());
      assertNotNull(nativeArray0);
      
      Context context0 = contextFactory0.enterContext();
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(context0);
      
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, contextFactory0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(0, objectArray0.length);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals(0L, nativeArray0.getLength());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNull(scriptableObject0);
      
      Object object0 = ScriptableObject.getTopScopeValue(nativeArray0, (Object) null);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, objectArray0.length);
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals(0L, nativeArray0.getLength());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertNotNull(nativeIterator_StopIteration0);
      
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertNotNull(importerTopLevel0);
      
      Class<Delegator> class0 = Delegator.class;
      // Undeclared exception!
      try { 
        ScriptableObject.buildClassCtor((Scriptable) importerTopLevel0, class0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Delegator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertNotNull(nativeIterator_StopIteration0);
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeIterator_StopIteration0, context0, 10, "language version", 8, nativeIterator_StopIteration0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(idFunctionObject0.isEmpty());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(10, idFunctionObject0.methodId());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(8, idFunctionObject0.getLength());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals("language version", idFunctionObject0.getFunctionName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals(8, idFunctionObject0.getArity());
      assertNotNull(idFunctionObject0);
      
      Context context1 = new Context();
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context1.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context1.isGeneratingDebugChanged());
      assertTrue(context1.isGeneratingSource());
      assertEquals(0, context1.getOptimizationLevel());
      assertFalse(context1.isGeneratingDebug());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertEquals(0, context1.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertNotNull(context1);
      assertFalse(context1.equals((Object)context0));
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      assertNotNull(nativeBoolean0);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context2 = new Context(contextFactory0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context2.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(Integer.MAX_VALUE, context2.getMaximumInterpreterStackDepth());
      assertFalse(context2.isGeneratingDebug());
      assertEquals(0, context2.getLanguageVersion());
      assertEquals(0, context2.getOptimizationLevel());
      assertFalse(context2.isSealed());
      assertEquals(0, context2.getInstructionObserverThreshold());
      assertFalse(context2.isGeneratingDebugChanged());
      assertTrue(context2.isGeneratingSource());
      assertNotNull(context2);
      assertFalse(context2.equals((Object)context1));
      assertFalse(context2.equals((Object)context0));
      
      nativeBoolean0.defineOwnProperties(context1, nativeIterator_StopIteration0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context1.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(context1.isGeneratingDebugChanged());
      assertTrue(context1.isGeneratingSource());
      assertEquals(0, context1.getOptimizationLevel());
      assertFalse(context1.isGeneratingDebug());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertEquals(0, context1.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(context1.equals((Object)context0));
      assertFalse(context1.equals((Object)context2));
      assertNotSame(context1, context0);
      assertNotSame(context1, context2);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertNotNull(importerTopLevel0);
      assertFalse(context0.equals((Object)context2));
      assertFalse(context0.equals((Object)context1));
      
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        nativeBoolean0.getDefaultValue(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test053()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertNotNull(nativeCall0);
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeCall0, "execIdCall");
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(boolean0);
      
      Class<NativeGenerator> class0 = NativeGenerator.class;
      TopLevel topLevel0 = new TopLevel();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("global", topLevel0.getClassName());
      assertFalse(topLevel0.avoidObjectDetection());
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.isSealed());
      assertFalse(topLevel0.hasPrototypeMap());
      assertEquals("object", topLevel0.getTypeOf());
      assertTrue(topLevel0.isExtensible());
      assertNotNull(topLevel0);
      
      // Undeclared exception!
      try { 
        nativeCall0.getAttributes("execIdCall", (Scriptable) topLevel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property execIdCall not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = new Context();
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(context0);
      
      NativeString nativeString0 = new NativeString("error reporter");
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertFalse(nativeString0.isSealed());
      assertTrue(nativeString0.isExtensible());
      assertTrue(nativeString0.isEmpty());
      assertFalse(nativeString0.avoidObjectDetection());
      assertEquals("String", nativeString0.getClassName());
      assertEquals("error reporter", nativeString0.toString());
      assertNotNull(nativeString0);
      
      Byte byte0 = Byte.valueOf((byte)62);
      assertEquals((byte)62, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ScriptableObject.isFalse(byte0);
      assertFalse(boolean0);
      
      int int0 = nativeString0.findInstanceIdInfo("^@|yp&ejR(");
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertFalse(nativeString0.isSealed());
      assertTrue(nativeString0.isExtensible());
      assertTrue(nativeString0.isEmpty());
      assertFalse(nativeString0.avoidObjectDetection());
      assertEquals("String", nativeString0.getClassName());
      assertEquals("error reporter", nativeString0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, objectArray0.length);
      assertTrue(nativeArray0.isExtensible());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals(0L, nativeArray0.getLength());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertNotNull(nativeArray0);
      
      ScriptableObject.defineConstProperty(nativeArray0, "put");
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, objectArray0.length);
      assertFalse(nativeArray0.isEmpty());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.isSealed());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals(0L, nativeArray0.getLength());
      assertFalse(nativeArray0.avoidObjectDetection());
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      NativeObject nativeObject0 = new NativeObject();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertNotNull(nativeObject0);
      
      Context context0 = contextFactory0.enterContext((Context) null);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(context0);
      
      // Undeclared exception!
      try { 
        nativeObject0.defineOwnProperties(context0, nativeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type object
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test056()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertNotNull(nativeIterator_StopIteration0);
      
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeIterator_StopIteration0, true);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertTrue(nativeGenerator0.isExtensible());
      assertTrue(nativeGenerator0.isSealed());
      assertTrue(nativeGenerator0.isEmpty());
      assertNotNull(nativeGenerator0);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        nativeGenerator0.delete((-2543));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: -2543.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test057()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertNotNull(nativeIterator_StopIteration0);
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeIterator_StopIteration0, "com.google.javascript.rhino.head.ScriptableObject$GetterSlot");
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(boolean0);
      
      Class<NativeGenerator> class0 = NativeGenerator.class;
      NativeNumber nativeNumber0 = new NativeNumber(13);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("Number", nativeNumber0.getClassName());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isExtensible());
      assertTrue(nativeNumber0.isEmpty());
      assertNotNull(nativeNumber0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "setPrototype";
      stringArray0[1] = "com.google.javascript.rhino.head.ast.ObjectProperty";
      // Undeclared exception!
      try { 
        nativeNumber0.defineFunctionProperties(stringArray0, class0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"setPrototype\" not found in \"com.google.javascript.rhino.head.NativeGenerator\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertNotNull(nativeIterator_StopIteration0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeIterator_StopIteration1.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertTrue(nativeIterator_StopIteration1.isEmpty());
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      assertNotNull(nativeIterator_StopIteration1);
      assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
      
      TopLevel topLevel0 = new TopLevel();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(topLevel0.hasPrototypeMap());
      assertEquals("object", topLevel0.getTypeOf());
      assertTrue(topLevel0.isExtensible());
      assertFalse(topLevel0.isSealed());
      assertFalse(topLevel0.avoidObjectDetection());
      assertEquals("global", topLevel0.getClassName());
      assertTrue(topLevel0.isEmpty());
      assertNotNull(topLevel0);
      
      nativeIterator_StopIteration1.put((String) null, (Scriptable) nativeIterator_StopIteration0, (Object) topLevel0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration1.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertTrue(nativeIterator_StopIteration1.isEmpty());
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      assertFalse(topLevel0.hasPrototypeMap());
      assertEquals("object", topLevel0.getTypeOf());
      assertTrue(topLevel0.isExtensible());
      assertFalse(topLevel0.isSealed());
      assertFalse(topLevel0.avoidObjectDetection());
      assertEquals("global", topLevel0.getClassName());
      assertTrue(topLevel0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.equals((Object)nativeIterator_StopIteration1));
      assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
      assertNotSame(nativeIterator_StopIteration0, nativeIterator_StopIteration1);
      assertNotSame(nativeIterator_StopIteration1, nativeIterator_StopIteration0);
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeIterator_StopIteration1, 1);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeIterator_StopIteration1.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertTrue(nativeIterator_StopIteration1.isEmpty());
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      assertFalse(boolean0);
      assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
      assertNotSame(nativeIterator_StopIteration1, nativeIterator_StopIteration0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test059()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertNotNull(nativeIterator_StopIteration0);
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeIterator_StopIteration0, nativeIterator_StopIteration0, (-1663), 0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals(0, idFunctionObject0.getArity());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals((-1663), idFunctionObject0.methodId());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals("", idFunctionObject0.getFunctionName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals(0, idFunctionObject0.getLength());
      assertNotNull(idFunctionObject0);
      
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      ScriptableObject.defineClass((Scriptable) nativeIterator_StopIteration0, class0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = new Context(contextFactory0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration1.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertTrue(nativeIterator_StopIteration1.isExtensible());
      assertNotNull(nativeIterator_StopIteration1);
      assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
  }

  @Test(timeout = 4000)
  @Ignore
  public void test060()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      assertNotNull(nativeCall0);
      
      Context context0 = Context.getCurrentContext();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(context0);
      
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeCall0, "language version", "error reporter", false);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertNotNull(lazilyLoadedCtor0);
      
      Object object0 = nativeCall0.equivalentValues(lazilyLoadedCtor0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertNotNull(object0);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeCall0, "language version");
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      assertTrue(boolean0);
      
      NativeObject nativeObject0 = new NativeObject();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertTrue(nativeObject0.isExtensible());
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isSealed());
      assertNotNull(nativeObject0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertNotNull(context0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertNotNull(nativeIterator_StopIteration0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertNotNull(importerTopLevel0);
      
      int int0 = importerTopLevel0.size();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals(0, int0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertTrue(nativeIterator_StopIteration1.isExtensible());
      assertTrue(nativeIterator_StopIteration1.isEmpty());
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      assertNotNull(nativeIterator_StopIteration1);
      assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertNotNull(importerTopLevel0);
      
      NativeGenerator nativeGenerator0 = NativeGenerator.init(importerTopLevel0, true);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.isSealed());
      assertTrue(nativeGenerator0.isEmpty());
      assertTrue(nativeGenerator0.isExtensible());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertNotNull(nativeGenerator0);
      
      // Undeclared exception!
      try { 
        nativeGenerator0.initPrototypeId(8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8
         //
         verifyException("com.google.javascript.rhino.head.NativeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      ClassLoader classLoader0 = contextFactory0.getApplicationClassLoader();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertNotNull(nativeJavaTopPackage0);
      
      // Undeclared exception!
      try { 
        nativeJavaTopPackage0.hasInstance((Scriptable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test064()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = new Context(contextFactory0);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      Context context1 = contextFactory0.enterContext(context0);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context1.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context1.isGeneratingSource());
      assertEquals(0, context1.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertFalse(context1.isGeneratingDebugChanged());
      assertNotNull(context1);
      assertFalse(context1.equals((Object)context0));
      assertNotSame(context0, context1);
      assertNotSame(context1, context0);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertNotNull(nativeContinuation0);
      
      NativeContinuation nativeContinuation1 = (NativeContinuation)context0.initStandardObjects((ScriptableObject) nativeContinuation0, false);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation1.hasPrototypeMap());
      assertEquals("object", nativeContinuation1.getTypeOf());
      assertTrue(nativeContinuation1.isExtensible());
      assertEquals("Continuation", nativeContinuation1.getClassName());
      assertFalse(nativeContinuation1.isSealed());
      assertFalse(nativeContinuation1.avoidObjectDetection());
      assertFalse(nativeContinuation1.isEmpty());
      assertNotNull(nativeContinuation1);
      assertFalse(context0.equals((Object)context1));
      assertNotSame(context0, context1);
      assertSame(nativeContinuation0, nativeContinuation1);
      assertSame(nativeContinuation1, nativeContinuation0);
      
      // Undeclared exception!
      try { 
        context1.newObject((Scriptable) nativeContinuation1, "error reporter", (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constructor for \"error reporter\" not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        NativeBoolean.init((Scriptable) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: Boolean.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test066()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeCall0.isEmpty());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertNotNull(nativeCall0);
      
      Context context0 = Context.getCurrentContext();
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(context0);
      
      boolean boolean0 = ScriptableObject.isTrue(context0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(boolean0);
      
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeCall0, "language version", "error reporter", false);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertNotNull(lazilyLoadedCtor0);
      
      ScriptableObject.redefineProperty(nativeCall0, "language version", false);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test067()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertNotNull(nativeIterator_StopIteration0);
      
      Class<NativeMath> class0 = NativeMath.class;
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeIterator_StopIteration1.isExtensible());
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration1.isEmpty());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertNotNull(nativeIterator_StopIteration1);
      assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
      
      nativeIterator_StopIteration0.put(1, (Scriptable) nativeIterator_StopIteration1, (Object) class0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration1.isExtensible());
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration1.isEmpty());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.equals((Object)nativeIterator_StopIteration1));
      assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
      assertNotSame(nativeIterator_StopIteration0, nativeIterator_StopIteration1);
      assertNotSame(nativeIterator_StopIteration1, nativeIterator_StopIteration0);
      
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.getDefaultValue(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.NativeMath
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertNotNull(nativeIterator_StopIteration0);
      
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeIterator_StopIteration0, true);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertTrue(nativeGenerator0.isSealed());
      assertTrue(nativeGenerator0.isExtensible());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertTrue(nativeGenerator0.isEmpty());
      assertNotNull(nativeGenerator0);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = Double.isFinite(8);
      assertTrue(boolean0);
      
      boolean boolean1 = nativeIterator_StopIteration0.sameValue(nativeGenerator0, double0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertTrue(nativeGenerator0.isSealed());
      assertTrue(nativeGenerator0.isExtensible());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertTrue(nativeGenerator0.isEmpty());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      NativeObject nativeObject0 = new NativeObject();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertNotNull(nativeObject0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertNotNull(importerTopLevel0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertNotNull(nativeIterator_StopIteration0);
      
      boolean boolean0 = importerTopLevel0.isGenericDescriptor(nativeIterator_StopIteration0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(boolean0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeIterator_StopIteration1.isExtensible());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration1.isEmpty());
      assertNotNull(nativeIterator_StopIteration1);
      assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, objectArray0.length);
      assertFalse(nativeArray0.isSealed());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertTrue(nativeArray0.isEmpty());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(0L, nativeArray0.getLength());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertNotNull(nativeArray0);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      // Undeclared exception!
      try { 
        nativeArray0.setAttributes(224, (Scriptable) null, 224);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 224
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      ClassLoader classLoader0 = contextFactory0.getApplicationClassLoader();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertNotNull(nativeJavaTopPackage0);
      
      Context context0 = contextFactory0.makeContext();
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertNotNull(context0);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeJavaTopPackage0, (String) null);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(boolean0);
      
      boolean boolean1 = ScriptableObject.deleteProperty((Scriptable) nativeJavaTopPackage0, "string");
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertNotNull(nativeIterator_StopIteration0);
      
      NativeNumber nativeNumber0 = new NativeNumber((-165.0));
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeNumber0.isSealed());
      assertTrue(nativeNumber0.isEmpty());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertEquals("Number", nativeNumber0.getClassName());
      assertNotNull(nativeNumber0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test072()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isEmpty());
      assertNotNull(nativeCall0);
      
      Context context0 = Context.getCurrentContext();
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertNotNull(context0);
      
      Synchronizer synchronizer0 = new Synchronizer(nativeCall0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isEmpty());
      assertNotNull(synchronizer0);
      
      NativeObject nativeObject0 = (NativeObject)context0.initStandardObjects();
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isSealed());
      assertNotNull(nativeObject0);
      
      UniqueTag uniqueTag0 = (UniqueTag)nativeCall0.equivalentValues(context0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertNotNull(uniqueTag0);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeObject0, "language version");
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isSealed());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertNotNull(nativeCall0);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeCall0, "5", 13, "8E/2Law@z", 13, nativeCall0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(idFunctionObject0.isSealed());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals(13, idFunctionObject0.getArity());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("8E/2Law@z", idFunctionObject0.getFunctionName());
      assertEquals(13, idFunctionObject0.getLength());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals(13, idFunctionObject0.methodId());
      assertNotNull(idFunctionObject0);
      
      Object object0 = ScriptableObject.getTopScopeValue(nativeCall0, "8E/2Law@z");
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertNull(object0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertNotNull(nativeIterator_StopIteration0);
      
      nativeIterator_StopIteration0.setAttributes("5", (Scriptable) idFunctionObject0, 13);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(idFunctionObject0.isSealed());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals(13, idFunctionObject0.getArity());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("8E/2Law@z", idFunctionObject0.getFunctionName());
      assertEquals(13, idFunctionObject0.getLength());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals(13, idFunctionObject0.methodId());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      
      ScriptableObject.putProperty((Scriptable) idFunctionObject0, "8E/2Law@z", (Object) null);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(idFunctionObject0.isSealed());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals(13, idFunctionObject0.getArity());
      assertFalse(idFunctionObject0.isEmpty());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("8E/2Law@z", idFunctionObject0.getFunctionName());
      assertEquals(13, idFunctionObject0.getLength());
      assertEquals(13, idFunctionObject0.methodId());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test074()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isEmpty());
      assertNotNull(nativeCall0);
      
      Context context0 = Context.getCurrentContext();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      Class<NativeError> class0 = NativeError.class;
      NativeError nativeError0 = ScriptableObject.getTypedProperty((Scriptable) nativeCall0, "language version", class0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isEmpty());
      assertNull(nativeError0);
      
      NativeGenerator nativeGenerator0 = NativeGenerator.init((ScriptableObject) null, false);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.isEmpty());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertTrue(nativeGenerator0.isExtensible());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertFalse(nativeGenerator0.isSealed());
      assertNotNull(nativeGenerator0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertNotNull(nativeIterator_StopIteration0);
      
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.getAttributes((-128), (Scriptable) nativeCall0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property -128 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test075()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, objectArray0.length);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals(0L, nativeArray0.getLength());
      assertFalse(nativeArray0.isSealed());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertNotNull(nativeArray0);
      
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("hasInstance");
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.isSealed());
      assertNotNull(nativeJavaPackage0);
      
      NativeJavaPackage nativeJavaPackage1 = nativeJavaPackage0.forcePackage("hasInstance", nativeArray0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, objectArray0.length);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals(0L, nativeArray0.getLength());
      assertFalse(nativeArray0.isSealed());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("object", nativeJavaPackage1.getTypeOf());
      assertTrue(nativeJavaPackage1.isExtensible());
      assertTrue(nativeJavaPackage1.isEmpty());
      assertFalse(nativeJavaPackage1.avoidObjectDetection());
      assertFalse(nativeJavaPackage1.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage1.getClassName());
      assertNotNull(nativeJavaPackage1);
      assertFalse(nativeJavaPackage1.equals((Object)nativeJavaPackage0));
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertNotSame(nativeJavaPackage1, nativeJavaPackage0);
      
      // Undeclared exception!
      try { 
        nativeArray0.checkPropertyDefinition(nativeJavaPackage1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: com.google.javascript.rhino.head.NativeJavaPackage@0000000006 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertNotNull(nativeBoolean0);
      
      Context context0 = new Context();
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      NativeBoolean nativeBoolean1 = (NativeBoolean)context0.initStandardObjects((ScriptableObject) nativeBoolean0, false);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(nativeBoolean1.isSealed());
      assertFalse(nativeBoolean1.hasPrototypeMap());
      assertEquals("object", nativeBoolean1.getTypeOf());
      assertFalse(nativeBoolean1.avoidObjectDetection());
      assertFalse(nativeBoolean1.isEmpty());
      assertTrue(nativeBoolean1.isExtensible());
      assertEquals("Boolean", nativeBoolean1.getClassName());
      assertNotNull(nativeBoolean1);
      assertSame(nativeBoolean0, nativeBoolean1);
      assertSame(nativeBoolean1, nativeBoolean0);
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeBoolean0, "8E/2Law@z", 13, "hasTag", 115, nativeBoolean1);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(nativeBoolean1.isSealed());
      assertFalse(nativeBoolean1.hasPrototypeMap());
      assertEquals("object", nativeBoolean1.getTypeOf());
      assertFalse(nativeBoolean1.avoidObjectDetection());
      assertFalse(nativeBoolean1.isEmpty());
      assertTrue(nativeBoolean1.isExtensible());
      assertEquals("Boolean", nativeBoolean1.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals(13, idFunctionObject0.methodId());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertTrue(idFunctionObject0.isEmpty());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(115, idFunctionObject0.getArity());
      assertEquals("hasTag", idFunctionObject0.getFunctionName());
      assertTrue(idFunctionObject0.isExtensible());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(115, idFunctionObject0.getLength());
      assertNotNull(idFunctionObject0);
      
      Short short0 = new Short((short)21);
      assertEquals((short)21, (short)short0);
      assertNotNull(short0);
      
      Object object0 = ScriptableObject.getTopScopeValue(nativeBoolean1, short0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(nativeBoolean1.isSealed());
      assertFalse(nativeBoolean1.hasPrototypeMap());
      assertEquals("object", nativeBoolean1.getTypeOf());
      assertFalse(nativeBoolean1.avoidObjectDetection());
      assertFalse(nativeBoolean1.isEmpty());
      assertTrue(nativeBoolean1.isExtensible());
      assertEquals("Boolean", nativeBoolean1.getClassName());
      assertNull(object0);
      assertSame(nativeBoolean0, nativeBoolean1);
      assertSame(nativeBoolean1, nativeBoolean0);
      
      ScriptRuntime.NoSuchMethodShim scriptRuntime_NoSuchMethodShim0 = new ScriptRuntime.NoSuchMethodShim(idFunctionObject0, "hasTag");
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(nativeBoolean1.isSealed());
      assertFalse(nativeBoolean1.hasPrototypeMap());
      assertEquals("object", nativeBoolean1.getTypeOf());
      assertFalse(nativeBoolean1.avoidObjectDetection());
      assertFalse(nativeBoolean1.isEmpty());
      assertTrue(nativeBoolean1.isExtensible());
      assertEquals("Boolean", nativeBoolean1.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals(13, idFunctionObject0.methodId());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertTrue(idFunctionObject0.isEmpty());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(115, idFunctionObject0.getArity());
      assertEquals("hasTag", idFunctionObject0.getFunctionName());
      assertTrue(idFunctionObject0.isExtensible());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(115, idFunctionObject0.getLength());
      assertNotNull(scriptRuntime_NoSuchMethodShim0);
      
      idFunctionObject0.put(67232232, (Scriptable) nativeBoolean1, (Object) scriptRuntime_NoSuchMethodShim0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(nativeBoolean1.isSealed());
      assertFalse(nativeBoolean1.hasPrototypeMap());
      assertEquals("object", nativeBoolean1.getTypeOf());
      assertFalse(nativeBoolean1.avoidObjectDetection());
      assertFalse(nativeBoolean1.isEmpty());
      assertTrue(nativeBoolean1.isExtensible());
      assertEquals("Boolean", nativeBoolean1.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals(13, idFunctionObject0.methodId());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertTrue(idFunctionObject0.isEmpty());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(115, idFunctionObject0.getArity());
      assertEquals("hasTag", idFunctionObject0.getFunctionName());
      assertTrue(idFunctionObject0.isExtensible());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(115, idFunctionObject0.getLength());
      assertSame(nativeBoolean0, nativeBoolean1);
      assertSame(nativeBoolean1, nativeBoolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test077()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      assertNotNull(nativeCall0);
      
      Context context0 = Context.getCurrentContext();
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertNotNull(nativeIterator_StopIteration0);
      
      nativeIterator_StopIteration0.defineConst("error reporter", nativeCall0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeCall0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, objectArray0.length);
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test078()  throws Throwable  {
      ContextListener contextListener0 = mock(ContextListener.class, new ViolatedAssumptionAnswer());
      Delegator delegator0 = new Delegator();
      assertNotNull(delegator0);
      
      Class<FunctionObject> class0 = FunctionObject.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) delegator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.FunctionObject\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test079()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertNotNull(nativeCall0);
      
      Context context0 = Context.getCurrentContext();
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      Class<NativeError> class0 = NativeError.class;
      NativeError nativeError0 = ScriptableObject.getTypedProperty((Scriptable) nativeCall0, "language version", class0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertNull(nativeError0);
      
      NativeGenerator nativeGenerator0 = NativeGenerator.init((ScriptableObject) null, false);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertFalse(nativeGenerator0.isSealed());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.isExtensible());
      assertTrue(nativeGenerator0.isEmpty());
      assertNotNull(nativeGenerator0);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeCall0, 13);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeCall0.isEmpty());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertNotNull(nativeCall0);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeCall0, "5", 13, "8E/2Law@z", 13, nativeCall0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeCall0.isEmpty());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals(13, idFunctionObject0.methodId());
      assertEquals(13, idFunctionObject0.getLength());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(13, idFunctionObject0.getArity());
      assertEquals("8E/2Law@z", idFunctionObject0.getFunctionName());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertNotNull(idFunctionObject0);
      
      Object object0 = ScriptableObject.getTopScopeValue(nativeCall0, "8E/2Law@z");
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeCall0.isEmpty());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertNull(object0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertNotNull(nativeIterator_StopIteration0);
      
      nativeIterator_StopIteration0.setAttributes("5", (Scriptable) idFunctionObject0, 13);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeCall0.isEmpty());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals(13, idFunctionObject0.methodId());
      assertEquals(13, idFunctionObject0.getLength());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(13, idFunctionObject0.getArity());
      assertEquals("8E/2Law@z", idFunctionObject0.getFunctionName());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      
      Class<NativeJavaMethod> class0 = NativeJavaMethod.class;
      nativeIterator_StopIteration0.defineProperty("5", class0, 4);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      
      ScriptableObject.putProperty((Scriptable) idFunctionObject0, "8E/2Law@z", (Object) null);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeCall0.isEmpty());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertEquals(13, idFunctionObject0.methodId());
      assertEquals(13, idFunctionObject0.getLength());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.isSealed());
      assertFalse(idFunctionObject0.isEmpty());
      assertEquals(13, idFunctionObject0.getArity());
      assertEquals("8E/2Law@z", idFunctionObject0.getFunctionName());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertFalse(idFunctionObject0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = new Context(contextFactory0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(context0);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isEmpty());
      assertNotNull(nativeContinuation0);
      
      NativeContinuation nativeContinuation1 = (NativeContinuation)context0.initStandardObjects((ScriptableObject) nativeContinuation0, false);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isEmpty());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation1.isSealed());
      assertFalse(nativeContinuation1.hasPrototypeMap());
      assertEquals("object", nativeContinuation1.getTypeOf());
      assertTrue(nativeContinuation1.isExtensible());
      assertEquals("Continuation", nativeContinuation1.getClassName());
      assertFalse(nativeContinuation1.isEmpty());
      assertFalse(nativeContinuation1.avoidObjectDetection());
      assertNotNull(nativeContinuation1);
      assertSame(nativeContinuation0, nativeContinuation1);
      assertSame(nativeContinuation1, nativeContinuation0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test082()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertNotNull(nativeCall0);
      
      Context context0 = Context.getCurrentContext();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertNotNull(nativeIterator_StopIteration0);
      
      nativeIterator_StopIteration0.defineConst("error reporter", nativeCall0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      
      Object object0 = nativeIterator_StopIteration0.getGetterOrSetter((String) null, 7, false);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertNull(object0);
      
      NativeObject nativeObject0 = new NativeObject();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isSealed());
      assertNotNull(nativeObject0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertNotNull(importerTopLevel0);
      
      Object object1 = importerTopLevel0.get("language version", (Scriptable) nativeCall0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test083()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertNotNull(nativeCall0);
      
      Context context0 = Context.getCurrentContext();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      boolean boolean0 = ScriptableObject.isTrue((Object) null);
      assertFalse(boolean0);
      
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeCall0, "language version", "error reporter", false);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertNotNull(lazilyLoadedCtor0);
      
      Object object0 = nativeCall0.equivalentValues(lazilyLoadedCtor0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertNotNull(object0);
      
      ScriptableObject.redefineProperty(nativeCall0, "language version", false);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      
      ScriptableObject.putProperty((Scriptable) nativeCall0, "language version", (Object) nativeCall0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test084()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = Context.getCurrentContext();
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(context0);
      
      Scriptable scriptable0 = null;
      Interpreter interpreter0 = new Interpreter();
      assertNotNull(interpreter0);
      
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertNotNull(compilerEnvirons0);
      
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertNotNull(errorReporter0);
      
      Function function0 = null;
      try {
        function0 = new BaseFunction((Scriptable) null, (Scriptable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeCall0.isEmpty());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertNotNull(nativeCall0);
      
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptable((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type object
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, objectArray0.length);
      assertEquals(0L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals(0L, nativeArray0.getLength());
      assertTrue(nativeArray0.isExtensible());
      assertNotNull(nativeArray0);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = new Context(contextFactory0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(context0);
      
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeArray0, false);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, objectArray0.length);
      assertEquals(0L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals(0L, nativeArray0.getLength());
      assertTrue(nativeArray0.isExtensible());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.isExtensible());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertFalse(nativeGenerator0.isSealed());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertTrue(nativeGenerator0.isEmpty());
      assertNotNull(nativeGenerator0);
      
      Object object0 = nativeGenerator0.get((Object) "language version");
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, objectArray0.length);
      assertEquals(0L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals(0L, nativeArray0.getLength());
      assertTrue(nativeArray0.isExtensible());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.isExtensible());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertFalse(nativeGenerator0.isSealed());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertTrue(nativeGenerator0.isEmpty());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test087()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertNotNull(nativeCall0);
      
      boolean boolean0 = ScriptableObject.isTrue(nativeCall0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test088()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertNotNull(nativeCall0);
      
      Context context0 = new Context();
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(context0);
      
      Class<NativeArray> class0 = NativeArray.class;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) nativeCall0, class0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.NativeArray\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertNotNull(nativeIterator_StopIteration0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertNotNull(importerTopLevel0);
      
      int int0 = importerTopLevel0.findInstanceIdInfo("finishInit");
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals(0, int0);
      
      importerTopLevel0.sealObject();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isSealed());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      
      int int1 = importerTopLevel0.size();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isSealed());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertTrue(nativeIterator_StopIteration1.isExtensible());
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertTrue(nativeIterator_StopIteration1.isEmpty());
      assertNotNull(nativeIterator_StopIteration1);
      assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
      
      NativeIterator.StopIteration nativeIterator_StopIteration2 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals("StopIteration", nativeIterator_StopIteration2.getClassName());
      assertTrue(nativeIterator_StopIteration2.isExtensible());
      assertFalse(nativeIterator_StopIteration2.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration2.isSealed());
      assertTrue(nativeIterator_StopIteration2.isEmpty());
      assertFalse(nativeIterator_StopIteration2.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration2.getTypeOf());
      assertNotNull(nativeIterator_StopIteration2);
      assertFalse(nativeIterator_StopIteration2.equals((Object)nativeIterator_StopIteration1));
      assertFalse(nativeIterator_StopIteration2.equals((Object)nativeIterator_StopIteration0));
  }

  @Test(timeout = 4000)
  @Ignore
  public void test090()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertNotNull(nativeCall0);
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeCall0, "execIdCall");
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(boolean0);
      
      Class<NativeGenerator> class0 = NativeGenerator.class;
      NativeNumber nativeNumber0 = new NativeNumber(3503.900675896);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertTrue(nativeNumber0.isExtensible());
      assertNotNull(nativeNumber0);
      
      NativeNumber nativeNumber1 = new NativeNumber(8);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeNumber1.isExtensible());
      assertEquals("Number", nativeNumber1.getClassName());
      assertFalse(nativeNumber1.isSealed());
      assertEquals("object", nativeNumber1.getTypeOf());
      assertFalse(nativeNumber1.hasPrototypeMap());
      assertFalse(nativeNumber1.avoidObjectDetection());
      assertTrue(nativeNumber1.isEmpty());
      assertNotNull(nativeNumber1);
      assertFalse(nativeNumber1.equals((Object)nativeNumber0));
      
      String[] stringArray0 = new String[0];
      nativeNumber1.defineFunctionProperties(stringArray0, class0, 0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, stringArray0.length);
      assertTrue(nativeNumber1.isExtensible());
      assertEquals("Number", nativeNumber1.getClassName());
      assertFalse(nativeNumber1.isSealed());
      assertEquals("object", nativeNumber1.getTypeOf());
      assertFalse(nativeNumber1.hasPrototypeMap());
      assertFalse(nativeNumber1.avoidObjectDetection());
      assertTrue(nativeNumber1.isEmpty());
      assertFalse(nativeNumber1.equals((Object)nativeNumber0));
      assertNotSame(nativeNumber1, nativeNumber0);
      
      Context context0 = Context.getContext();
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertNotNull(importerTopLevel0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test091()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertNotNull(nativeCall0);
      
      Context context0 = Context.getCurrentContext();
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertNotNull(context0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertNotNull(nativeIterator_StopIteration0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertTrue(nativeIterator_StopIteration1.isExtensible());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertTrue(nativeIterator_StopIteration1.isEmpty());
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      assertNotNull(nativeIterator_StopIteration1);
      assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
      
      nativeIterator_StopIteration0.defineOwnProperty(context0, (Object) null, (ScriptableObject) nativeCall0, false);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.equals((Object)nativeIterator_StopIteration1));
      assertNotSame(nativeIterator_StopIteration0, nativeIterator_StopIteration1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertNotNull(importerTopLevel0);
      
      Object[] objectArray0 = importerTopLevel0.getAllIds();
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(59, objectArray0.length);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertNotNull(objectArray0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertNotNull(nativeIterator_StopIteration0);
      
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.defineProperty("error reporter", class0, 130);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 131
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertNotNull(importerTopLevel0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertNotNull(nativeIterator_StopIteration0);
      
      importerTopLevel0.checkPropertyChange("w{~", nativeIterator_StopIteration0, nativeIterator_StopIteration0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      
      ScriptableObject.putProperty((Scriptable) importerTopLevel0, "$Qd-rP", (Object) context0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      ClassLoader classLoader0 = contextFactory0.getApplicationClassLoader();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertNotNull(nativeJavaTopPackage0);
      
      importerTopLevel0.putConst("$Qd-rP", nativeIterator_StopIteration0, contextFactory0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      Context context1 = Context.getContext();
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context1.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getOptimizationLevel());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertFalse(context1.isGeneratingDebugChanged());
      assertTrue(context1.isGeneratingSource());
      assertFalse(context1.isGeneratingDebug());
      assertEquals(0, context1.getLanguageVersion());
      assertNotNull(context1);
      assertSame(context1, context0);
      
      Context context2 = Context.getContext();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context2.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(Integer.MAX_VALUE, context2.getMaximumInterpreterStackDepth());
      assertEquals(0, context2.getOptimizationLevel());
      assertFalse(context2.isGeneratingDebug());
      assertFalse(context2.isSealed());
      assertEquals(0, context2.getLanguageVersion());
      assertFalse(context2.isGeneratingDebugChanged());
      assertTrue(context2.isGeneratingSource());
      assertEquals(0, context2.getInstructionObserverThreshold());
      assertNotNull(context2);
      assertSame(context2, context0);
      assertSame(context2, context1);
      
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel(context2);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context2.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(Integer.MAX_VALUE, context2.getMaximumInterpreterStackDepth());
      assertEquals(0, context2.getOptimizationLevel());
      assertFalse(context2.isGeneratingDebug());
      assertFalse(context2.isSealed());
      assertEquals(0, context2.getLanguageVersion());
      assertFalse(context2.isGeneratingDebugChanged());
      assertTrue(context2.isGeneratingSource());
      assertEquals(0, context2.getInstructionObserverThreshold());
      assertTrue(importerTopLevel1.hasPrototypeMap());
      assertTrue(importerTopLevel1.isExtensible());
      assertEquals("object", importerTopLevel1.getTypeOf());
      assertFalse(importerTopLevel1.avoidObjectDetection());
      assertFalse(importerTopLevel1.isEmpty());
      assertFalse(importerTopLevel1.isSealed());
      assertEquals("global", importerTopLevel1.getClassName());
      assertNotNull(importerTopLevel1);
      assertFalse(importerTopLevel1.equals((Object)importerTopLevel0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, objectArray0.length);
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(0L, nativeArray0.getLength());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertNotNull(nativeArray0);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enterContext();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      NativeObject nativeObject0 = (NativeObject)context0.initStandardObjects();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertNotNull(nativeObject0);
      
      Class<Arguments> class0 = Arguments.class;
      NativeObject nativeObject1 = (NativeObject)context0.newObject((Scriptable) nativeObject0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertEquals("Object", nativeObject1.getClassName());
      assertFalse(nativeObject1.isSealed());
      assertFalse(nativeObject1.avoidObjectDetection());
      assertFalse(nativeObject1.hasPrototypeMap());
      assertEquals("object", nativeObject1.getTypeOf());
      assertTrue(nativeObject1.isEmpty());
      assertTrue(nativeObject1.isExtensible());
      assertNotNull(nativeObject1);
      assertFalse(nativeObject1.equals((Object)nativeObject0));
      assertNotSame(nativeObject0, nativeObject1);
      assertNotSame(nativeObject1, nativeObject0);
      
      Arguments arguments0 = ScriptableObject.getTypedProperty((Scriptable) nativeObject0, 108957, class0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertNull(arguments0);
      assertFalse(nativeObject0.equals((Object)nativeObject1));
      assertNotSame(nativeObject0, nativeObject1);
      
      Object[] objectArray1 = nativeObject0.getIds();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, objectArray1.length);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertNotNull(objectArray1);
      assertFalse(nativeObject0.equals((Object)nativeObject1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(nativeObject0, nativeObject1);
      assertNotSame(objectArray1, objectArray0);
      
      boolean boolean0 = nativeArray0.isEmpty();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, objectArray0.length);
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(0L, nativeArray0.getLength());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(boolean0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotSame(objectArray0, objectArray1);
      
      // Undeclared exception!
      try { 
        nativeObject0.getGetterOrSetter("error reporter", 1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // error reporter
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, objectArray0.length);
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertEquals(0L, nativeArray0.getLength());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertNotNull(nativeArray0);
      
      Context context0 = new Context(contextFactory0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertNotNull(context0);
      
      NativeObject nativeObject0 = (NativeObject)context0.initStandardObjects();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertNotNull(nativeObject0);
      
      NativeObject nativeObject1 = (NativeObject)context0.initStandardObjects((ScriptableObject) nativeObject0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertEquals("Object", nativeObject1.getClassName());
      assertFalse(nativeObject1.hasPrototypeMap());
      assertEquals("object", nativeObject1.getTypeOf());
      assertTrue(nativeObject1.isExtensible());
      assertFalse(nativeObject1.isSealed());
      assertFalse(nativeObject1.isEmpty());
      assertFalse(nativeObject1.avoidObjectDetection());
      assertNotNull(nativeObject1);
      assertSame(nativeObject0, nativeObject1);
      assertSame(nativeObject1, nativeObject0);
      
      boolean boolean0 = nativeArray0.has(0, (Scriptable) nativeObject1);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, objectArray0.length);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertEquals(0L, nativeArray0.getLength());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertEquals("Object", nativeObject1.getClassName());
      assertFalse(nativeObject1.hasPrototypeMap());
      assertEquals("object", nativeObject1.getTypeOf());
      assertTrue(nativeObject1.isExtensible());
      assertFalse(nativeObject1.isSealed());
      assertFalse(nativeObject1.isEmpty());
      assertFalse(nativeObject1.avoidObjectDetection());
      assertFalse(boolean0);
      assertSame(nativeObject0, nativeObject1);
      assertSame(nativeObject1, nativeObject0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertNotNull(importerTopLevel0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertNotNull(nativeIterator_StopIteration0);
      
      nativeIterator_StopIteration0.setGetterOrSetter((String) null, 2, (Callable) null, false);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(importerTopLevel0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, objectArray0.length);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertNotNull(nativeCall0);
      
      Context context0 = Context.enter();
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertNotNull(context0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertNotNull(nativeIterator_StopIteration0);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      NativeObject nativeObject0 = new NativeObject();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertNotNull(nativeObject0);
      
      nativeObject0.defineOwnProperties(context0, nativeCall0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test098()  throws Throwable  {
      Class<NativeMath> class0 = NativeMath.class;
      // Undeclared exception!
      try { 
        ScriptableObject.buildClassCtor((Scriptable) null, class0, false, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.NativeMath\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertNotNull(nativeIterator_StopIteration0);
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeIterator_StopIteration0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, objectArray0.length);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertNotNull(importerTopLevel0);
      
      NativeObject nativeObject0 = (NativeObject)ScriptableObject.buildDataDescriptor(importerTopLevel0, importerTopLevel0, 4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertTrue(nativeObject0.isExtensible());
      assertNotNull(nativeObject0);
      
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) nativeObject0, "error reporter", (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000363 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertNotNull(nativeIterator_StopIteration0);
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeIterator_StopIteration0, "Z");
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(boolean0);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = Context.enter();
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertNotNull(context0);
      
      NativeObject nativeObject0 = (NativeObject)context0.initStandardObjects();
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertNotNull(nativeObject0);
      
      nativeObject0.delete("(%Zk");
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      
      nativeIterator_StopIteration0.put("msg.invalid.type", (Scriptable) nativeObject0, (Object) null);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      
      NativeArray nativeArray0 = new NativeArray(0L);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(0L, nativeArray0.getLength());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertNotNull(nativeArray0);
      
      boolean boolean1 = nativeArray0.isEmpty();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(0L, nativeArray0.getLength());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.getGetterOrSetter("error reporter", 4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // error reporter
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertNotNull(nativeIterator_StopIteration0);
      
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeIterator_StopIteration0, true);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeGenerator0.isEmpty());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertTrue(nativeGenerator0.isExtensible());
      assertTrue(nativeGenerator0.isSealed());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertNotNull(nativeGenerator0);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = Double.isFinite(8);
      assertTrue(boolean0);
      
      boolean boolean1 = nativeIterator_StopIteration0.sameValue(nativeGenerator0, double0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeGenerator0.isEmpty());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertTrue(nativeGenerator0.isExtensible());
      assertTrue(nativeGenerator0.isSealed());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<NativeError> class0 = NativeError.class;
      NativeError nativeError0 = ScriptableObject.getTypedProperty((Scriptable) nativeGenerator0, "msg.bad.assign.left", class0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeGenerator0.isEmpty());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertTrue(nativeGenerator0.isExtensible());
      assertTrue(nativeGenerator0.isSealed());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertNull(nativeError0);
      
      NativeGenerator nativeGenerator1 = NativeGenerator.init(nativeGenerator0, true);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeGenerator0.isEmpty());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertTrue(nativeGenerator0.isExtensible());
      assertTrue(nativeGenerator0.isSealed());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertTrue(nativeGenerator1.isExtensible());
      assertTrue(nativeGenerator1.isSealed());
      assertEquals("object", nativeGenerator1.getTypeOf());
      assertTrue(nativeGenerator1.isEmpty());
      assertEquals("Generator", nativeGenerator1.getClassName());
      assertTrue(nativeGenerator1.hasPrototypeMap());
      assertFalse(nativeGenerator1.avoidObjectDetection());
      assertNotNull(nativeGenerator1);
      assertFalse(nativeGenerator1.equals((Object)nativeGenerator0));
      assertNotSame(nativeGenerator0, nativeGenerator1);
      assertNotSame(nativeGenerator1, nativeGenerator0);
      
      NativeGenerator nativeGenerator2 = new NativeGenerator(nativeIterator_StopIteration0, (NativeFunction) null, (Object) null);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeGenerator2.isExtensible());
      assertFalse(nativeGenerator2.isSealed());
      assertFalse(nativeGenerator2.avoidObjectDetection());
      assertTrue(nativeGenerator2.isEmpty());
      assertEquals("Generator", nativeGenerator2.getClassName());
      assertEquals("object", nativeGenerator2.getTypeOf());
      assertFalse(nativeGenerator2.hasPrototypeMap());
      assertNotNull(nativeGenerator2);
      assertFalse(nativeGenerator2.equals((Object)nativeGenerator0));
      assertFalse(nativeGenerator2.equals((Object)nativeGenerator1));
      
      Object object0 = nativeGenerator2.get((Object) nativeGenerator1);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeGenerator0.isEmpty());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertTrue(nativeGenerator0.isExtensible());
      assertTrue(nativeGenerator0.isSealed());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertTrue(nativeGenerator1.isExtensible());
      assertTrue(nativeGenerator1.isSealed());
      assertEquals("object", nativeGenerator1.getTypeOf());
      assertTrue(nativeGenerator1.isEmpty());
      assertEquals("Generator", nativeGenerator1.getClassName());
      assertTrue(nativeGenerator1.hasPrototypeMap());
      assertFalse(nativeGenerator1.avoidObjectDetection());
      assertTrue(nativeGenerator2.isExtensible());
      assertFalse(nativeGenerator2.isSealed());
      assertFalse(nativeGenerator2.avoidObjectDetection());
      assertTrue(nativeGenerator2.isEmpty());
      assertEquals("Generator", nativeGenerator2.getClassName());
      assertEquals("object", nativeGenerator2.getTypeOf());
      assertFalse(nativeGenerator2.hasPrototypeMap());
      assertNull(object0);
      assertFalse(nativeGenerator0.equals((Object)nativeGenerator1));
      assertFalse(nativeGenerator0.equals((Object)nativeGenerator2));
      assertFalse(nativeGenerator1.equals((Object)nativeGenerator2));
      assertFalse(nativeGenerator1.equals((Object)nativeGenerator0));
      assertFalse(nativeGenerator2.equals((Object)nativeGenerator0));
      assertFalse(nativeGenerator2.equals((Object)nativeGenerator1));
      assertNotSame(nativeGenerator0, nativeGenerator1);
      assertNotSame(nativeGenerator0, nativeGenerator2);
      assertNotSame(nativeGenerator1, nativeGenerator2);
      assertNotSame(nativeGenerator1, nativeGenerator0);
      assertNotSame(nativeGenerator2, nativeGenerator0);
      assertNotSame(nativeGenerator2, nativeGenerator1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test103()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertNotNull(nativeIterator_StopIteration0);
      
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeIterator_StopIteration0, true);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeGenerator0.isEmpty());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertTrue(nativeGenerator0.isExtensible());
      assertTrue(nativeGenerator0.isSealed());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertNotNull(nativeGenerator0);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = Double.isFinite(8);
      assertTrue(boolean0);
      
      boolean boolean1 = nativeIterator_StopIteration0.sameValue(nativeGenerator0, double0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeGenerator0.isEmpty());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertTrue(nativeGenerator0.isExtensible());
      assertTrue(nativeGenerator0.isSealed());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Context context0 = new Context();
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertNotNull(importerTopLevel0);
      
      int int0 = importerTopLevel0.size();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertEquals(0, int0);
      
      Class<NativeJavaMethod> class0 = NativeJavaMethod.class;
      nativeIterator_StopIteration0.defineProperty("init", class0, 13);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      
      // Undeclared exception!
      try { 
        ScriptableObject.putProperty((Scriptable) nativeGenerator0, "language version", (Object) nativeGenerator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: language version.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test104()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeCall0.isEmpty());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertNotNull(nativeCall0);
      
      ScriptableObject.putProperty((Scriptable) nativeCall0, 2, (Object) nativeCall0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      
      Context context0 = Context.getCurrentContext();
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(context0);
      
      Synchronizer synchronizer0 = new Synchronizer(nativeCall0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertNotNull(synchronizer0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertNotNull(nativeIterator_StopIteration0);
      
      Object object0 = ScriptableObject.getTopScopeValue(synchronizer0, (Object) null);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertNotNull(nativeIterator_StopIteration0);
      
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeIterator_StopIteration0, true);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeGenerator0.isEmpty());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.isSealed());
      assertTrue(nativeGenerator0.isExtensible());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertNotNull(nativeGenerator0);
      
      nativeGenerator0.sealObject();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeGenerator0.isEmpty());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.isSealed());
      assertTrue(nativeGenerator0.isExtensible());
      assertEquals("object", nativeGenerator0.getTypeOf());
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = Double.isFinite(8);
      assertTrue(boolean0);
      
      boolean boolean1 = nativeIterator_StopIteration0.sameValue(nativeGenerator0, double0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeGenerator0.isEmpty());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.isSealed());
      assertTrue(nativeGenerator0.isExtensible());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      NativeObject nativeObject0 = new NativeObject();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertNotNull(nativeObject0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test106()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isEmpty());
      assertNotNull(nativeCall0);
      
      Context context0 = Context.getCurrentContext();
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertNotNull(nativeIterator_StopIteration0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeIterator_StopIteration1.isEmpty());
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertTrue(nativeIterator_StopIteration1.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertNotNull(nativeIterator_StopIteration1);
      assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
      
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.defineOwnProperty(context0, (Object) nativeIterator_StopIteration1, (ScriptableObject) nativeIterator_StopIteration1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertNotNull(context0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertNotNull(nativeIterator_StopIteration0);
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeIterator_StopIteration0, context0, 10, "language version", 8, nativeIterator_StopIteration0);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(8, idFunctionObject0.getLength());
      assertEquals("language version", idFunctionObject0.getFunctionName());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(10, idFunctionObject0.methodId());
      assertEquals(8, idFunctionObject0.getArity());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertTrue(idFunctionObject0.isExtensible());
      assertNotNull(idFunctionObject0);
      
      NativeGenerator nativeGenerator0 = NativeGenerator.init(idFunctionObject0, false);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(8, idFunctionObject0.getLength());
      assertEquals("language version", idFunctionObject0.getFunctionName());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(10, idFunctionObject0.methodId());
      assertEquals(8, idFunctionObject0.getArity());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertTrue(idFunctionObject0.isExtensible());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertFalse(nativeGenerator0.isSealed());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.isEmpty());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertTrue(nativeGenerator0.isExtensible());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertNotNull(nativeGenerator0);
      
      Object object0 = nativeGenerator0.get((Object) null);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(8, idFunctionObject0.getLength());
      assertEquals("language version", idFunctionObject0.getFunctionName());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(10, idFunctionObject0.methodId());
      assertEquals(8, idFunctionObject0.getArity());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertTrue(idFunctionObject0.isExtensible());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertFalse(nativeGenerator0.isSealed());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.isEmpty());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertTrue(nativeGenerator0.isExtensible());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test108()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      importerTopLevel0.isGenericDescriptor(nativeIterator_StopIteration1);
      NativeIterator.StopIteration nativeIterator_StopIteration2 = new NativeIterator.StopIteration();
      assertFalse(nativeIterator_StopIteration2.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeCall0, "5", 1411);
      Class<Synchronizer> class0 = Synchronizer.class;
      ScriptableObject.getTypedProperty((Scriptable) scriptableObject0, "5", class0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.putConst("5", nativeCall0, "5");
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertTrue(nativeIterator_StopIteration0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      importerTopLevel0.checkPropertyChange("language version", nativeIterator_StopIteration0, nativeIterator_StopIteration0);
      NativeCall nativeCall0 = context0.currentActivationCall;
      NativeNumber.init(importerTopLevel0, true);
      assertEquals("global", importerTopLevel0.getClassName());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ContextFactory.getGlobal();
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      String string0 = "a-} C85$=J-ep^]";
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) nativeArray0, "a-} C85$=J-ep^]", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000003 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test112()  throws Throwable  {
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      Scriptable scriptable0 = context0.scratchScriptable;
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.defineConst("error reporter", (Scriptable) null);
      Class<NativeArray> class0 = NativeArray.class;
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.getDefaultValue(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.NativeArray
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.defineProperty("Q_nyIR~fvq|1:b78", (Object) "Q_nyIR~fvq|1:b78", 55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 55
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      ScriptableObject.putProperty((Scriptable) nativeCall0, 2, (Object) nativeCall0);
      Synchronizer synchronizer0 = new Synchronizer(nativeCall0);
      NativeObject nativeObject0 = new NativeObject();
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Context.getCurrentContext();
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.getGetterOrSetter("#e+p@", 6, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // #e+p@
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      ScriptableObject.redefineProperty(nativeCall0, "", true);
      UniqueTag uniqueTag0 = (UniqueTag)Scriptable.NOT_FOUND;
      Object object0 = nativeCall0.get((Object) nativeCall0);
      assertNull(object0);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeCall0, "configurable");
      assertTrue(boolean0);
      
      nativeCall0.equivalentValues(nativeCall0);
      Synchronizer synchronizer0 = new Synchronizer(nativeCall0, (Object) null);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      Context.getCurrentContext();
      Context context1 = Context.enter(context0);
      Context.toNumber(context1);
      ScriptableObject.getPropertyIds(nativeCall0);
      assertTrue(nativeCall0.isExtensible());
  }
}

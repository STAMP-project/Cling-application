/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 02:12:49 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class YearMonthDay_ESTest extends YearMonthDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      YearMonthDay yearMonthDay0 = YearMonthDay.fromDateFields(mockDate0);
      Period period0 = Period.ZERO;
      YearMonthDay yearMonthDay1 = yearMonthDay0.plus(period0);
      assertEquals(2014, yearMonthDay1.getYear());
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertEquals(2, yearMonthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      DateTime dateTime0 = yearMonthDay0.toDateTimeAtCurrentTime();
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0);
      YearMonthDay yearMonthDay1 = yearMonthDay0.withPeriodAdded(period0, 0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertSame(yearMonthDay1, yearMonthDay0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1972, 2792, 0);
      YearMonthDay yearMonthDay0 = YearMonthDay.fromCalendarFields(mockGregorianCalendar0);
      YearMonthDay yearMonthDay1 = yearMonthDay0.plusMonths(0);
      assertEquals(2204, yearMonthDay1.getYear());
      assertSame(yearMonthDay1, yearMonthDay0);
      assertEquals(8, yearMonthDay0.getMonthOfYear());
      assertEquals(31, yearMonthDay0.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      YearMonthDay yearMonthDay0 = new YearMonthDay((-1L), (Chronology) copticChronology0);
      YearMonthDay yearMonthDay1 = yearMonthDay0.plusDays(45);
      assertEquals(7, yearMonthDay1.getDayOfMonth());
      assertEquals(6, yearMonthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      YearMonthDay yearMonthDay0 = new YearMonthDay(1, 1, 1);
      YearMonthDay yearMonthDay1 = yearMonthDay0.withField(dateTimeFieldType0, 1);
      assertSame(yearMonthDay1, yearMonthDay0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) 1, (Chronology) copticChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      YearMonthDay yearMonthDay1 = yearMonthDay0.withField(dateTimeFieldType0, 1);
      assertEquals(1, yearMonthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      YearMonthDay yearMonthDay0 = new YearMonthDay(1563L, (Chronology) copticChronology0);
      YearMonthDay yearMonthDay1 = yearMonthDay0.withChronologyRetainFields(copticChronology0);
      assertSame(yearMonthDay1, yearMonthDay0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      // Undeclared exception!
      try { 
        yearMonthDay0.getField((-783));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -783
         //
         verifyException("org.joda.time.YearMonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonthDay.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.YearMonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonthDay.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.YearMonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      YearMonthDay yearMonthDay1 = yearMonthDay0.minusDays(1);
      assertEquals(13, yearMonthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay(1, 1, 1);
      YearMonthDay yearMonthDay1 = yearMonthDay0.minusYears(1);
      assertEquals(0, yearMonthDay1.getYear());
      assertEquals(1, yearMonthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      Period period0 = Period.hours(1);
      YearMonthDay yearMonthDay1 = yearMonthDay0.minus(period0);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertTrue(yearMonthDay1.equals((Object)yearMonthDay0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      YearMonthDay yearMonthDay0 = YearMonthDay.fromDateFields(mockDate0);
      DateMidnight dateMidnight0 = yearMonthDay0.toDateMidnight();
      assertEquals(1392332400000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      YearMonthDay yearMonthDay1 = yearMonthDay0.minusMonths(408);
      assertEquals(2, yearMonthDay1.getMonthOfYear());
      assertEquals(1980, yearMonthDay1.getYear());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      YearMonthDay yearMonthDay0 = new YearMonthDay(1, 1, 1);
      YearMonthDay yearMonthDay1 = new YearMonthDay(yearMonthDay0, copticChronology0);
      assertEquals(1, yearMonthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      YearMonthDay yearMonthDay0 = new YearMonthDay(1563L, (Chronology) copticChronology0);
      YearMonthDay yearMonthDay1 = yearMonthDay0.withMonthOfYear(2);
      assertEquals(2, yearMonthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay(1, 1, 1);
      LocalDate localDate0 = yearMonthDay0.toLocalDate();
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      YearMonthDay yearMonthDay1 = yearMonthDay0.plus((ReadablePeriod) null);
      assertEquals(2, YearMonthDay.DAY_OF_MONTH);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      YearMonthDay yearMonthDay0 = new YearMonthDay((DateTimeZone) fixedDateTimeZone0);
      YearMonthDay yearMonthDay1 = yearMonthDay0.withDayOfMonth(2);
      assertEquals(2, yearMonthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertEquals(14, yearMonthDay0.getDayOfMonth());
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.plusYears(0);
      assertSame(yearMonthDay1, yearMonthDay0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      YearMonthDay yearMonthDay1 = yearMonthDay0.withChronologyRetainFields(copticChronology0);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertEquals(2014, yearMonthDay1.getYear());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      YearMonthDay yearMonthDay0 = new YearMonthDay(1566L, (Chronology) copticChronology0);
      yearMonthDay0.getFieldTypes();
      assertEquals(1686, yearMonthDay0.getYear());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) 1, (Chronology) copticChronology0);
      String string0 = yearMonthDay0.toString();
      assertEquals("1686-04-23", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      YearMonthDay yearMonthDay1 = yearMonthDay0.withYear(1);
      assertEquals(1, yearMonthDay1.getYear());
      assertEquals(14, yearMonthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) 1, (Chronology) copticChronology0);
      DateTime dateTime0 = yearMonthDay0.toDateTimeAtMidnight();
      assertEquals((-3600000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) copticChronology0);
      assertEquals(1730, yearMonthDay0.getYear());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertEquals(3, yearMonthDay0.size());
      assertEquals(2, yearMonthDay0.getMonthOfYear());
      
      Interval interval0 = yearMonthDay0.toInterval();
      assertEquals(14, yearMonthDay0.getDayOfMonth());
      assertEquals(1392332400000L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay(4868L);
      DateTime dateTime0 = yearMonthDay0.toDateTimeAtCurrentTime();
      assertEquals(73281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) 1, (Chronology) copticChronology0);
      YearMonthDay yearMonthDay1 = new YearMonthDay(yearMonthDay0);
      assertEquals(1686, yearMonthDay0.getYear());
      assertEquals(23, yearMonthDay0.getDayOfMonth());
      assertEquals(3, yearMonthDay1.size());
  }
}

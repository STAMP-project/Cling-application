/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 20:58:50 GMT 2019
 */

package org.mockito.asm.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.mockito.asm.AnnotationVisitor;
import org.mockito.asm.FieldVisitor;
import org.mockito.asm.MethodVisitor;
import org.mockito.asm.util.ASMifierClassVisitor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ASMifierClassVisitor_ESTest extends ASMifierClassVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visitInnerClass("\":$F`?", "\":$F`?", "`+6]W@rh8%Hg4>zve", 262144);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess(131072);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess(512);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess(1024);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visit(4320, 8192, "K'~@F;&09Cg90A0uEu", "K'~@F;&09Cg90A0uEu", "JDf''k", aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(16);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess(16411);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.appendAccess(256);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess((-1920));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess(128);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess(64);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess((-4032));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess((-1056));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      File file0 = MockFile.createTempFile(";V?Z7~u", ";V?Z7~u");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess((-1730488472));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(16);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(16377, ".bjU8UGwX%@", ")`:ClU?58n", ".bjU8UGwX%@", stringArray0);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(3870, "5~*ah", "U", "5~*ah", (String[]) null);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      String[] stringArray0 = new String[0];
      aSMifierClassVisitor0.visit(92, 92, "3;+!qu<<zMX", "3;+!qu<<zMX", "3;+!qu<<zMX", stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visit(196653, 196653, "Z9u' E^_Zn,", "Lr\"EtE;%_lmU", "1]A9}3bd ZH-S< A", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visit(50, (-356), "mv.visitLabel(", "7X3uwI", "I)ih}IQo3C{Bf", aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visit(48, 48, "zCg ", "zCg ", "zCg ", aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visit(47, 4096, "`+6]W@rh8%Hg4>zve", "-debug", "mv.visitLookupSwitchInsn(", aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(16);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visit(46, 16, "", "P=@w ]\"X>dL_", "org.mockito.asm.util.ASMifierClassVisitor", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visit(49, 49, "5H", "Deprecated", "^ANtE5-$}dcV1]YNr", aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visit((-1), (-1), "c}#P*/,Yzt?_", "c}#P*/,Yzt?_", "|87L,'|JDf''k.class", (String[]) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "_u\"f_/c==d{EDCU5";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "z";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Class not found
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".class";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-debug";
      ASMifierClassVisitor.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-debug";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      ASMifierClassVisitor.main(aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASMifierClassVisitor.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(16);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      AnnotationVisitor annotationVisitor0 = aSMifierClassVisitor0.visitAnnotation("Off", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(1778, (String) null, (String) null, (String) null, mockPrintWriter0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(2048, "", "", "", aSMifierClassVisitor0.TYPES);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      // Undeclared exception!
      try { 
        aSMifierClassVisitor0.visitEnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.util.AbstractVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visitOuterClass("5H", "ConstantValue", "8d6z(b4MsKTo8@E");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      File file0 = MockFile.createTempFile(";V?Z7~u", ";V?Z7~u");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visitInnerClass("O6y5hiD1?zp!MS", "boolean", (String) null, 16384);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visitSource("S<BU~Z#RleCk", "S<BU~Z#RleCk");
  }
}

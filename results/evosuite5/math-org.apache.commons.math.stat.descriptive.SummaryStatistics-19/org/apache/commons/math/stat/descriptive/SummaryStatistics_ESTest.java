/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 15:49:44 GMT 2019
 */

package org.apache.commons.math.stat.descriptive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.stat.descriptive.StatisticalSummary;
import org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic;
import org.apache.commons.math.stat.descriptive.SummaryStatistics;
import org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl;
import org.apache.commons.math.stat.descriptive.moment.FirstMoment;
import org.apache.commons.math.stat.descriptive.moment.FourthMoment;
import org.apache.commons.math.stat.descriptive.moment.GeometricMean;
import org.apache.commons.math.stat.descriptive.moment.SecondMoment;
import org.apache.commons.math.stat.descriptive.moment.StandardDeviation;
import org.apache.commons.math.stat.descriptive.moment.Variance;
import org.apache.commons.math.stat.descriptive.rank.Min;
import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SummaryStatistics_ESTest extends SummaryStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      summaryStatistics0.n = 1L;
      FirstMoment firstMoment0 = new FirstMoment();
      // Undeclared exception!
      try { 
        summaryStatistics0.setSumLogImpl(firstMoment0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Implementations must be configured before values are added.
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      Variance variance0 = new Variance(false);
      double[] doubleArray0 = new double[6];
      variance0.incrementAll(doubleArray0);
      summaryStatistics0.setVarianceImpl(variance0);
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      boolean boolean0 = summaryStatistics0.equals(summaryStatisticsImpl0);
      assertFalse(boolean0);
      assertEquals(0L, summaryStatisticsImpl0.getN());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      SummaryStatistics summaryStatistics0 = SummaryStatistics.newInstance();
      assertTrue(summaryStatistics0.equals((Object)summaryStatisticsImpl0));
      
      GeometricMean geometricMean0 = new GeometricMean();
      geometricMean0.increment(2438.906493661776);
      summaryStatistics0.setSumsqImpl(geometricMean0);
      boolean boolean0 = summaryStatistics0.equals(summaryStatisticsImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      Min min0 = new Min();
      min0.increment((-73.2375714));
      summaryStatisticsImpl0.setSumImpl(min0);
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      boolean boolean0 = summaryStatistics0.equals(summaryStatisticsImpl0);
      assertEquals(0L, summaryStatistics0.getN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics0.n = (-1L);
      boolean boolean0 = summaryStatisticsImpl0.equals(summaryStatistics0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      FourthMoment fourthMoment0 = new FourthMoment();
      fourthMoment0.increment(0.0);
      SummaryStatisticsImpl summaryStatisticsImpl1 = new SummaryStatisticsImpl();
      assertTrue(summaryStatisticsImpl1.equals((Object)summaryStatisticsImpl0));
      
      summaryStatisticsImpl1.setMinImpl(fourthMoment0);
      boolean boolean0 = summaryStatisticsImpl0.equals(summaryStatisticsImpl1);
      assertFalse(summaryStatisticsImpl1.equals((Object)summaryStatisticsImpl0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      FourthMoment fourthMoment0 = new FourthMoment();
      summaryStatisticsImpl0.secondMoment = (SecondMoment) fourthMoment0;
      fourthMoment0.increment(0.0);
      SummaryStatisticsImpl summaryStatisticsImpl1 = new SummaryStatisticsImpl();
      boolean boolean0 = summaryStatisticsImpl0.equals(summaryStatisticsImpl1);
      assertFalse(boolean0);
      assertEquals(0L, summaryStatisticsImpl1.getN());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      summaryStatisticsImpl0.addValue(1.0);
      SummaryStatisticsImpl summaryStatisticsImpl1 = new SummaryStatisticsImpl();
      boolean boolean0 = summaryStatisticsImpl1.equals(summaryStatisticsImpl0);
      assertEquals(1L, summaryStatisticsImpl0.getN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      boolean boolean0 = summaryStatisticsImpl0.equals("org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl");
      assertEquals(0L, summaryStatisticsImpl0.getN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      summaryStatistics0.addValue((-1.0));
      boolean boolean0 = summaryStatistics0.equals(summaryStatisticsImpl0);
      assertEquals(1L, summaryStatistics0.getN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = SummaryStatistics.newInstance();
      StandardDeviation standardDeviation0 = new StandardDeviation((SecondMoment) null);
      summaryStatistics0.setVarianceImpl(standardDeviation0);
      summaryStatistics0.clear();
      assertEquals(0L, summaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      summaryStatistics0.mean = null;
      summaryStatistics0.clear();
      assertEquals(0L, summaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      summaryStatistics0.n = 225L;
      double double0 = summaryStatistics0.getStandardDeviation();
      assertEquals(225L, summaryStatistics0.getN());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      summaryStatisticsImpl0.addValue(Double.NaN);
      double double0 = summaryStatisticsImpl0.getStandardDeviation();
      assertEquals(1L, summaryStatisticsImpl0.getN());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      summaryStatistics0.setMeanImpl((StorelessUnivariateStatistic) null);
      // Undeclared exception!
      try { 
        summaryStatisticsImpl0.equals(summaryStatistics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      Variance variance0 = new Variance();
      summaryStatisticsImpl0.setGeoMeanImpl(variance0);
      summaryStatisticsImpl0.addValue(1.0);
      assertEquals(1L, summaryStatisticsImpl0.getN());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      StandardDeviation standardDeviation0 = new StandardDeviation();
      summaryStatisticsImpl0.setVarianceImpl(standardDeviation0);
      summaryStatisticsImpl0.addValue(6.0);
      assertEquals(1L, summaryStatisticsImpl0.getN());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      summaryStatisticsImpl0.getSumsqImpl();
      assertEquals(0L, summaryStatisticsImpl0.getN());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      summaryStatistics0.getMeanImpl();
      assertEquals(0L, summaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      summaryStatisticsImpl0.getMaxImpl();
      assertEquals(0L, summaryStatisticsImpl0.getN());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      summaryStatisticsImpl0.getMinImpl();
      assertEquals(0L, summaryStatisticsImpl0.getN());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      summaryStatistics0.getVarianceImpl();
      assertEquals(0L, summaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      StatisticalSummary statisticalSummary0 = summaryStatisticsImpl0.getSummary();
      assertEquals(0L, statisticalSummary0.getN());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatisticsImpl0.getSumImpl();
      summaryStatisticsImpl0.setMaxImpl(storelessUnivariateStatistic0);
      assertEquals(0L, summaryStatisticsImpl0.getN());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      summaryStatistics0.getSumLogImpl();
      assertEquals(0L, summaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      String string0 = summaryStatisticsImpl0.toString();
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      summaryStatistics0.hashCode();
      assertEquals(0L, summaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatisticsImpl0.getGeoMeanImpl();
      summaryStatisticsImpl0.setSumImpl(storelessUnivariateStatistic0);
      assertEquals(0L, summaryStatisticsImpl0.getN());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = SummaryStatistics.newInstance();
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      summaryStatistics0.setMeanImpl(sumOfLogs0);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics0.addValue(658.308407815217);
      assertEquals(1L, summaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SummaryStatisticsImpl summaryStatisticsImpl0 = new SummaryStatisticsImpl();
      SummaryStatisticsImpl summaryStatisticsImpl1 = new SummaryStatisticsImpl();
      boolean boolean0 = summaryStatisticsImpl1.equals(summaryStatisticsImpl0);
      assertEquals(0L, summaryStatisticsImpl1.getN());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        SummaryStatistics.newInstance(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.commons.math.stat.descriptive.SummaryStatistics
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }
}

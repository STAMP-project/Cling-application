/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 05:02:50 GMT 2019
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.format.FormatUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FormatUtils_ESTest extends FormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("\" is too short", 7);
      assertEquals("Invalid format: \"\" is too short\" is malformed at \"o short\"", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("", 0);
      assertEquals("Invalid format: \"\"", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("922337203=854775808", 1000);
      assertEquals("Invalid format: \"922337203=854775808\" is too short", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage("f", (-1773));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(9223372036854775770L);
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(1202L);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(0L);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-58L));
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-9223372036854775808L));
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(343L);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-9223372036854775808L));
      assertEquals("-9223372036854775808", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 0);
      assertEquals("0", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (long) (-12));
      assertEquals("-12", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-2147483648L));
      assertEquals("-2147483648", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (long) 825);
      assertEquals("825", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-9223372036854775808L));
      assertEquals("-9223372036854775808", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Invalid format: \"922337203=854775808\" is too short");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 1000);
      assertEquals(54, stringBuffer0.length());
      assertEquals("Invalid format: \"922337203=854775808\" is too short1000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Invalid format: \"hJcUMOZ'W\" is too short");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 19);
      assertEquals(43, stringBuffer0.length());
      assertEquals("Invalid format: \"hJcUMOZ'W\" is too short19", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Invalid format: \"922337203=854775808\" is too short");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-3));
      assertEquals(52, stringBuffer0.length());
      assertEquals("Invalid format: \"922337203=854775808\" is too short-3", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(9);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) Integer.MIN_VALUE);
      assertEquals(11, stringBuffer0.length());
      assertEquals("-2147483648", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-9223372036854775808L), 30);
      assertEquals("-000000000009223372036854775808", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 9223372036854775764L, 30);
      assertEquals("000000000009223372036854775764", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-9223372036854775808L), 1);
      assertEquals("-9223372036854775808", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2147483654L), 3082);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) 202, 202);
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000202", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) 30, 30);
      assertEquals("000000000000000000000000000030", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5);
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) 5, 5);
      assertEquals("00005", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) (-2147483647), (-2147483647));
      assertEquals("-2147483647", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2147483648L), 1753);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1);
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 2732, 1);
      assertEquals("2732", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, (-2147483654L), 28);
      assertEquals(29, stringBuffer0.length());
      assertEquals("-0000000000000000002147483654", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 9223372036854775795L, 28);
      assertEquals(28, stringBuffer0.length());
      assertEquals("0000000009223372036854775795", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, (-9223372036854775808L), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, (-9223372036854775808L), 28);
      assertEquals(29, stringBuffer0.length());
      assertEquals("-0000000009223372036854775808", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(10000);
      FormatUtils.appendPaddedInteger(stringBuffer0, 10000L, 10000);
      assertEquals(10000, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 184, 184);
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000184", stringBuffer0.toString());
      assertEquals(184, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(3702);
      FormatUtils.appendPaddedInteger(stringBuffer0, 1L, 3702);
      assertEquals(3702, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, (-3338L), (-1));
      assertEquals(5, stringBuffer0.length());
      assertEquals("-3338", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, (-2147483648L), 19);
      assertEquals("-0000000002147483648", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 19, 19);
      assertEquals(19, stringBuffer0.length());
      assertEquals("0000000000000000019", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = FormatUtils.parseTwoDigits("org.joda.time.format.FormatUtils", 0);
      assertEquals(696, int0);
  }
}

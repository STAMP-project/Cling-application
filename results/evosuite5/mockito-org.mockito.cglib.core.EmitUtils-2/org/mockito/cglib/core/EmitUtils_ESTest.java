/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 21:04:26 GMT 2019
 */

package org.mockito.cglib.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.Label;
import org.mockito.asm.MethodVisitor;
import org.mockito.asm.Type;
import org.mockito.cglib.core.Block;
import org.mockito.cglib.core.ClassEmitter;
import org.mockito.cglib.core.CodeEmitter;
import org.mockito.cglib.core.Customizer;
import org.mockito.cglib.core.EmitUtils;
import org.mockito.cglib.core.MethodInfo;
import org.mockito.cglib.core.ObjectSwitchCallback;
import org.mockito.cglib.core.Signature;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class EmitUtils_ESTest extends EmitUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.LONG_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("q=t-MZ12}rs7@[ ", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(10, "q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ", (String[]) null);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Block block0 = codeEmitter0.begin_block();
      block0.end();
      // Undeclared exception!
      try { 
        EmitUtils.wrap_undeclared_throwable(codeEmitter0, block0, typeArray0, type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.getObjectType("-w*_PH|%32iD|T");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("-w*_PH|%32iD|T", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-w*_PH|%32iD|T";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(8, "-w*_PH|%32iD|T", "-w*_PH|%32iD|T", "-w*_PH|%32iD|T", stringArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 5, signature0, typeArray0);
      Block block0 = codeEmitter0.begin_block();
      block0.end();
      EmitUtils.wrap_undeclared_throwable(codeEmitter0, block0, (Type[]) null, type0);
      assertEquals(4, Type.SHORT);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.getObjectType("[|K;S&!ZTk\"-U");
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("[|K;S&!ZTk\"-U", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[|K;S&!ZTk\"-U";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "[|K;S&!ZTk\"-U", "[|K;S&!ZTk\"-U", "[|K;S&!ZTk\"-U", stringArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 7, signature0, typeArray0);
      Block block0 = new Block(codeEmitter0);
      block0.end();
      EmitUtils.wrap_undeclared_throwable(codeEmitter0, block0, typeArray0, type0);
      assertEquals(6, Type.FLOAT);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      String[] stringArray0 = new String[0];
      Type[] typeArray0 = new Type[1];
      EmitUtils.add_properties(classEmitter0, stringArray0, typeArray0);
      assertEquals(1, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.getObjectType("q=t-MZ12}rs7@[ ");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("q=t-MZ12}rs7@[ ", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "q=t-MZ12}rs7@[ ";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(8, "q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ", stringArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 5, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, (Customizer) null);
      assertEquals(4, Type.SHORT);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.getObjectType("[|K;S&!ZTk\"-U");
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("[|K;S&!ZTk\"-U", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[|K;S&!ZTk\"-U";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "[|K;S&!ZTk\"-U", "[|K;S&!ZTk\"-U", "[|K;S&!ZTk\"-U", stringArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 8, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = new EmitUtils.ArrayDelimiters("[|K;S&!ZTk\"-U", "Q:?Iik%", (String) null);
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, customizer0);
      assertEquals(1, type0.getDimensions());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.getObjectType("[|K;S&!{ZTk\"-U");
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(20);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[|K;S&!{ZTk\"-U";
      stringArray0[1] = "[|K;S&!{ZTk\"-U";
      stringArray0[2] = "PJhlUXn7VZ']#7vg";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(20, "", "[|K;S&!{ZTk\"-U", "", stringArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 20, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = new EmitUtils.ArrayDelimiters("", "", "");
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, customizer0);
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Type type0 = Type.VOID_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("q=t-MZ12}rs7@[ ", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 2, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = new EmitUtils.ArrayDelimiters("q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ");
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, (Customizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.DOUBLE_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("[|K;S&!{ZTMk\"-U", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 0, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, customizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.LONG_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("tU3", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 1, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, (Customizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("{=Sgaqture", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 1, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, (Customizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Type type0 = Type.INT_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("q=t-MZ12}rs7@[ ", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 2, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = new EmitUtils.ArrayDelimiters("q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ");
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, (Customizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.SHORT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("{=MSgaqture", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 1, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, customizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.CHAR_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("1`DbVR~>NtCPPC", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 1, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = new EmitUtils.ArrayDelimiters("1`DbVR~>NtCPPC", "1`DbVR~>NtCPPC", "1`DbVR~>NtCPPC");
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, (Customizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("{=Sgature", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 1, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, (Customizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("[|K;S&!{ZTMk\"-U", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 0, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, customizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Type type0 = Type.INT_TYPE;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.append_string((CodeEmitter) null, type0, (EmitUtils.ArrayDelimiters) null, customizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.getObjectType("-w*_PH|%32iD|T");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("-w*_PH|%32iD|T", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-w*_PH|%32iD|T";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(8, "-w*_PH|%32iD|T", "-w*_PH|%32iD|T", "-w*_PH|%32iD|T", stringArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 5, signature0, typeArray0);
      Label label0 = codeEmitter0.make_label();
      EmitUtils.not_equals(codeEmitter0, type0, label0, (Customizer) null);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Type type0 = Type.VOID_TYPE;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.not_equals((CodeEmitter) null, type0, (Label) null, customizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.getObjectType("q=t-M12}rsP@[ ");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("q=t-M12}rsP@[ ", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "q=t-M12}rsP@[ ";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(8, "q=t-M12}rsP@[ ", "q=t-M12}rsP@[ ", "q=t-M12}rsP@[ ", stringArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-131), signature0, typeArray0);
      Type type1 = Type.VOID_TYPE;
      EmitUtils.hash_code(codeEmitter0, type1, 9, (Customizer) null);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.LONG_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("q=t-MZ12}rs7@[ ", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(10, "q=t-MZ12}rs7@[ ", "gsef", "q=t-MZ12}rs7@[ ", (String[]) null);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 6, signature0, typeArray0);
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type0, 31, customizer0);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.getObjectType("-w*_PH|%32iD|T");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("-w*_PH|%32iD|T", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-w*_PH|%32iD|T";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(8, "-w*_PH|%32iD|T", "-w*_PH|%32iD|T", "-w*_PH|%32iD|T", stringArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      Type type1 = Type.FLOAT_TYPE;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type1, 0, customizer0);
      assertEquals(10, Type.OBJECT);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("q=t-MZ12}rs7@[ ", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "q=t-MZ12}rs7@[ ";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2583, "q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ", stringArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type1 = Type.INT_TYPE;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type1, 157, customizer0);
      assertEquals(112, CodeEmitter.REM);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.getObjectType("-w*_PH|%32iD|T");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("-w*_PH|%32iD|T", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-w*_PH|%32iD|T";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(8, "-w*_PH|%32iD|T", "-w*_PH|%32iD|T", "-w*_PH|%32iD|T", stringArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 153, signature0, typeArray0);
      Type type1 = Type.SHORT_TYPE;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type1, 124, customizer0);
      assertEquals(9, Type.ARRAY);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("q=t-MZ12}rs7@[ ", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "q=t-MZ12}rs7@[ ";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2583, "q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ", stringArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type1 = Type.BYTE_TYPE;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type1, 157, customizer0);
      assertEquals(1, Type.BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.LONG_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("q=t-MZ12}rs7@[ ", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(10, "q=t-MZ12}rs7@[ ", "gY1fc", "q=t-MZ12}rs7@[ ", (String[]) null);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, (Type[]) null);
      Type type1 = Type.CHAR_TYPE;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type1, 698, customizer0);
      assertEquals(7, Type.LONG);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("qC=t-MZ12}rs7@[ ", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "qC=t-MZ12}rs7@[ ";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2583, "qC=t-MZ12}rs7@[ ", "qC=t-MZ12}rs7@[ ", "qC=t-MZ12}rs7@[ ", stringArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-27), signature0, typeArray0);
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type0, 7, customizer0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.getObjectType("-w*_PH|%32iD|T");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("-w*_PH|%32iD|T", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-w*_PH|%32iD|T";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(8, "-w*_PH|%32iD|T", "-w*_PH|%32iD|T", "-w*_PH|%32iD|T", stringArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      EmitUtils.hash_code(codeEmitter0, type0, 153, (Customizer) null);
      assertEquals(10, Type.OBJECT);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        EmitUtils.push_object((CodeEmitter) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown type: class java.lang.Object
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        EmitUtils.push_object((CodeEmitter) null, bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        EmitUtils.push_object((CodeEmitter) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        EmitUtils.push_object((CodeEmitter) null, bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        EmitUtils.push_object((CodeEmitter) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.getObjectType("q=t-MZ12}rs7@[ ");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("q=t-MZ12}rs7@[ ", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "q=t-MZ12}rs7@[ ";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2583, "q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ", stringArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 5, signature0, typeArray0);
      // Undeclared exception!
      try { 
        EmitUtils.push_array(codeEmitter0, typeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("q=t-MZ12}rs7@[ ", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "q=t-MZ12}rs7@[ ";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2560, "q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ", stringArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      EmitUtils.push_array(codeEmitter0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.getObjectType("BGS^8Uh?HH/8S;`>0~");
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("BGS^8Uh?HH/8S;`>0~", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 1, signature0, typeArray0);
      classEmitter0.setTarget(classEmitter0);
      // Undeclared exception!
      try { 
        EmitUtils.push_object(codeEmitter0, type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Type type0 = Type.VOID_TYPE;
      // Undeclared exception!
      try { 
        EmitUtils.push_object((CodeEmitter) null, type0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot load void type
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<String, BigInteger> hashMap0 = new HashMap<String, BigInteger>();
      BigInteger bigInteger0 = BigInteger.TEN;
      hashMap0.put("W3", bigInteger0);
      // Undeclared exception!
      try { 
        EmitUtils.getSwitchKeys(hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Integer
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ObjectSwitchCallback objectSwitchCallback0 = mock(ObjectSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.string_switch((CodeEmitter) null, (String[]) null, (-649), objectSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown switch style -649
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ObjectSwitchCallback objectSwitchCallback0 = mock(ObjectSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.string_switch((CodeEmitter) null, (String[]) null, 2, objectSwitchCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.getObjectType("[|K;S&!ZTk\"-U");
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("[|K;S&!ZTk\"-U", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[|K;S&!ZTk\"-U";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "[|K;S&!ZTk\"-U", "[|K;S&!ZTk\"-U", "[|K;S&!ZTk\"-U", stringArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 7, signature0, typeArray0);
      LinkedList<Type> linkedList0 = new LinkedList<Type>();
      // Undeclared exception!
      try { 
        EmitUtils.constructor_switch(codeEmitter0, linkedList0, (ObjectSwitchCallback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.getObjectType("org.mockito.cglib.core.EmitUtils$9");
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("org.mockito.cglib.core.EmitUtils$9", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 0, signature0, typeArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      // Undeclared exception!
      try { 
        EmitUtils.constructor_switch(codeEmitter0, linkedList0, (ObjectSwitchCallback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      // Undeclared exception!
      try { 
        EmitUtils.wrap_throwable((Block) null, type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("qC=t-MZ12}rs7@[ ", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "qC=t-MZ12}rs7@[ ";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2583, "qC=t-MZ12}rs7@[ ", "qC=t-MZ12}rs7@[ ", "qC=t-MZ12}rs7@[ ", stringArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-27), signature0, typeArray0);
      Label label0 = codeEmitter0.make_label();
      Type type1 = Type.getReturnType("[y{mhh7/Y~ R(PNtRo");
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.not_equals(codeEmitter0, type1, label0, customizer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.mockito.asm.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      // Undeclared exception!
      try { 
        EmitUtils.factory_method(classEmitter0, (Signature) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // classInfo is null! org.mockito.cglib.core.ClassEmitter@1
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        EmitUtils.load_class_this((CodeEmitter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ObjectSwitchCallback objectSwitchCallback0 = mock(ObjectSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.string_switch((CodeEmitter) null, (String[]) null, 0, objectSwitchCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        EmitUtils.begin_method((ClassEmitter) null, (MethodInfo) null, 245);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("q=t-MZ12}rs7@[ ", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "q=t-MZ12}rs7@[ ";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2560, "q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ", stringArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type0, 126, customizer0);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      // Undeclared exception!
      try { 
        EmitUtils.begin_method(classEmitter0, (MethodInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.VOID_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature(">", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 130, signature0, typeArray0);
      MethodInfo methodInfo0 = codeEmitter0.getMethodInfo();
      // Undeclared exception!
      try { 
        EmitUtils.load_method(codeEmitter0, methodInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Class<BigInteger> class0 = BigInteger.class;
      Type type0 = Type.getType(class0);
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = type0;
      classEmitter0.setTarget(classEmitter0);
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        EmitUtils.add_properties(classEmitter0, stringArray0, typeArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // classInfo is null! org.mockito.cglib.core.ClassEmitter@1
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ObjectSwitchCallback objectSwitchCallback0 = mock(ObjectSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.method_switch((CodeEmitter) null, linkedList0, objectSwitchCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      // Undeclared exception!
      try { 
        EmitUtils.null_constructor(classEmitter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // classInfo is null! org.mockito.cglib.core.ClassEmitter@1
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.getObjectType("[|K;S&!ZTk\"-U");
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("[|K;S&!ZTk\"-U", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[|K;S&!ZTk\"-U";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "[|K;S&!ZTk\"-U", "[|K;S&!ZTk\"-U", "[|K;S&!ZTk\"-U", stringArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 7, signature0, typeArray0);
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type0, 2, customizer0);
      assertEquals(6, Type.FLOAT);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.getObjectType("[|K;S&!{ZTk\"-U");
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(20);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[|K;S&!{ZTk\"-U";
      stringArray0[1] = "[|K;S&!{ZTk\"-U";
      stringArray0[2] = "PJhlUXn7VZ']#7vg";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(20, "", "[|K;S&!{ZTk\"-U", "", stringArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 20, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, customizer0);
      assertEquals(153, CodeEmitter.EQ);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.getObjectType("q=t-MZ12}rs7@[ ");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("q=t-MZ12}rs7@[ ", type0, typeArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "q=t-MZ12}rs7@[ ";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(8, "q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ", "q=t-MZ12}rs7@[ ", stringArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 5, signature0, typeArray0);
      Label label0 = codeEmitter0.make_label();
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.not_equals(codeEmitter0, type0, label0, customizer0);
      assertEquals(116, CodeEmitter.NEG);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ObjectSwitchCallback objectSwitchCallback0 = mock(ObjectSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.string_switch((CodeEmitter) null, stringArray0, 1, objectSwitchCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 06:33:24 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "hashCode");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("hashCode", method0, importerTopLevel0);
      boolean boolean0 = functionObject0.isVarArgsConstructor();
      assertFalse(boolean0);
      assertEquals(68, methodArray0.length);
      assertEquals(0, functionObject0.getArity());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "hashCode");
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, importerTopLevel0);
      // Undeclared exception!
      try { 
        functionObject0.createObject(context0, importerTopLevel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.ClassCastException: java.lang.String cannot be cast to com.google.javascript.rhino.head.Scriptable
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "hashCode");
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      FunctionObject functionObject0 = new FunctionObject("hashCode", method0, importerTopLevel0);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("hashCode");
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeJavaPackage0, nativeJavaPackage0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"hashCode\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "hashCode");
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, importerTopLevel0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, importerTopLevel0, importerTopLevel0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"error reporter\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "hashCode");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("hashCode", method0, importerTopLevel0);
      // Undeclared exception!
      try { 
        functionObject0.call((Context) null, functionObject0, importerTopLevel0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"hashCode\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "hashCode");
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      FunctionObject functionObject0 = new FunctionObject("hashCode", method0, importerTopLevel0);
      Object object0 = functionObject0.call(context0, importerTopLevel0, importerTopLevel0, methodArray0);
      assertEquals(1, object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "hashCode");
      assertNotNull(method0);
      
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, importerTopLevel0);
      functionObject0.call(context0, (Scriptable) null, (Scriptable) null, context0.emptyArgs);
      assertEquals(9, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      NativeNumber nativeNumber0 = new NativeNumber(0);
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeNumber0, (Object) class0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"java.lang.reflect.Method\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "hashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"hashCode\" occurs multiple times in class \"java.lang.Integer\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Method[] methodArray0 = new Method[9];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "msg.varargs.fun");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "hashCode");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("hashCode", method0, importerTopLevel0);
      functionObject0.getMethodOrConstructor();
      assertEquals(68, methodArray0.length);
      assertEquals(0, functionObject0.getLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "hashCode");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject((String) null, method0, importerTopLevel0);
      functionObject0.getFunctionName();
      assertEquals(68, methodArray0.length);
      assertEquals(0, functionObject0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "hashCode");
      assertNotNull(method0);
      
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      FunctionObject functionObject0 = new FunctionObject("hashCode", method0, importerTopLevel0);
      functionObject0.getFunctionName();
      assertEquals(68, methodArray0.length);
      assertEquals(0, functionObject0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeNumber nativeNumber0 = new NativeNumber(2);
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeNumber0, (Object) classLoader0, 4);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = Context.enter();
      NativeNumber nativeNumber0 = new NativeNumber(5);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeNumber0, (Object) nativeJavaTopPackage0, 3);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Context context0 = Context.enter();
      NativeNumber nativeNumber0 = new NativeNumber(110);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeNumber0, (Object) null, 3);
      assertNotNull(object0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-136.74919166));
      Context context0 = new Context();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeNumber0, (Object) "hashCode", 1);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NativeNumber nativeNumber0 = new NativeNumber((-136.74919166));
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeNumber0, (Object) class0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeNumber nativeNumber0 = new NativeNumber(130);
      NativeNumber nativeNumber1 = (NativeNumber)FunctionObject.convertArg(context0, (Scriptable) nativeNumber0, (Object) nativeNumber0, 6);
      assertFalse(nativeNumber1.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeNumber nativeNumber0 = new NativeNumber(2);
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeNumber0, (Object) context0, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      NativeNumber nativeNumber0 = new NativeNumber(0.0);
      Double double0 = new Double(0.0);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeNumber0, (Object) double0, 4);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeNumber nativeNumber0 = new NativeNumber((-1));
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeNumber0, (Object) nativeNumber0, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeNumber nativeNumber0 = new NativeNumber(2);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeNumber0, (Object) context0, 1);
      assertEquals("null", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Double> class0 = Double.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<String> class0 = String.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test27()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "contains");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("hashCode", method0, importerTopLevel0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"java.lang.CharSequence\" in method \"contains\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "hashCode");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("hashCode", method0, importerTopLevel0);
      functionObject0.addAsConstructor(importerTopLevel0, importerTopLevel0);
      assertEquals(9, methodArray0.length);
  }
}

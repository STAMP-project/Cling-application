/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 14:26:41 GMT 2019
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.concurrent.BackgroundInitializer;
import org.apache.commons.lang3.concurrent.CallableBackgroundInitializer;
import org.apache.commons.lang3.concurrent.MultiBackgroundInitializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MultiBackgroundInitializer_ESTest extends MultiBackgroundInitializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertNotNull(multiBackgroundInitializer0);
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults1 = multiBackgroundInitializer0.initialize();
      assertNotSame(multiBackgroundInitializer_MultiBackgroundInitializerResults1, multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      assertFalse(multiBackgroundInitializer_MultiBackgroundInitializerResults1.equals((Object)multiBackgroundInitializer_MultiBackgroundInitializerResults0));
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults1.isSuccessful());
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults1);
      
      // Undeclared exception!
      try { 
        multiBackgroundInitializer0.addInitializer("a&", (BackgroundInitializer<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Child initializer must not be null!
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertNotNull(multiBackgroundInitializer0);
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      
      // Undeclared exception!
      try { 
        multiBackgroundInitializer_MultiBackgroundInitializerResults0.getInitializer("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No child initializer with name org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertNotNull(multiBackgroundInitializer0);
      
      int int0 = multiBackgroundInitializer0.getTaskCount();
      assertEquals(1, int0);
      assertFalse(multiBackgroundInitializer0.isStarted());
      
      boolean boolean0 = multiBackgroundInitializer0.start();
      assertTrue(boolean0);
      assertTrue(multiBackgroundInitializer0.isStarted());
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.get();
      assertTrue(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      
      boolean boolean1 = multiBackgroundInitializer0.isStarted();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(multiBackgroundInitializer0.isStarted());
      
      Callable<Callable<MultiBackgroundInitializer>> callable0 = (Callable<Callable<MultiBackgroundInitializer>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Callable<MultiBackgroundInitializer>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<MultiBackgroundInitializer>>(callable0);
      assertFalse(callableBackgroundInitializer0.isStarted());
      assertNotNull(callableBackgroundInitializer0);
      
      // Undeclared exception!
      try { 
        multiBackgroundInitializer0.addInitializer(":ky|nbS8qT8/pA(", callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // addInitializer() must not be called after start()!
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertNotNull(multiBackgroundInitializer0);
      
      Callable<Runnable> callable0 = (Callable<Runnable>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Runnable> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Runnable>(callable0);
      assertFalse(callableBackgroundInitializer0.isStarted());
      assertNotNull(callableBackgroundInitializer0);
      
      Callable<MultiBackgroundInitializer.MultiBackgroundInitializerResults> callable1 = (Callable<MultiBackgroundInitializer.MultiBackgroundInitializerResults>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      assertNotNull(linkedTransferQueue0);
      
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1954, 1954, 2084L, timeUnit0, linkedTransferQueue0, threadFactory0);
      assertNotNull(threadPoolExecutor0);
      
      CallableBackgroundInitializer<MultiBackgroundInitializer.MultiBackgroundInitializerResults> callableBackgroundInitializer1 = new CallableBackgroundInitializer<MultiBackgroundInitializer.MultiBackgroundInitializerResults>(callable1, threadPoolExecutor0);
      assertFalse(callableBackgroundInitializer1.isStarted());
      assertNotNull(callableBackgroundInitializer1);
      
      multiBackgroundInitializer0.addInitializer("IQ!ZTe", callableBackgroundInitializer1);
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertFalse(callableBackgroundInitializer1.isStarted());
      
      int int0 = multiBackgroundInitializer0.getTaskCount();
      assertEquals(2, int0);
      assertFalse(multiBackgroundInitializer0.isStarted());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertNotNull(multiBackgroundInitializer0);
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      
      boolean boolean0 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful();
      assertTrue(boolean0);
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertNotNull(multiBackgroundInitializer0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      MultiBackgroundInitializer multiBackgroundInitializer1 = new MultiBackgroundInitializer(forkJoinPool0);
      assertFalse(multiBackgroundInitializer1.equals((Object)multiBackgroundInitializer0));
      assertFalse(multiBackgroundInitializer1.isStarted());
      assertNotNull(multiBackgroundInitializer1);
      
      multiBackgroundInitializer1.addInitializer("p9-,", multiBackgroundInitializer0);
      assertNotSame(multiBackgroundInitializer0, multiBackgroundInitializer1);
      assertNotSame(multiBackgroundInitializer1, multiBackgroundInitializer0);
      assertFalse(multiBackgroundInitializer0.equals((Object)multiBackgroundInitializer1));
      assertFalse(multiBackgroundInitializer1.equals((Object)multiBackgroundInitializer0));
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertFalse(multiBackgroundInitializer1.isStarted());
      
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1555, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0, scheduledThreadPoolExecutor0);
      assertFalse(callableBackgroundInitializer0.isStarted());
      assertNotNull(callableBackgroundInitializer0);
      
      multiBackgroundInitializer0.addInitializer("No child initializer with name ", callableBackgroundInitializer0);
      assertNotSame(multiBackgroundInitializer0, multiBackgroundInitializer1);
      assertFalse(multiBackgroundInitializer0.equals((Object)multiBackgroundInitializer1));
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertFalse(callableBackgroundInitializer0.isStarted());
      
      MultiBackgroundInitializer multiBackgroundInitializer2 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer2.equals((Object)multiBackgroundInitializer1));
      assertFalse(multiBackgroundInitializer2.equals((Object)multiBackgroundInitializer0));
      assertFalse(multiBackgroundInitializer2.isStarted());
      assertNotNull(multiBackgroundInitializer2);
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer1.initialize();
      assertNotSame(multiBackgroundInitializer1, multiBackgroundInitializer0);
      assertNotSame(multiBackgroundInitializer1, multiBackgroundInitializer2);
      assertFalse(multiBackgroundInitializer1.equals((Object)multiBackgroundInitializer0));
      assertFalse(multiBackgroundInitializer1.equals((Object)multiBackgroundInitializer2));
      assertFalse(multiBackgroundInitializer1.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      
      int int0 = multiBackgroundInitializer1.getTaskCount();
      assertNotSame(multiBackgroundInitializer1, multiBackgroundInitializer0);
      assertNotSame(multiBackgroundInitializer1, multiBackgroundInitializer2);
      assertFalse(multiBackgroundInitializer1.equals((Object)multiBackgroundInitializer0));
      assertFalse(multiBackgroundInitializer1.equals((Object)multiBackgroundInitializer2));
      assertEquals(3, int0);
      assertFalse(multiBackgroundInitializer1.isStarted());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertNotNull(multiBackgroundInitializer0);
      
      Callable<Runnable> callable0 = (Callable<Runnable>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Runnable> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Runnable>(callable0);
      assertFalse(callableBackgroundInitializer0.isStarted());
      assertNotNull(callableBackgroundInitializer0);
      
      multiBackgroundInitializer0.addInitializer("a&", callableBackgroundInitializer0);
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertFalse(callableBackgroundInitializer0.isStarted());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertNotNull(multiBackgroundInitializer0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1555);
      assertNotNull(forkJoinPool0);
      
      MultiBackgroundInitializer multiBackgroundInitializer1 = new MultiBackgroundInitializer(forkJoinPool0);
      assertFalse(multiBackgroundInitializer1.equals((Object)multiBackgroundInitializer0));
      assertFalse(multiBackgroundInitializer1.isStarted());
      assertNotNull(multiBackgroundInitializer1);
      
      multiBackgroundInitializer0.addInitializer("Callable must not be null!", multiBackgroundInitializer1);
      assertNotSame(multiBackgroundInitializer0, multiBackgroundInitializer1);
      assertNotSame(multiBackgroundInitializer1, multiBackgroundInitializer0);
      assertFalse(multiBackgroundInitializer0.equals((Object)multiBackgroundInitializer1));
      assertFalse(multiBackgroundInitializer1.equals((Object)multiBackgroundInitializer0));
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertFalse(multiBackgroundInitializer1.isStarted());
      
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1555, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      MultiBackgroundInitializer multiBackgroundInitializer2 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer2.equals((Object)multiBackgroundInitializer1));
      assertFalse(multiBackgroundInitializer2.equals((Object)multiBackgroundInitializer0));
      assertFalse(multiBackgroundInitializer2.isStarted());
      assertNotNull(multiBackgroundInitializer2);
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer2.initialize();
      assertNotSame(multiBackgroundInitializer2, multiBackgroundInitializer1);
      assertNotSame(multiBackgroundInitializer2, multiBackgroundInitializer0);
      assertFalse(multiBackgroundInitializer2.equals((Object)multiBackgroundInitializer1));
      assertFalse(multiBackgroundInitializer2.equals((Object)multiBackgroundInitializer0));
      assertFalse(multiBackgroundInitializer2.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      
      Set<String> set0 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.initializerNames();
      assertNotSame(multiBackgroundInitializer2, multiBackgroundInitializer1);
      assertNotSame(multiBackgroundInitializer2, multiBackgroundInitializer0);
      assertFalse(multiBackgroundInitializer2.equals((Object)multiBackgroundInitializer1));
      assertFalse(multiBackgroundInitializer2.equals((Object)multiBackgroundInitializer0));
      assertFalse(set0.contains("Callable must not be null!"));
      assertFalse(multiBackgroundInitializer2.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      boolean boolean0 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful();
      assertNotSame(multiBackgroundInitializer2, multiBackgroundInitializer1);
      assertNotSame(multiBackgroundInitializer2, multiBackgroundInitializer0);
      assertFalse(multiBackgroundInitializer2.equals((Object)multiBackgroundInitializer1));
      assertFalse(multiBackgroundInitializer2.equals((Object)multiBackgroundInitializer0));
      assertTrue(boolean0);
      assertFalse(multiBackgroundInitializer2.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      
      boolean boolean1 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful();
      assertNotSame(multiBackgroundInitializer2, multiBackgroundInitializer1);
      assertNotSame(multiBackgroundInitializer2, multiBackgroundInitializer0);
      assertFalse(multiBackgroundInitializer2.equals((Object)multiBackgroundInitializer1));
      assertFalse(multiBackgroundInitializer2.equals((Object)multiBackgroundInitializer0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(multiBackgroundInitializer2.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      
      // Undeclared exception!
      try { 
        multiBackgroundInitializer2.addInitializer((String) null, multiBackgroundInitializer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name of child initializer must not be null!
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      MultiBackgroundInitializer multiBackgroundInitializer1 = new MultiBackgroundInitializer(forkJoinPool0);
      multiBackgroundInitializer0.addInitializer("Callable must not be null!", multiBackgroundInitializer1);
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1555, threadPoolExecutor_AbortPolicy0);
      MockThread mockThread0 = new MockThread();
      multiBackgroundInitializer0.initialize();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer((ExecutorService) null);
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(forkJoinPool0);
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      // Undeclared exception!
      try { 
        multiBackgroundInitializer_MultiBackgroundInitializerResults0.getResultObject("V");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No child initializer with name V
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      multiBackgroundInitializer_MultiBackgroundInitializerResults0.initializerNames();
      int int0 = multiBackgroundInitializer0.getTaskCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      int int0 = multiBackgroundInitializer0.getTaskCount();
      assertEquals(1, int0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        multiBackgroundInitializer_MultiBackgroundInitializerResults0.getException("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No child initializer with name 
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults", e);
      }
  }
}

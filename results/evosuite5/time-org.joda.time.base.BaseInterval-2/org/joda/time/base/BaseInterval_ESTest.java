/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 02:38:13 GMT 2019
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BaseInterval_ESTest extends BaseInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableInterval mutableInterval0 = MutableInterval.parse((String) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      Duration duration0 = minutes0.toStandardDuration();
      DateMidnight dateMidnight0 = new DateMidnight((-4477L));
      Instant instant0 = dateMidnight0.toInstant();
      MutableInterval mutableInterval0 = new MutableInterval(instant0, duration0);
      Interval interval0 = new Interval(mutableInterval0);
      assertEquals((-3600000L), mutableInterval0.getStartMillis());
      assertEquals(128849015220000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      assertEquals(1392409281320L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight((-4477L));
      Instant instant0 = dateMidnight0.toInstant();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime((DateTimeZone) fixedDateTimeZone0);
      Interval interval0 = new Interval((ReadablePeriod) null, mutableDateTime0);
      assertEquals((-3600000L), interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Minutes minutes0 = Minutes.MAX_VALUE;
      DateMidnight dateMidnight0 = new DateMidnight((-4477L));
      Instant instant0 = dateMidnight0.toInstant();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime((DateTimeZone) fixedDateTimeZone0);
      Interval interval0 = new Interval(minutes0, mutableDateTime0);
      assertEquals((-128849022420000L), interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-4477L));
      Interval interval0 = new Interval(dateMidnight0, (ReadablePeriod) null);
      assertEquals((-3600000L), interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Minutes minutes0 = Minutes.MAX_VALUE;
      Duration duration0 = minutes0.toStandardDuration();
      DateMidnight dateMidnight0 = new DateMidnight((-4477L));
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateMidnight0, periodType0);
      Instant instant0 = dateMidnight0.toInstant();
      Interval interval0 = new Interval(instant0, period0);
      assertEquals(128849104048000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Interval interval0 = null;
      try {
        interval0 = new Interval((ReadableInstant) null, instant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableInstant) null);
      assertEquals(1392409281320L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) fixedDateTimeZone0);
      Interval interval0 = yearMonth0.toInterval();
      Minutes minutes0 = Minutes.MAX_VALUE;
      Duration duration0 = minutes0.toStandardDuration();
      DateMidnight dateMidnight0 = new DateMidnight((-4477L));
      Instant instant0 = dateMidnight0.toInstant();
      MutableInterval mutableInterval0 = new MutableInterval(instant0, duration0);
      Chronology chronology0 = interval0.getChronology();
      mutableInterval0.setChronology(chronology0);
      assertEquals(128849015220000L, mutableInterval0.getEndMillis());
      assertEquals((-3600000L), mutableInterval0.getStartMillis());
      assertEquals(1391209200000L, interval0.getStartMillis());
      assertEquals(1393628400000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(4599L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = dateMidnight0.toMutableDateTime();
      Interval interval0 = duration0.toIntervalTo(mutableDateTime0);
      assertEquals(1392060060000L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) fixedDateTimeZone0);
      Interval interval0 = yearMonth0.toInterval();
      Chronology chronology0 = interval0.getChronology();
      MutableInterval mutableInterval0 = new MutableInterval(interval0, chronology0);
      assertEquals(1391209200000L, interval0.getStartMillis());
      assertEquals(1393628400000L, interval0.getEndMillis());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 20:00:24 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, 1929);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1929, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (byte) (-28));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object[] objectArray1 = ArrayUtils.add(objectArray0, (int) 1, (Object) null);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(8, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, 891, 'K');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 891, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, 4433, (Object) "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4433, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, Integer.MAX_VALUE, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = ArrayUtils.add(objectArray0, (int) 1, (Object) null);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, (int) 0, object0);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((String[]) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, (Object) arrayUtils0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.lang3.ArrayUtils
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, (Integer) arrayUtils0.INDEX_NOT_FOUND);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.addAll((long[]) null, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, (byte[]) null);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (boolean[]) null);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[5] = (Object) arrayUtils0;
      // Undeclared exception!
      try { 
        ArrayUtils.addAll((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot store java.lang.Object in an array of java.lang.Float
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) integerArray0, (Object[]) null);
      assertNotSame(integerArray0, objectArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      short[] shortArray0 = new short[4];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = ArrayUtils.isNotEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_STRING_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((Integer[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-1.0F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, 2503);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2503}, intArray0);
      assertNotNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2503}, intArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long[] longArray0 = new long[5];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[4];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(integerArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) integerArray0);
      assertFalse(boolean0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[19];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertEquals(19, booleanArray0.length);
      assertEquals(19, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, true);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float[] floatArray0 = new float[5];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Float[] floatArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((-728.4644F));
      assertEquals((-728.4644F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte)10);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-728.4644F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (-1018.0F));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 0.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1102.0F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {1102.0F, 1102.0F, 1102.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Float float0 = new Float((float) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 537.0470723239999);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 537.0470723239999, 537.0470723239999, 537.0470723239999, 537.0470723239999, 537.0470723239999, 537.0470723239999, 537.0470723239999}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-6220.8933));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Byte[] byteArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-96));
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-96), (byte) (-96)}, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-78));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (byte) (-28));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte) (-72));
      assertEquals((byte) (-72), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byteArray0[1];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-72), (byte) (-72)}, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Short[] shortArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)1);
      assertEquals((short)1, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)3369);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)3369, (short)3369}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-2037));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (short)2181);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) arrayUtils0.INDEX_NOT_FOUND;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 41);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), 41, 41, 41}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-2442));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-718));
      assertEquals((-718), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-718)}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-1470));
      assertEquals((-1470L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {(-1470L), (-1470L), (-1470L), (-1470L)}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 0L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (long) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[3];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = '|';
      Character character0 = new Character('|');
      assertEquals('|', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'|'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '|');
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'|'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '9');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, 's');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('[');
      assertEquals('[', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = characterArray0[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'[', '['}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, Integer.MAX_VALUE);
      assertEquals(2, int0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-2058346497));
      assertEquals((-1), int0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2);
      assertEquals((-1), int0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-1470));
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-3044.888F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-3044.888F));
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-3044.888F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_FLOAT_ARRAY, 2397.143F);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 714.363F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 714.363F, 512);
      assertEquals(0, int0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {714.363F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      float[] floatArray0 = new float[8];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 714.363F, 0);
      assertEquals((-1), int0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0L, (int) (short) (-2617));
      assertEquals((-1), int0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      float[] floatArray0 = new float[7];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (-1), (-3382));
      assertEquals((-1), int0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 0);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1264.02019));
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 1094, (double) 1094);
      assertEquals(5, int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) 1437.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 800.0662082073463, 1094, 422.5787962577);
      assertEquals((-1), int0);
      assertEquals(12, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)46, 0, (double) (byte) (-33));
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)2, (int) (short) (-2617), 1.0);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (double) (short)4050;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)4050, 1094);
      assertEquals(2, int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 4050.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1), 2);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1), (-1));
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1486;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0), (double) (short)1048);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1486.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = ArrayUtils.indexOf(doubleArray0, 763.8, (-3695), 766.063928329827);
      assertEquals(0, int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 5, (-1156.969446271863));
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.indexOf(doubleArray0, 453.5750531485605, (-2002));
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)46);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)46);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)44, (int) (byte)0);
      assertEquals(0, int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)44, (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-13), (-668));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)57);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)43, (-89));
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '*';
      boolean boolean0 = ArrayUtils.contains(charArray0, '*');
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '*', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_CHAR_ARRAY, 'x');
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'h', (int) (byte)0);
      assertEquals(0, int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'h', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'h', (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = ArrayUtils.lastIndexOf(charArray0, ']');
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_CHAR_ARRAY, '\"', (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = ArrayUtils.indexOf(charArray0, 'N', (-2363));
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1048;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1048);
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1048, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      short[] shortArray0 = new short[9];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1425), (int) (short)2);
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (byte) (-28), (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte byte0 = (byte)103;
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (byte)103, (int) byte0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short)1308, (-1140));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-159));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 91;
      boolean boolean0 = ArrayUtils.contains(intArray0, 91);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {91, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_INT_ARRAY, (int) (short) (-1092));
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 4485;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 4485, 0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {4485}, intArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 4485, 0);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 1, (-1529));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = ArrayUtils.indexOf(intArray0, (-2591), (-2617));
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((int[]) null, (-2904));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[2] = (long) (byte)119;
      boolean boolean0 = ArrayUtils.contains(longArray0, 119L);
      assertTrue(boolean0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 119L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      long[] longArray0 = new long[4];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-3135L));
      assertEquals((-1), int0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      long[] longArray0 = new long[13];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 2);
      assertEquals(2, int0);
      assertEquals(13, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_LONG_ARRAY, (long) 2503, (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (byte)35, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.contains(longArray0, 1493L);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1), (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = (int) (byte) (-80);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new int[] {0, 0, (-80), 0}, intArray0);
      assertNotNull(integerArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) (-80));
      assertEquals(2, int0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new int[] {0, 0, (-80), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (Object) arrayUtils0);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) float0;
      objectArray0[1] = (Object) 0.0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals((-1), int0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(1, int0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[9];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 2);
      assertEquals((-1), int0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(integerArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, object0, (-3011));
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = objectArray0[0];
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[1]);
      assertTrue(boolean0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Object[] objectArray0 = new Object[4];
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, (Object) arrayUtils0.INDEX_NOT_FOUND);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      AbstractMap.SimpleEntry<String, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<String, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 2);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("Evwy&Lor<,CagwL(", "java.lang.String");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<String, String>[] abstractMap_SimpleEntryArray1 = ArrayUtils.removeElement(abstractMap_SimpleEntryArray0, (Object) null);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertEquals(2, abstractMap_SimpleEntryArray0.length);
      assertEquals(1, abstractMap_SimpleEntryArray1.length);
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertNotNull(abstractMap_SimpleEntryArray1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.indexOf((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (Object) null, (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      float[] floatArray0 = new float[9];
      ArrayUtils.reverse(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ArrayUtils.reverse(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      char[] charArray0 = new char[5];
      ArrayUtils.reverse(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      short[] shortArray0 = new short[9];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      ArrayUtils.reverse(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(arrayUtils0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.isSameType(arrayUtils0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = new float[9];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = new double[5];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = new char[3];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = new short[3];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      short[] shortArray0 = new short[4];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      short[] shortArray0 = new short[7];
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = new int[9];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      long[] longArray0 = new long[3];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertFalse(boolean0);
      assertEquals(16, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) arrayUtils0.EMPTY_STRING_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)0, (-991));
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 1437, 1437);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte) (-85), 1198);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      char char0 = '|';
      float[] floatArray0 = new float[9];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-786), (int) char0);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, 1013, (-2135));
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 36, 36);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (int) (short)0, (int) (short)2);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 46);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 4, (int) (byte)119);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BYTE_ARRAY, (int) (byte)2, (int) (byte)2);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-565), 91);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BYTE_ARRAY, (-1), (-1));
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1140), 48);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 36, (-1140));
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_CHAR_ARRAY, (int) 'i', (-1));
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1), 100);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 392, (int) (byte)43);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 1437, 1);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 46, 46);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2144233676), 3040);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-1235));
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-15), (-1235));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 779, (-10));
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 197, (-1));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1180), 1975);
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, (-1), 20);
      assertEquals(5, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      String[] stringArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_STRING_ARRAY, (-1), (-1));
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = ArrayUtils.subarray((Comparable<Object>[]) null, (-1), (-1));
      assertNull(comparableArray0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(8, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Character[] characterArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Short[] shortArray0 = new Short[7];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(7, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Short[] shortArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(3, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer[] integerArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(9, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Long[] longArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(9, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, Integer.MAX_VALUE, 0.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(6, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      String[] stringArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_STRING_ARRAY);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(8, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 1.0);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-1));
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'x');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (-1340L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      AbstractMap.SimpleEntry<Object, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 1);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>((Object) null, "user.dir");
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      Map<Object, Object> map0 = ArrayUtils.toMap(abstractMap_SimpleEntryArray0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), '2');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      String[] stringArray0 = ArrayUtils.toArray(arrayUtils0.EMPTY_STRING_ARRAY);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (-1));
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), (float) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-98));
      assertArrayEquals(new byte[] {(byte) (-98)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1), (double) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      short[] shortArray0 = new short[8];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)108);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'L');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short)0, 645.111023925124);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, 0, (short)114);
      assertArrayEquals(new short[] {(short)114}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEquals(arrayUtils0, arrayUtils0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (int) (byte) (-1), (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1), 712);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (short)4);
      assertArrayEquals(new short[] {(short)4}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      String string0 = ArrayUtils.toString((Object) arrayUtils0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-772.33), (-1309.377072324));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (Object) arrayUtils0.INDEX_NOT_FOUND);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[3] = (short)1437;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1437);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (-1), 1L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, '!');
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '!');
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_INT_ARRAY, (int) (short)57);
      assertEquals((-1), int0);
  }
}

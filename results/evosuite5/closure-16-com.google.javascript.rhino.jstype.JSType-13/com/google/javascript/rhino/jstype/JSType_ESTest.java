/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 21:53:47 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertNotNull(noResolvedType0);
      
      JSType jSType0 = JSType.safeResolve((JSType) null, simpleErrorReporter0, noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertNotNull(errorFunctionType0);
      
      ObjectType objectType0 = errorFunctionType0.getInstanceType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isConstructor());
      assertTrue(objectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isParameterizedType());
      assertNotNull(objectType0);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, objectType0, objectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isConstructor());
      assertTrue(objectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertNotNull(parameterizedType0);
      
      JSType.TypePair jSType_TypePair0 = parameterizedType0.getTypesUnderShallowEquality(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isConstructor());
      assertTrue(objectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isNullType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNominalType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNoObjectType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertNotNull(numberType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.differsFrom(numberType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isNullType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNominalType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNoObjectType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "1");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.differsFrom(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("Not declared as a constructor", templateType0.getReferenceName());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertNotNull(templateType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.differsFrom(templateType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("Not declared as a constructor", templateType0.getReferenceName());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "KY*4eidy!N");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertEquals("KY*4eidy!N", templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertNotNull(templateType0);
      
      boolean boolean0 = templateType0.differsFrom(templateType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertEquals("KY*4eidy!N", templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertNotNull(voidType0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNominalConstructor());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertNotNull(nullType0);
      
      JSType.TypePair jSType_TypePair0 = nullType0.getTypesUnderShallowInequality(voidType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNominalConstructor());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.isNullType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalConstructor());
      assertTrue(nullType0.matchesNumberContext());
      assertNotNull(nullType0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isRecordType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertNotNull(allType0);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) nullType0, (JSType) allType0, (JSType) nullType0, (JSType) nullType0, (JSType) nullType0, (JSType) nullType0, (JSType) nullType0, (JSType) nullType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.isNullType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalConstructor());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isRecordType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(8, immutableList0.size());
      assertNotNull(immutableList0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.isNullType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalConstructor());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isRecordType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(8, immutableList0.size());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isEnumElementType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isResolved());
      assertNotNull(unionType0);
      
      JSType.TypePair jSType_TypePair0 = nullType0.getTypesUnderShallowInequality(unionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.isNullType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalConstructor());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isRecordType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(8, immutableList0.size());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isEnumElementType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isResolved());
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isAllType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertNotNull(stringType0);
      
      JSType jSType0 = jSTypeRegistry0.createOptionalType(stringType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isAllType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertNotNull(jSType0);
      
      JSType.TypePair jSType_TypePair0 = stringType0.getTypesUnderShallowInequality(jSType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isAllType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertNotNull(jSType_TypePair0);
      
      JSType.TypePair jSType_TypePair1 = jSType0.getTypesUnderShallowInequality(jSType_TypePair0.typeB);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isAllType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertNotNull(jSType_TypePair1);
      assertNotSame(jSType_TypePair0, jSType_TypePair1);
      assertNotSame(jSType_TypePair1, jSType_TypePair0);
      assertFalse(jSType_TypePair1.equals((Object)jSType_TypePair0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isObject());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isFunctionType());
      assertNotNull(noType0);
      
      JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderInequality(noType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isObject());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isFunctionType());
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesStringContext());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isConstructor());
      assertNotNull(stringType0);
      
      JSType jSType0 = jSTypeRegistry0.createOptionalType(stringType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesStringContext());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isConstructor());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertNotNull(jSType0);
      
      JSType.TypePair jSType_TypePair0 = stringType0.getTypesUnderInequality(jSType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesStringContext());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isConstructor());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isVoidType());
      assertNotNull(noType0);
      
      JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderEquality(noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isVoidType());
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNoType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isEnumType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertNotNull(stringType0);
      
      JSType jSType0 = jSTypeRegistry0.createNullableType(stringType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNoType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isEnumType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertNotNull(jSType0);
      
      JSType.TypePair jSType_TypePair0 = stringType0.getTypesUnderEquality(jSType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNoType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isEnumType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isInterface());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isNominalType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.matchesStringContext());
      assertNotNull(numberType0);
      
      JSType jSType0 = numberType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isInterface());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isNominalType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertTrue(jSType0.isNumberValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNullable());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructor());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isResolved());
      assertNotNull(jSType0);
      assertSame(numberType0, jSType0);
      assertSame(jSType0, numberType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isEnumType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertNotNull(noType0);
      
      NoType noType1 = (NoType)noType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isEnumType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertTrue(noType1.isObject());
      assertFalse(noType1.isParameterizedType());
      assertFalse(noType1.isNoResolvedType());
      assertTrue(noType1.isNullable());
      assertFalse(noType1.isNoObjectType());
      assertFalse(noType1.isNumberValueType());
      assertFalse(noType1.isUnionType());
      assertFalse(noType1.isFunctionPrototypeType());
      assertTrue(noType1.hasInstanceType());
      assertTrue(noType1.matchesStringContext());
      assertTrue(noType1.isNoType());
      assertFalse(noType1.isRecordType());
      assertFalse(noType1.isVoidType());
      assertFalse(noType1.isEnumType());
      assertFalse(noType1.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noType1.getPropertiesCount());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertFalse(noType1.isResolved());
      assertFalse(noType1.isStringValueType());
      assertTrue(noType1.matchesObjectContext());
      assertFalse(noType1.isTemplateType());
      assertFalse(noType1.isNullType());
      assertFalse(noType1.isAllType());
      assertFalse(noType1.isInterface());
      assertFalse(noType1.isReturnTypeInferred());
      assertFalse(noType1.isBooleanValueType());
      assertFalse(noType1.isNominalConstructor());
      assertTrue(noType1.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertFalse(noType1.isEnumElementType());
      assertFalse(noType1.isCheckedUnknownType());
      assertTrue(noType1.isConstructor());
      assertNull(noType1.getReferenceName());
      assertTrue(noType1.matchesNumberContext());
      assertFalse(noType1.isFunctionType());
      assertFalse(noType1.isOrdinaryFunction());
      assertFalse(noType1.isNominalType());
      assertNotNull(noType1);
      assertNotSame(noType0, noType1);
      assertNotSame(noType1, noType0);
      assertFalse(noType1.equals((Object)noType0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(modificationVisitor0);
      
      JSType jSType0 = modificationVisitor0.caseNullType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertEquals("null", jSType0.getDisplayName());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isInterface());
      assertTrue(jSType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.matchesStringContext());
      assertTrue(jSType0.isNullType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertNotNull(jSType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isUnionType());
      assertNotNull(noResolvedType0);
      
      JSType jSType1 = jSType0.getLeastSupertype(noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertEquals("null", jSType0.getDisplayName());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isInterface());
      assertTrue(jSType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.matchesStringContext());
      assertTrue(jSType0.isNullType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(jSType1.isNullType());
      assertTrue(jSType1.isNullable());
      assertFalse(jSType1.isEnumType());
      assertFalse(jSType1.matchesObjectContext());
      assertFalse(jSType1.isBooleanValueType());
      assertEquals("null", jSType1.getDisplayName());
      assertFalse(jSType1.isOrdinaryFunction());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.isUnionType());
      assertFalse(jSType1.isStringValueType());
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertTrue(jSType1.matchesStringContext());
      assertFalse(jSType1.isVoidType());
      assertEquals(BooleanLiteralSet.FALSE, jSType1.getPossibleToBooleanOutcomes());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isParameterizedType());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.isNominalType());
      assertFalse(jSType1.isTemplateType());
      assertTrue(jSType1.matchesNumberContext());
      assertFalse(jSType1.isNominalConstructor());
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.isNoType());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isFunctionType());
      assertNotNull(jSType1);
      assertSame(jSType0, jSType1);
      assertSame(jSType1, jSType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertNotNull(voidType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertNotNull(noResolvedType0);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)JSType.getGreatestSubtype((JSType) noResolvedType0, (JSType) voidType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType1.isInterface());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isResolved());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isNoObjectType());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isFunctionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isStringValueType());
      assertTrue(noResolvedType1.isObject());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.isNullable());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isVoidType());
      assertNotNull(noResolvedType1);
      assertNotSame(noResolvedType0, noResolvedType1);
      assertNotSame(noResolvedType1, noResolvedType0);
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[3];
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.NUMBER_STRING_BOOLEAN;
      jSTypeNativeArray0[1] = jSTypeNative1;
      jSTypeNativeArray0[2] = jSTypeNative1;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoObjectType());
      assertNotNull(jSType0);
      assertEquals(3, jSTypeNativeArray0.length);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertNotNull(stringType0);
      
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(jSType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(boolean0);
      assertEquals(3, jSTypeNativeArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.matchesNumberContext());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isRecordType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isObject());
      assertNotNull(noObjectType0);
      
      JSType jSType0 = jSTypeRegistry0.createNullableType(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.matchesNumberContext());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isRecordType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isObject());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertNotNull(jSType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "L;1.1b5Ts9oPyE}");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertNotNull(errorFunctionType0);
      
      NoObjectType noObjectType1 = (NoObjectType)JSType.getGreatestSubtype(jSType0, (JSType) errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.matchesNumberContext());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isRecordType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isObject());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(noObjectType1.isOrdinaryFunction());
      assertFalse(noObjectType1.isAllType());
      assertTrue(noObjectType1.isNoObjectType());
      assertTrue(noObjectType1.matchesNumberContext());
      assertTrue(noObjectType1.matchesStringContext());
      assertFalse(noObjectType1.isNominalConstructor());
      assertFalse(noObjectType1.isNullType());
      assertEquals(0, noObjectType1.getExtendedInterfacesCount());
      assertFalse(noObjectType1.isResolved());
      assertFalse(noObjectType1.isNominalType());
      assertNull(noObjectType1.getReferenceName());
      assertFalse(noObjectType1.isInterface());
      assertFalse(noObjectType1.isReturnTypeInferred());
      assertFalse(noObjectType1.isFunctionType());
      assertTrue(noObjectType1.hasCachedValues());
      assertFalse(noObjectType1.isTemplateType());
      assertFalse(noObjectType1.isEnumElementType());
      assertFalse(noObjectType1.isParameterizedType());
      assertTrue(noObjectType1.canBeCalled());
      assertTrue(noObjectType1.matchesObjectContext());
      assertTrue(noObjectType1.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType1.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType1.isObject());
      assertFalse(noObjectType1.isNoType());
      assertFalse(noObjectType1.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType1.getPropertiesCount());
      assertFalse(noObjectType1.isCheckedUnknownType());
      assertFalse(noObjectType1.isVoidType());
      assertFalse(noObjectType1.isEnumType());
      assertTrue(noObjectType1.hasInstanceType());
      assertFalse(noObjectType1.isNoResolvedType());
      assertFalse(noObjectType1.isBooleanValueType());
      assertFalse(noObjectType1.isFunctionPrototypeType());
      assertFalse(noObjectType1.isNumberValueType());
      assertFalse(noObjectType1.isUnionType());
      assertFalse(noObjectType1.isRecordType());
      assertNotNull(noObjectType1);
      assertSame(noObjectType0, noObjectType1);
      assertSame(noObjectType1, noObjectType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isStringValueType());
      assertTrue(voidType0.isVoidType());
      assertNotNull(voidType0);
      
      NoType noType0 = (NoType)voidType0.restrictByNotNullOrUndefined();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isStringValueType());
      assertTrue(voidType0.isVoidType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.isNoType());
      assertNotNull(noType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowEquality(noType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isStringValueType());
      assertTrue(voidType0.isVoidType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.hasCachedValues());
      assertTrue(noType0.isNoType());
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesStringContext());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertNotNull(stringType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("Unknown class name", templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertNotNull(templateType0);
      
      boolean boolean0 = templateType0.canTestForShallowEqualityWith(stringType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesStringContext());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertEquals("Unknown class name", templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isTemplateType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isResolved());
      assertNotNull(stringType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isRecordType());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isParameterizedType());
      assertNotNull(templateType0);
      
      JSType jSType0 = JSType.getLeastSupertype((JSType) stringType0, (JSType) templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isTemplateType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isRecordType());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalType());
      assertNotNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isObject());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isResolved());
      assertNotNull(noType0);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noType0, (JSType) noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isObject());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isResolved());
      assertEquals(2, immutableList0.size());
      assertNotNull(immutableList0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isObject());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isResolved());
      assertEquals(2, immutableList0.size());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertNotNull(unionType0);
      
      JSType jSType0 = noType0.getLeastSupertype(unionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isObject());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isResolved());
      assertEquals(2, immutableList0.size());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isRecordType());
      assertNotNull(jSType0);
      assertSame(unionType0, jSType0);
      assertSame(jSType0, unionType0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.isNoType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isCheckedUnknownType());
      assertNotNull(noType0);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noType0, (JSType) noType0, (JSType) noType0, (JSType) noType0, (JSType) noType0, (JSType) noType0, (JSType) noType0, (JSType) noType0, (JSType) noType0, (JSType) noType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.isNoType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(10, immutableList0.size());
      assertNotNull(immutableList0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.isNoType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(10, immutableList0.size());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertNotNull(unionType0);
      
      NoType noType1 = (NoType)unionType0.findPropertyType("Unknown class name");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.isNoType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(10, immutableList0.size());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(noType1.hasCachedValues());
      assertTrue(noType1.isObject());
      assertFalse(noType1.isNoResolvedType());
      assertFalse(noType1.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType1.getPropertiesCount());
      assertTrue(noType1.isConstructor());
      assertTrue(noType1.canBeCalled());
      assertFalse(noType1.isResolved());
      assertFalse(noType1.isReturnTypeInferred());
      assertFalse(noType1.isInterface());
      assertFalse(noType1.isTemplateType());
      assertFalse(noType1.isNoObjectType());
      assertFalse(noType1.isParameterizedType());
      assertTrue(noType1.isNoType());
      assertTrue(noType1.matchesObjectContext());
      assertFalse(noType1.isNullType());
      assertFalse(noType1.isBooleanValueType());
      assertFalse(noType1.isAllType());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertFalse(noType1.isEnumElementType());
      assertFalse(noType1.isFunctionType());
      assertTrue(noType1.matchesNumberContext());
      assertFalse(noType1.isNominalConstructor());
      assertNull(noType1.getReferenceName());
      assertFalse(noType1.isOrdinaryFunction());
      assertFalse(noType1.isNominalType());
      assertTrue(noType1.matchesStringContext());
      assertFalse(noType1.isVoidType());
      assertFalse(noType1.isRecordType());
      assertFalse(noType1.isCheckedUnknownType());
      assertFalse(noType1.isEnumType());
      assertFalse(noType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertFalse(noType1.isUnionType());
      assertFalse(noType1.isFunctionPrototypeType());
      assertTrue(noType1.isNullable());
      assertTrue(noType1.hasInstanceType());
      assertNotNull(noType1);
      assertNotSame(noType0, noType1);
      assertNotSame(noType1, noType0);
      assertFalse(noType1.equals((Object)noType0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertNotNull(stringType0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isNominalConstructor());
      assertTrue(nullType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullable());
      assertNotNull(nullType0);
      
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(nullType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isNominalConstructor());
      assertTrue(nullType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isConstructor());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isTemplateType());
      assertTrue(stringType0.isStringValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isFunctionType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isVoidType());
      assertNotNull(stringType0);
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(modificationVisitor0);
      
      JSType jSType0 = modificationVisitor0.caseAllType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.canBeCalled());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isRecordType());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isInterface());
      assertNotNull(jSType0);
      
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(jSType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isConstructor());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isTemplateType());
      assertTrue(stringType0.isStringValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isFunctionType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isVoidType());
      assertFalse(jSType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.canBeCalled());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isRecordType());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isInterface());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertNotNull(stringType0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isRecordType());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isResolved());
      assertNotNull(noObjectType0);
      
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isRecordType());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNotNull(noResolvedType0);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, true);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertNotNull(instanceObjectType0);
      
      boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(instanceObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertNotNull(errorFunctionType0);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(7, immutableList0.size());
      assertNotNull(immutableList0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isEnumType());
      assertNotNull(unionType0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isStringValueType());
      assertNotNull(voidType0);
      
      voidType0.testForEquality(unionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isOrdinaryFunction());
      assertTrue(stringType0.matchesObjectContext());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isParameterizedType());
      assertNotNull(stringType0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesNumberContext());
      assertNotNull(noObjectType0);
      
      JSType.TypePair jSType_TypePair0 = noObjectType0.getTypesUnderInequality(stringType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isOrdinaryFunction());
      assertTrue(stringType0.matchesObjectContext());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesNumberContext());
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertNotNull(voidType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isObject());
      assertNotNull(errorFunctionType0);
      
      ObjectType objectType0 = errorFunctionType0.getInstanceType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isNativeObjectType());
      assertTrue(objectType0.isInstanceType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isInterface());
      assertTrue(objectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.hasCachedValues());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertNotNull(objectType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowEquality(objectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isNativeObjectType());
      assertTrue(objectType0.isInstanceType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isInterface());
      assertTrue(objectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertNotNull(jSType_TypePair0);
      
      errorFunctionType0.testForEqualityHelper(voidType0, jSType_TypePair0.typeB);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isNativeObjectType());
      assertTrue(objectType0.isInstanceType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isInterface());
      assertTrue(objectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertNotNull(stringType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertNotNull(noResolvedType0);
      
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderInequality(stringType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "EVAL_ERROR_FUNCTION_TYPE");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertNotNull(errorFunctionType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "EVAL_ERROR_FUNCTION_TYPE");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("EVAL_ERROR_FUNCTION_TYPE", templateType0.getReferenceName());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isTemplateType());
      assertNotNull(templateType0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertNotNull(noObjectType0);
      
      errorFunctionType0.testForEqualityHelper(templateType0, noObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("EVAL_ERROR_FUNCTION_TYPE", templateType0.getReferenceName());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isParameterizedType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNotNull(noResolvedType0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isTemplateType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isFunctionType());
      assertTrue(stringType0.matchesObjectContext());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertNotNull(stringType0);
      
      JSType.TypePair jSType_TypePair0 = stringType0.getTypesUnderInequality(noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isTemplateType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isFunctionType());
      assertTrue(stringType0.matchesObjectContext());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isParameterizedType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertNotNull(stringType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isRecordType());
      assertEquals("Unknown class name", templateType0.getReferenceName());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isObject());
      assertNotNull(templateType0);
      
      JSType.TypePair jSType_TypePair0 = stringType0.getTypesUnderEquality(templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isParameterizedType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isRecordType());
      assertEquals("Unknown class name", templateType0.getReferenceName());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isObject());
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.isStringValueType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertNotNull(stringType0);
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(modificationVisitor0);
      
      JSType jSType0 = modificationVisitor0.caseAllType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isTemplateType());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.canBeCalled());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isParameterizedType());
      assertTrue(jSType0.matchesStringContext());
      assertNotNull(jSType0);
      
      JSType.TypePair jSType_TypePair0 = stringType0.getTypesUnderInequality(jSType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.isStringValueType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isTemplateType());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.canBeCalled());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isParameterizedType());
      assertTrue(jSType0.matchesStringContext());
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isInterface());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isParameterizedType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertNotNull(stringType0);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) stringType0, (JSType) stringType0, (JSType) stringType0, (JSType) stringType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isInterface());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isParameterizedType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertEquals(4, immutableList0.size());
      assertNotNull(immutableList0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isInterface());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isParameterizedType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertEquals(4, immutableList0.size());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isEnumElementType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoResolvedType());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.canAssignTo(unionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isInterface());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isParameterizedType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertEquals(4, immutableList0.size());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isEnumElementType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoResolvedType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isParameterizedType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isResolved());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNullType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNullable());
      assertNotNull(numberType0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isConstructor());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isEnumElementType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertNotNull(stringType0);
      
      boolean boolean0 = stringType0.canAssignTo(numberType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isParameterizedType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isResolved());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNullType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isConstructor());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isEnumElementType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isOrdinaryFunction());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.isNumberValueType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isEnumType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isConstructor());
      assertNotNull(numberType0);
      
      JSType jSType0 = numberType0.findPropertyType("Named type with empty name component");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isOrdinaryFunction());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.isNumberValueType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isEnumType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isConstructor());
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isInterface());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertNotNull(stringType0);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) stringType0, (JSType) stringType0, (JSType) stringType0, (JSType) stringType0, (JSType) stringType0, (JSType) stringType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isInterface());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(6, immutableList0.size());
      assertNotNull(immutableList0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isInterface());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(6, immutableList0.size());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isParameterizedType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNominalType());
      assertNotNull(unionType0);
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)unionType0.autobox();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isInterface());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(6, immutableList0.size());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isParameterizedType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNominalType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertNotNull(instanceObjectType0);
      
      boolean boolean0 = instanceObjectType0.equals(unionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isInterface());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(6, immutableList0.size());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isParameterizedType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNominalType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesStringContext());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertNotNull(stringType0);
      
      boolean boolean0 = stringType0.equals((Object) null);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesStringContext());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Too many elements to create power set: %s > 30");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertNotNull(errorFunctionType0);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isTemplateType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isVoidType());
      assertTrue(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isObject());
      assertTrue(parameterizedType0.isFunctionType());
      assertNotNull(parameterizedType0);
      
      boolean boolean0 = JSType.isEquivalent(parameterizedType0, errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isTemplateType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isVoidType());
      assertTrue(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isObject());
      assertTrue(parameterizedType0.isFunctionType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isEnumElementType());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isAllType());
      assertNotNull(stringType0);
      
      JSType jSType0 = stringType0.getGreatestSubtype(stringType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isEnumElementType());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isAllType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumElementType());
      assertEquals("string", jSType0.getDisplayName());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertNotNull(jSType0);
      assertSame(stringType0, jSType0);
      assertSame(jSType0, stringType0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertNotNull(stringType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isResolved());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertNotNull(templateType0);
      
      UnknownType unknownType0 = (UnknownType)stringType0.getGreatestSubtype(templateType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isResolved());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(unknownType0.matchesObjectContext());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isUnionType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isObject());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNominalConstructor());
      assertNotNull(unknownType0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertNotNull(noResolvedType0);
      
      boolean boolean0 = noResolvedType0.isNominalConstructor();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.isNominalConstructor();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "J");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertNotNull(errorFunctionType0);
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertNotNull(jSType_TypePair0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, jSType_TypePair0.typeB);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertTrue(parameterizedType0.isFunctionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertNotNull(parameterizedType0);
      
      boolean boolean0 = parameterizedType0.hasAnyTemplateInternal();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertTrue(parameterizedType0.isFunctionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "{");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertEquals("{", templateType0.getReferenceName());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertNotNull(templateType0);
      
      TemplateType templateType1 = (TemplateType)jSTypeRegistry0.createDefaultObjectUnion(templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertEquals("{", templateType0.getReferenceName());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isNominalConstructor());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isVoidType());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertEquals("{", templateType1.getReferenceName());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isResolved());
      assertFalse(templateType1.isNullType());
      assertNotNull(templateType1);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertNotNull(errorFunctionType0);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertNotNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
      assertNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isTemplateType());
      assertNotNull(stringType0);
      
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) stringType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isTemplateType());
      assertNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNativeObjectType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isUnionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isEnumType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoType());
      assertNotNull(recordType0);
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(modificationVisitor0);
      
      JSType jSType0 = modificationVisitor0.caseStringType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertEquals("string", jSType0.getDisplayName());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNullType());
      assertNotNull(jSType0);
      
      NoObjectType noObjectType0 = (NoObjectType)JSType.getGreatestSubtype(jSType0, (JSType) recordType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNativeObjectType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isInterface());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isUnionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isEnumType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoType());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertEquals("string", jSType0.getDisplayName());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNullType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.canBeCalled());
      assertNotNull(noObjectType0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isAllType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isTemplateType());
      assertNotNull(stringType0);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, stringType0, "F7UB^E,$N%$W9H");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isAllType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isTemplateType());
      assertEquals("F7UB^E,$N%$W9H", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.hasCachedValues());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertNotNull(enumElementType0);
      
      JSType.TypePair jSType_TypePair0 = stringType0.getTypesUnderInequality(enumElementType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isAllType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isTemplateType());
      assertEquals("F7UB^E,$N%$W9H", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.hasCachedValues());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prev is not a child of this node.");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.isGlobalThisType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prev is not a child of this node.");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertNotNull(errorFunctionType0);
      
      FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.hasInstanceType());
      assertNotNull(functionType0);
      
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNotNull(noResolvedType0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isResolved());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isInterface());
      assertNotNull(stringType0);
      
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isResolved());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isInterface());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.hasDisplayName();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isResolved());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertNotNull(templateType0);
      
      boolean boolean0 = templateType0.hasDisplayName();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isResolved());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertNotNull(noResolvedType0);
      
      boolean boolean0 = noResolvedType0.hasDisplayName();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesNumberContext());
      assertNotNull(stringType0);
      
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[0] = (JSType) stringType0;
      jSTypeArray0[1] = (JSType) stringType0;
      jSTypeArray0[2] = (JSType) stringType0;
      jSTypeArray0[3] = (JSType) stringType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) stringType0, (JSType) stringType0, (JSType) stringType0, (JSType) stringType0, (JSType) stringType0, (JSType) stringType0, (JSType) stringType0, (JSType) stringType0, (JSType) stringType0, (JSType) stringType0, (JSType) stringType0, (JSType) stringType0, jSTypeArray0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesNumberContext());
      assertEquals(16, immutableList0.size());
      assertNotNull(immutableList0);
      assertEquals(4, jSTypeArray0.length);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesNumberContext());
      assertEquals(16, immutableList0.size());
      assertFalse(unionType0.isNullType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNominalType());
      assertNotNull(unionType0);
      assertEquals(4, jSTypeArray0.length);
      
      String string0 = unionType0.toStringHelper(false);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesNumberContext());
      assertEquals(16, immutableList0.size());
      assertFalse(unionType0.isNullType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNominalType());
      assertNotNull(string0);
      assertEquals("(string)", string0);
      assertEquals(4, jSTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isAllType());
      assertTrue(numberType0.matchesNumberContext());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isOrdinaryFunction());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNoObjectType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isEnumElementType());
      assertNotNull(numberType0);
      
      numberType0.clearResolved();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isAllType());
      assertTrue(numberType0.matchesNumberContext());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isOrdinaryFunction());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNoObjectType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isEnumElementType());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertNotNull(voidType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertNotNull(errorFunctionType0);
      
      ObjectType objectType0 = errorFunctionType0.getInstanceType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isTemplateType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isResolved());
      assertTrue(objectType0.hasReferenceName());
      assertNotNull(objectType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowEquality(objectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isTemplateType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isResolved());
      assertTrue(objectType0.hasReferenceName());
      assertNotNull(jSType_TypePair0);
      
      boolean boolean0 = jSType_TypePair0.typeB.isNumberValueType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isTemplateType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isResolved());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isResolved());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isTemplateType());
      assertNotNull(stringType0);
      
      boolean boolean0 = stringType0.isEnumType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isResolved());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.isStringValueType());
      assertTrue(stringType0.matchesStringContext());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isRecordType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isResolved());
      assertNotNull(stringType0);
      
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isResolved());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isTemplateType());
      assertNotNull(objectType0);
      
      stringType0.matchConstraint(objectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.isStringValueType());
      assertTrue(stringType0.matchesStringContext());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isRecordType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isResolved());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isResolved());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isConstructor());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isFunctionType());
      assertTrue(stringType0.isStringValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isOrdinaryFunction());
      assertNotNull(stringType0);
      
      boolean boolean0 = stringType0.matchesUint32Context();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isConstructor());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isFunctionType());
      assertTrue(stringType0.isStringValueType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isOrdinaryFunction());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isVoidType());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.isTheObjectType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "/f;]]");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertNotNull(errorFunctionType0);
      
      ObjectType objectType0 = errorFunctionType0.getInstanceType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(objectType0.isNominalType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isBooleanValueType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNumberValueType());
      assertTrue(objectType0.isInstanceType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isInterface());
      assertNotNull(objectType0);
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)errorFunctionType0.forceResolve(simpleErrorReporter0, objectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(objectType0.isNominalType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isBooleanValueType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNumberValueType());
      assertTrue(objectType0.isInstanceType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isInterface());
      assertTrue(objectType0.isResolved());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertTrue(errorFunctionType1.isObject());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isUnionType());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.isNominalType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertFalse(errorFunctionType1.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType1.isVoidType());
      assertFalse(errorFunctionType1.isRecordType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertTrue(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isTemplateType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertTrue(errorFunctionType1.isFunctionType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertTrue(errorFunctionType1.hasCachedValues());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertTrue(errorFunctionType1.isConstructor());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertFalse(errorFunctionType1.isAllType());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isInterface());
      assertNotNull(errorFunctionType1);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isInterface());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isConstructor());
      assertNotNull(voidType0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertNotNull(errorFunctionType0);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isInterface());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isConstructor());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isVoidType());
      assertTrue(parameterizedType0.isObject());
      assertTrue(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isTemplateType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isRecordType());
      assertNotNull(parameterizedType0);
      
      boolean boolean0 = parameterizedType0.isCheckedUnknownType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isInterface());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isConstructor());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isVoidType());
      assertTrue(parameterizedType0.isObject());
      assertTrue(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isTemplateType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isInstanceType();
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isAllType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.matchesInt32Context();
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      ObjectType objectType0 = noType0.dereference();
      assertNotNull(objectType0);
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType.toMaybeTemplateType((JSType) stringType0);
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("Unknown class name", (Node) null, (ObjectType) null);
      boolean boolean0 = objectType0.isOrdinaryFunction();
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(objectType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isNumber();
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
      assertFalse(boolean0);
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      boolean boolean0 = numberType0.canBeCalled();
      assertFalse(boolean0);
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isBooleanValueType();
      assertFalse(noResolvedType0.isAllType());
      assertFalse(boolean0);
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      numberType0.setValidator(predicate0);
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isArrayType();
      assertFalse(boolean0);
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isNominalConstructor();
      assertFalse(boolean0);
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      boolean boolean0 = errorFunctionType0.canTestForEqualityWith(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prev is not a child of this node.");
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      instanceObjectType0.unboxesTo();
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      Node node0 = new Node(1511);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, errorFunctionType0);
      boolean boolean0 = arrowType0.matchesStringContext();
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isAllType());
      assertFalse(boolean0);
      assertFalse(arrowType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isParameterizedType();
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isResolved());
      assertFalse(boolean0);
      assertFalse(stringType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.toAnnotationString();
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isString();
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = stringType0.collapseUnion();
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isRegexpType();
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNoType());
      assertFalse(boolean0);
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test90()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "`YNhc%G,]!?Nzdq");
      String string0 = errorFunctionType0.toDebugHashCodeString();
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertEquals("function (this:{1422367642}, {12}, {12}, {12}): {1422367642}", string0);
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.getJSDocInfo();
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      boolean boolean0 = errorFunctionType0.matchesNumberContext();
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      boolean boolean0 = jSType0.isStringValueType();
      assertFalse(boolean0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isResolved();
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0);
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionType(objectType0, (JSType) objectType0, (List<JSType>) immutableList0);
      objectType0.getTypesUnderInequality(functionType0);
      assertTrue(functionType0.hasCachedValues());
      assertTrue(objectType0.hasCachedValues());
  }
}

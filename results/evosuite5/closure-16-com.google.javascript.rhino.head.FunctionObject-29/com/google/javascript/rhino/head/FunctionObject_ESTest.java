/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 04:34:21 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.ConsString;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaObject;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<NativeString> class0 = NativeString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "get");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("get", method0, importerTopLevel0);
      functionObject0.isVarArgsConstructor();
      assertEquals(6, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "notify");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("notify", method0, importerTopLevel0);
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        functionObject0.createObject(context0, importerTopLevel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.ClassCastException: java.lang.Object cannot be cast to com.google.javascript.rhino.head.Scriptable
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClass");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("doctest input", method0, importerTopLevel0);
      // Undeclared exception!
      try { 
        functionObject0.call((Context) null, importerTopLevel0, importerTopLevel0, methodArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "notify");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Context context0 = Context.getContext();
      FunctionObject functionObject0 = new FunctionObject("language version", method0, importerTopLevel0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, (Scriptable) null, (Scriptable) null, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<NativeString> class0 = NativeString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "get");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("get", method0, importerTopLevel0);
      FunctionObject functionObject1 = new FunctionObject("get", method0, functionObject0);
      // Undeclared exception!
      try { 
        functionObject1.call((Context) null, importerTopLevel0, importerTopLevel0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"get\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "notify");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Context context0 = new Context();
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, importerTopLevel0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, importerTopLevel0, (Scriptable) null, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<NativeString> class0 = NativeString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "get");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("get", method0, importerTopLevel0);
      // Undeclared exception!
      try { 
        functionObject0.call((Context) null, importerTopLevel0, importerTopLevel0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"get\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeCall nativeCall0 = context0.currentActivationCall;
      Class<Double> class0 = Double.TYPE;
      Class<ConsString> class1 = ConsString.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) class0, (Class<?>) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"com.google.javascript.rhino.head.ConsString\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "wait");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"wait\" occurs multiple times in class \"java.lang.Object\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Method[] methodArray0 = new Method[1];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "2");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "notify");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("notify", method0, importerTopLevel0);
      functionObject0.getMethodOrConstructor();
      assertEquals(9, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<NativeString> class0 = NativeString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "get");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject((String) null, method0, importerTopLevel0);
      String string0 = functionObject0.getFunctionName();
      assertNotNull(string0);
      assertEquals(6, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<NativeString> class0 = NativeString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "get");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("get", method0, importerTopLevel0);
      String string0 = functionObject0.getFunctionName();
      assertEquals(6, methodArray0.length);
      assertEquals("get", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Context context0 = new Context();
      Double double0 = new Double(160);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) double0, 4);
      assertEquals(160.0, object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      NativeCall nativeCall0 = context0.currentActivationCall;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) "CFz", 3);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Context context0 = Context.enter();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) null, 3);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Context context0 = Context.enter();
      NativeCall nativeCall0 = context0.currentActivationCall;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) context0, 2);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Context context0 = Context.enter();
      NativeCall nativeCall0 = context0.currentActivationCall;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) nativeCall0, 1);
      assertNotNull(object0);
      assertEquals("null", object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Context context0 = new Context();
      Double double0 = new Double(160);
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) double0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "equals");
      assertNotNull(method0);
      
      Class<?>[] classArray0 = method0.getExceptionTypes();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("equals", method0, importerTopLevel0);
      Context context0 = new Context();
      functionObject0.call(context0, importerTopLevel0, importerTopLevel0, classArray0);
      assertEquals(9, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<NativeContinuation> class0 = NativeContinuation.class;
      Context context0 = Context.enter();
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeJavaObject0, (Object) class0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeCall nativeCall0 = context0.currentActivationCall;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) nativeCall0, 4);
      assertNotNull(object0);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeJavaClass0, (Object) context0.VERSION_1_5, 2);
      assertEquals(150, object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test23()  throws Throwable  {
      Context context0 = new Context();
      Class<Double> class0 = Double.class;
      FunctionObject.convertArg(context0, (Scriptable) null, (Object) class0, (Class<?>) class0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "equals");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("equals", method0, importerTopLevel0);
      assertEquals(1, functionObject0.getLength());
      
      Context context0 = new Context();
      functionObject0.call(context0, importerTopLevel0, importerTopLevel0, methodArray0);
      assertEquals(9, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test27()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeCall nativeCall0 = context0.currentActivationCall;
      Class<String> class0 = String.class;
      FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) "language version", (Class<?>) class0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test28()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "contains");
      BaseFunction baseFunction0 = new BaseFunction();
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("matches", method0, baseFunction0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"java.lang.CharSequence\" in method \"contains\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "notify");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("notify", method0, importerTopLevel0);
      functionObject0.addAsConstructor(importerTopLevel0, importerTopLevel0);
      assertEquals(0, functionObject0.getLength());
      assertEquals(9, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "notify");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("notify", method0, importerTopLevel0);
      Object object0 = functionObject0.getInstanceIdValue(1);
      assertEquals(9, methodArray0.length);
      assertEquals(0, object0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 06:28:07 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.ConsString;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.NativeMath;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeArray0);
      functionObject0.isVarArgsConstructor();
      assertEquals(9, methodArray0.length);
      assertEquals(9L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeArray0);
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        functionObject0.createObject(context0, nativeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.ClassCastException: java.lang.Object cannot be cast to com.google.javascript.rhino.head.Scriptable
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeString nativeString0 = new NativeString("error reporter");
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) nativeString0, class0, true, true);
      Scriptable scriptable0 = baseFunction0.createObject(context0, nativeString0);
      assertNull(scriptable0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClass");
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      FunctionObject functionObject0 = new FunctionObject("getClass", method0, nativeArray0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeArray0, functionObject0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      NativeCall nativeCall0 = new NativeCall();
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeCall0);
      Context context0 = Context.getContext();
      functionObject0.call(context0, nativeCall0, nativeCall0, methodArray0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      Context context0 = Context.getContext();
      Class<NativeJavaMethod> class0 = NativeJavaMethod.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      FunctionObject.findSingleMethod(methodArray0, "toString");
      NativeArray nativeArray0 = null;
      try {
        nativeArray0 = new NativeArray(context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<NativeObject> class0 = NativeObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeArray0);
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeArray0, functionObject0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"toString\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      Class<NativeError> class0 = NativeError.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeArray0);
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeArray0, nativeArray0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"toString\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      Class<ConsString> class0 = ConsString.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) contextFactory0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"com.google.javascript.rhino.head.ConsString\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Context context0 = new Context();
      Class<NativeMath> class0 = NativeMath.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) null, (Object) context0, (Class<?>) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "toString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"toString\" occurs multiple times in class \"java.lang.Boolean\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Method[] methodArray0 = new Method[1];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, ">;Up*6l`V=Phdap:");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeArray0);
      functionObject0.getMethodOrConstructor();
      assertEquals(9, methodArray0.length);
      assertEquals(9L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeString nativeString0 = new NativeString("error reporter");
      Class<BaseFunction> class0 = BaseFunction.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) nativeString0, class0, true, true);
      functionObject0.getMethodOrConstructor();
      assertTrue(nativeString0.isEmpty());
      assertEquals("Function", functionObject0.getFunctionName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      FunctionObject functionObject0 = new FunctionObject((String) null, method0, nativeArray0);
      String string0 = functionObject0.getFunctionName();
      assertEquals(9, methodArray0.length);
      assertNotNull(string0);
      assertEquals(9L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeString nativeString0 = new NativeString("language version");
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeString0, (Object) context0, 4);
      assertEquals(0.0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      NativeWith nativeWith0 = new NativeWith((Scriptable) null, (Scriptable) null);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeWith0, (Object) null, 3);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      Context context0 = new Context();
      NativeString nativeString0 = new NativeString("language version");
      FunctionObject.convertArg(context0, (Scriptable) nativeString0, (Object) context0, 2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeString nativeString0 = new NativeString("error reporter");
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeString0, (Object) context0, 1);
      assertEquals("null", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      // Undeclared exception!
      try { 
        FunctionObject.convertArg((Context) null, (Scriptable) importerTopLevel0, (Object) importerTopLevel0, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeString nativeString0 = new NativeString("error reporter");
      Double double0 = new Double((-2709.9214641006993));
      FunctionObject.convertArg(context0, (Scriptable) nativeString0, (Object) double0, 4);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeString nativeString0 = new NativeString("error reporter");
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) nativeString0, class0, true, true);
      // Undeclared exception!
      try { 
        baseFunction0.call(context0, nativeString0, nativeString0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Double> class0 = Double.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "equals");
      assertNotNull(method0);
      
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      FunctionObject functionObject0 = new FunctionObject("equals", method0, nativeArray0);
      assertEquals(1, functionObject0.getArity());
      
      Context context0 = new Context();
      functionObject0.call(context0, nativeArray0, nativeArray0, methodArray0);
      assertEquals(9, methodArray0.length);
      assertEquals(9L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "hashCode");
      assertNotNull(method0);
      
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      FunctionObject functionObject0 = new FunctionObject("@]*+", method0, nativeArray0);
      assertEquals(9, methodArray0.length);
      assertEquals(0, functionObject0.getLength());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test27()  throws Throwable  {
      Class<NativeArray> class0 = NativeArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "execIdCall");
      NativeObject nativeObject0 = new NativeObject();
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("execIdCall", method0, nativeObject0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"com.google.javascript.rhino.head.Context\" in method \"execIdCall\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NativeString nativeString0 = new NativeString("error reporter");
      Class<BaseFunction> class0 = BaseFunction.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) nativeString0, class0, true, true);
      String string0 = (String)functionObject0.getInstanceIdValue(3);
      assertEquals("Function", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeArray0);
      functionObject0.addAsConstructor(nativeArray0, nativeArray0);
      assertEquals(9, methodArray0.length);
      assertEquals(9L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeArray0);
      int int0 = functionObject0.getLength();
      assertEquals(9, methodArray0.length);
      assertEquals(0, int0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 23:47:20 GMT 2019
 */

package org.apache.commons.math.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.DummyStepInterpolator;
import org.apache.commons.math.ode.SwitchState;
import org.apache.commons.math.ode.SwitchingFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SwitchState_ESTest extends SwitchState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn((-2831.389077772199), (double)913, (-2831.389077772199), 0.0, 0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 913, 913, 913);
      double[] doubleArray0 = new double[8];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      switchState0.evaluateStep(dummyStepInterpolator0);
      assertFalse(switchState0.stop());
      
      switchState0.stepAccepted((-2831.389077772199), doubleArray0);
      boolean boolean0 = switchState0.reset(0.0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, 886, 886, 886);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = switchState0.reset(886, doubleArray0);
      assertFalse(boolean0);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertFalse(switchState0.stop());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2781.232306), (double)915, (-2781.232306), 0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[4];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      SwitchState switchState0 = new SwitchState(switchingFunction0, 0.0, 0.0, 915);
      boolean boolean0 = switchState0.evaluateStep(dummyStepInterpolator0);
      boolean boolean1 = switchState0.reset((-1495.2043315), doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn((-2781.232306), (double)915, (-2781.232306), 0.0, 0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[4];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      SwitchState switchState0 = new SwitchState(switchingFunction0, 0.0, 0.0, 915);
      switchState0.evaluateStep(dummyStepInterpolator0);
      assertFalse(switchState0.stop());
      
      switchState0.stepAccepted(915.0, doubleArray0);
      boolean boolean0 = switchState0.stop();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, 0.0, 0.0, 915);
      boolean boolean0 = switchState0.stop();
      assertFalse(boolean0);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn((-2841.969794030993), (double)913, (-2841.969794030993), 0.0, 0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 913, 913, 913);
      double[] doubleArray0 = new double[7];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      switchState0.evaluateStep(dummyStepInterpolator0);
      assertFalse(switchState0.stop());
      
      switchState0.stepAccepted(0.0, doubleArray0);
      boolean boolean0 = switchState0.reset(2, doubleArray0);
      assertTrue(boolean0);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2831.389077772199), (double)913, (-2831.389077772199), 0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 913, 913, 913);
      double[] doubleArray0 = new double[8];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      switchState0.stepAccepted((-2831.389077772199), doubleArray0);
      // Undeclared exception!
      try { 
        switchState0.evaluateStep(dummyStepInterpolator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Function values at endpoints do not have different signs.  Endpoints: [-2831.389077772199,NaN]  Values: [-2831.389077772199,0.0]
         //
         verifyException("org.apache.commons.math.analysis.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)913, (double)913).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 913, 913, 913);
      double[] doubleArray0 = new double[11];
      switchState0.stepAccepted(913, doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      dummyStepInterpolator0.storeTime(1213.196021578);
      switchState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(2126.196021578, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)856).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 856, 856, 856);
      switchState0.reinitializeBegin(856, (double[]) null);
      assertFalse(switchState0.stop());
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.072901286002715)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 856, 856, 856);
      switchState0.reinitializeBegin(856, (double[]) null);
      assertFalse(switchState0.stop());
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, 0.0, 0.0, 0);
      double double0 = switchState0.getEventTime();
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(switchState0.stop());
  }
}

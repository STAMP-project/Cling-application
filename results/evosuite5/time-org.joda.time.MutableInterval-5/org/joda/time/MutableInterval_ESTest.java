/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 21:42:47 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.Months;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.chrono.EthiopicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MutableInterval_ESTest extends MutableInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = new Duration(1015L);
      MutableInterval mutableInterval0 = new MutableInterval(duration0, (ReadableInstant) null);
      mutableInterval0.setPeriodBeforeEnd((ReadablePeriod) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = new Duration((-3444L), 3489L);
      MutableInterval mutableInterval0 = new MutableInterval(duration0, (ReadableInstant) null);
      Months months0 = Months.TWELVE;
      mutableInterval0.setPeriodBeforeEnd(months0);
      assertEquals(1360873281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = new Duration(1015L, 2363L);
      MutableInterval mutableInterval0 = new MutableInterval(duration0, (ReadableInstant) null);
      Weeks weeks0 = Weeks.TWO;
      mutableInterval0.setPeriodAfterStart(weeks0);
      assertEquals(1393618879972L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = new Duration((-3444L), 3489L);
      MutableInterval mutableInterval0 = new MutableInterval(duration0, (ReadableInstant) null);
      Instant instant0 = Instant.now();
      mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) instant0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Duration duration0 = new Duration((-3444L), 3489L);
      MutableInterval mutableInterval0 = new MutableInterval(duration0, (ReadableInstant) null);
      mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      MutableInterval mutableInterval0 = new MutableInterval(dateMidnight0, dateMidnight0);
      mutableInterval0.setInterval((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      assertEquals(1392332400000L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      // Undeclared exception!
      try { 
        mutableInterval0.setInterval((ReadableInterval) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Interval must not be null
         //
         verifyException("org.joda.time.MutableInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = new Duration((-3444L), 3489L);
      MutableInterval mutableInterval0 = new MutableInterval(duration0, (ReadableInstant) null);
      Interval interval0 = new Interval((-1L), 0L);
      mutableInterval0.setInterval((ReadableInterval) interval0);
      assertEquals(0L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      assertEquals(0L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-2207L), 647L);
      Duration duration0 = Duration.standardHours((-1L));
      // Undeclared exception!
      try { 
        mutableInterval0.setDurationAfterStart((ReadableDuration) duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      mutableInterval0.setDurationAfterStart(0L);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-2207L), 647L);
      DateTime dateTime0 = mutableInterval0.getEnd();
      mutableInterval0.setEnd(dateTime0);
      assertEquals(647L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L, (DateTimeZone) null);
      Duration duration0 = new Duration((-1L), (-1L));
      MutableInterval mutableInterval0 = new MutableInterval(dateMidnight0, duration0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      assertEquals(0L, duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Months months0 = Months.TWELVE;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, months0);
      assertEquals(1423945281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-2207L), 647L);
      DateTime dateTime0 = mutableInterval0.getEnd();
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      MutableInterval mutableInterval1 = new MutableInterval(period0, dateTime0);
      assertEquals(647L, mutableInterval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval("_[zH{16n|5t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: _[zH{16n|5t
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateMidnight0, dateMidnight0);
      Duration duration0 = mutablePeriod0.toDurationTo(dateMidnight0);
      MutableInterval mutableInterval0 = new MutableInterval(duration0, dateMidnight0);
      mutableInterval0.setStart(dateMidnight0);
      assertEquals(1392332400000L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      mutableInterval0.setDurationBeforeEnd(0L);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = new Duration((-3444L), 3489L);
      MutableInterval mutableInterval0 = new MutableInterval(duration0, (ReadableInstant) null);
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      assertNotSame(mutableInterval0, mutableInterval1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      MutableInterval mutableInterval0 = new MutableInterval((Object) null, ethiopicChronology0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableInterval.parse("Must supply a chronology");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: Must supply a chronology
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = new Duration(1015L, 2363L);
      MutableInterval mutableInterval0 = new MutableInterval(duration0, (ReadableInstant) null);
      mutableInterval0.setPeriodAfterStart((ReadablePeriod) null);
      assertEquals(1392409279972L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = new Duration((-3444L), 3489L);
      MutableInterval mutableInterval0 = new MutableInterval(duration0, (ReadableInstant) null);
      MutableInterval mutableInterval1 = mutableInterval0.toMutableInterval();
      assertTrue(mutableInterval1.equals((Object)mutableInterval0));
  }
}

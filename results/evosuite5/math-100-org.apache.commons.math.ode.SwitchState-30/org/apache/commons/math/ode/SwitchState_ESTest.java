/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 12:08:19 GMT 2019
 */

package org.apache.commons.math.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.DummyStepInterpolator;
import org.apache.commons.math.ode.SwitchState;
import org.apache.commons.math.ode.SwitchingFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SwitchState_ESTest extends SwitchState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn((-9.1479343081136), 235.2316639, (-9.1479343081136), 235.2316639, (double)2).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 1303, 1303, 1303);
      double[] doubleArray0 = new double[11];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      switchState0.stepAccepted(1303, doubleArray0);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.stepAccepted(1303, doubleArray0);
      assertEquals(1303.0, switchState0.getEventTime(), 0.01);
      
      boolean boolean0 = switchState0.reset((-9.1479343081136), doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn((-9.1479343081136), 235.2316639, (-9.1479343081136), 235.2316639, 235.2316639).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 1303, 1303, 1303);
      double[] doubleArray0 = new double[11];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      switchState0.stepAccepted(1303, doubleArray0);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.stepAccepted(1303, doubleArray0);
      assertEquals(1303.0, switchState0.getEventTime(), 0.01);
      
      boolean boolean0 = switchState0.reset(690.519, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, 1303, 1303, 1303);
      double[] doubleArray0 = new double[11];
      boolean boolean0 = switchState0.reset((-9.1479343081136), doubleArray0);
      assertFalse(boolean0);
      assertFalse(switchState0.stop());
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-9.1479343081136), 235.2316639, (-9.1479343081136), 235.2316639, (double)2).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 1303, 1303, 1303);
      double[] doubleArray0 = new double[11];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      switchState0.stepAccepted(1303, doubleArray0);
      switchState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(1303.0, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      
      boolean boolean0 = switchState0.reset((-9.1479343081136), doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn((-9.1479343081136), 235.2316639, (-9.1479343081136), 235.2316639, 0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 1303, 1303, 1303);
      double[] doubleArray0 = new double[11];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      switchState0.stepAccepted(1303, doubleArray0);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.stepAccepted(1303, doubleArray0);
      boolean boolean0 = switchState0.stop();
      assertEquals(1303.0, switchState0.getEventTime(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, 1303, 1303, 1303);
      boolean boolean0 = switchState0.stop();
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, (-1941), (-1941), (-1941));
      double[] doubleArray0 = new double[0];
      switchState0.stepAccepted((-1941), doubleArray0);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertFalse(switchState0.stop());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn((-9.1479343081136), 235.2316639, (-9.1479343081136), 235.2316639, 235.2316639).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 1303, 1303, 1303);
      double[] doubleArray0 = new double[11];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      switchState0.stepAccepted(1303, doubleArray0);
      boolean boolean0 = switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.stepAccepted(1303, doubleArray0);
      assertEquals(1303.0, switchState0.getEventTime(), 0.01);
      
      boolean boolean1 = switchState0.evaluateStep(dummyStepInterpolator0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-7.657459583919715), 234.13229898562705, (-7.657459583919715), 234.13229898562705, (double)21).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 21, 21, 21);
      double[] doubleArray0 = new double[4];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      dummyStepInterpolator0.storeTime(234.13229898562705);
      switchState0.stepAccepted(21, doubleArray0);
      boolean boolean0 = switchState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(31.5, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 423, 423, 423);
      switchState0.reinitializeBegin(423, (double[]) null);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertFalse(switchState0.stop());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-26.041666666666668)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 423, 423, 423);
      switchState0.reinitializeBegin(423, (double[]) null);
      assertFalse(switchState0.stop());
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SwitchState switchState0 = new SwitchState((SwitchingFunction) null, 6.0, 6.0, 5);
      double double0 = switchState0.getEventTime();
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(switchState0.stop());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-8.636442976435559), 235.2316639, (-8.636442976435559), 235.2316639, (double)21).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 21, 21, 21);
      double[] doubleArray0 = new double[11];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      try { 
        switchState0.evaluateStep(dummyStepInterpolator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Maximal number of iterations (21) exceeded
         //
         verifyException("org.apache.commons.math.analysis.BrentSolver", e);
      }
  }
}

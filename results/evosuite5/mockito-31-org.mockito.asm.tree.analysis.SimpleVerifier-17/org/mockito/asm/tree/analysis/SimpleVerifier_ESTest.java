/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 12:52:26 GMT 2019
 */

package org.mockito.asm.tree.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.Type;
import org.mockito.asm.tree.JumpInsnNode;
import org.mockito.asm.tree.LabelNode;
import org.mockito.asm.tree.LdcInsnNode;
import org.mockito.asm.tree.TypeInsnNode;
import org.mockito.asm.tree.analysis.BasicValue;
import org.mockito.asm.tree.analysis.SimpleVerifier;
import org.mockito.asm.tree.analysis.SourceValue;
import org.mockito.asm.tree.analysis.Value;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SimpleVerifier_ESTest extends SimpleVerifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Type type0 = Type.getObjectType("[C");
      Class<String> class0 = String.class;
      Type type1 = Type.getType(class0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("[C");
      Type type2 = Type.BYTE_TYPE;
      SimpleVerifier simpleVerifier0 = new SimpleVerifier(type2, type0, linkedList0, true);
      // Undeclared exception!
      try { 
        simpleVerifier0.isAssignableFrom(type1, type2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.mockito.asm.Type
         //
         verifyException("org.mockito.asm.tree.analysis.SimpleVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Type type0 = Type.getReturnType("[C");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Class<Type> class0 = Type.class;
      Type type1 = Type.getType(class0);
      Type type2 = Type.VOID_TYPE;
      SimpleVerifier simpleVerifier0 = new SimpleVerifier(type2, type0, linkedList0, true);
      boolean boolean0 = simpleVerifier0.isAssignableFrom(type1, type2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SimpleVerifier simpleVerifier0 = new SimpleVerifier(type0, type0, linkedList0, false);
      Type type1 = simpleVerifier0.getSuperClass(type0);
      assertEquals(3, Type.BYTE);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Type type0 = Type.getObjectType("[C");
      Class<Integer> class0 = Integer.class;
      Type type1 = Type.getType(class0);
      BasicValue basicValue0 = new BasicValue(type0);
      BasicValue basicValue1 = new BasicValue(type1);
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue2 = (BasicValue)simpleVerifier0.merge(basicValue1, basicValue0);
      assertNotSame(basicValue2, basicValue0);
      assertFalse(basicValue2.equals((Object)basicValue0));
      assertNotSame(basicValue2, basicValue1);
      assertTrue(basicValue2.isReference());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Type type0 = Type.getReturnType("[C");
      Class<BasicValue> class0 = BasicValue.class;
      Type type1 = Type.getType(class0);
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(type0);
      SimpleVerifier simpleVerifier0 = new SimpleVerifier(type0, type1, true);
      Value value0 = simpleVerifier0.newValue(type0);
      Value value1 = simpleVerifier0.newOperation(ldcInsnNode0);
      BasicValue basicValue0 = (BasicValue)simpleVerifier0.merge(value0, value1);
      assertNotSame(basicValue0, value0);
      assertTrue(basicValue0.isReference());
      assertNotSame(basicValue0, value1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Type type0 = Type.getReturnType("[C");
      BasicValue basicValue0 = new BasicValue(type0);
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue1 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = simpleVerifier0.merge(basicValue1, basicValue0);
      assertSame(value0, basicValue1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Type type0 = Type.getType("Lnull;");
      Class<BasicValue> class0 = BasicValue.class;
      Type type1 = Type.getType(class0);
      BasicValue basicValue0 = new BasicValue(type0);
      BasicValue basicValue1 = new BasicValue(type1);
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      Value value0 = simpleVerifier0.merge(basicValue1, basicValue0);
      assertSame(value0, basicValue1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Type type0 = Type.INT_TYPE;
      Type type1 = Type.getReturnType("Lnull;");
      SimpleVerifier simpleVerifier0 = new SimpleVerifier(type0, type1, false);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = simpleVerifier0.newValue(type1);
      Value value1 = simpleVerifier0.merge(value0, basicValue0);
      assertSame(value1, basicValue0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      Type type0 = Type.BOOLEAN_TYPE;
      BasicValue basicValue0 = new BasicValue(type0);
      BasicValue basicValue1 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicValue basicValue2 = (BasicValue)simpleVerifier0.merge(basicValue1, basicValue0);
      assertFalse(basicValue2.isReference());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = new BasicValue((Type) null);
      BasicValue basicValue1 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicValue basicValue2 = (BasicValue)simpleVerifier0.merge(basicValue1, basicValue0);
      assertFalse(basicValue2.isReference());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicValue basicValue1 = (BasicValue)BasicValue.INT_VALUE;
      Value value0 = simpleVerifier0.merge(basicValue1, basicValue0);
      assertNotSame(value0, basicValue1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Type type0 = Type.getReturnType("[C");
      Class<BasicValue> class0 = BasicValue.class;
      Type type1 = Type.getType(class0);
      BasicValue basicValue0 = new BasicValue(type1);
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(type0);
      SimpleVerifier simpleVerifier0 = new SimpleVerifier(type0, type1, true);
      Value value0 = simpleVerifier0.newOperation(ldcInsnNode0);
      BasicValue basicValue1 = (BasicValue)simpleVerifier0.merge(basicValue0, value0);
      assertNotSame(basicValue1, basicValue0);
      assertTrue(basicValue1.isReference());
      assertNotSame(basicValue1, value0);
      assertFalse(basicValue1.equals((Object)value0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicValue basicValue1 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = simpleVerifier0.merge(basicValue0, basicValue1);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Type type0 = Type.getReturnType("[C");
      Class<BasicValue> class0 = BasicValue.class;
      Type type1 = Type.getType(class0);
      BasicValue basicValue0 = new BasicValue(type1);
      SimpleVerifier simpleVerifier0 = new SimpleVerifier(type0, type1, true);
      Value value0 = simpleVerifier0.newValue(type0);
      Value value1 = simpleVerifier0.merge(value0, basicValue0);
      assertSame(value1, basicValue0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicValue basicValue1 = (BasicValue)simpleVerifier0.merge(basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      BasicValue basicValue1 = new BasicValue(type0);
      boolean boolean0 = simpleVerifier0.isSubTypeOf(basicValue0, basicValue1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      boolean boolean0 = simpleVerifier0.isSubTypeOf(basicValue0, basicValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue1 = (BasicValue)BasicValue.LONG_VALUE;
      boolean boolean0 = simpleVerifier0.isSubTypeOf(basicValue1, basicValue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      Type type0 = Type.BYTE_TYPE;
      BasicValue basicValue0 = new BasicValue(type0);
      // Undeclared exception!
      try { 
        simpleVerifier0.isSubTypeOf(basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error
         //
         verifyException("org.mockito.asm.tree.analysis.SimpleVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Type type0 = Type.getObjectType("[C");
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = new BasicValue(type0);
      boolean boolean0 = simpleVerifier0.isSubTypeOf(basicValue0, basicValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      boolean boolean0 = simpleVerifier0.isSubTypeOf(basicValue0, basicValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      Type type0 = Type.LONG_TYPE;
      Value value0 = simpleVerifier0.newValue(type0);
      boolean boolean0 = simpleVerifier0.isSubTypeOf(value0, value0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      boolean boolean0 = simpleVerifier0.isSubTypeOf(basicValue0, basicValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(3952, (LabelNode) null);
      jumpInsnNode0.setOpcode(1);
      Value value0 = simpleVerifier0.newOperation(jumpInsnNode0);
      boolean boolean0 = simpleVerifier0.isSubTypeOf(value0, value0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      boolean boolean0 = simpleVerifier0.isSubTypeOf(basicValue0, basicValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        simpleVerifier0.getElementValue(basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error
         //
         verifyException("org.mockito.asm.tree.analysis.SimpleVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Type type0 = Type.getObjectType("[C");
      BasicValue basicValue0 = new BasicValue(type0);
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue1 = (BasicValue)simpleVerifier0.getElementValue(basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(3952, (LabelNode) null);
      jumpInsnNode0.setOpcode(1);
      Value value0 = simpleVerifier0.newOperation(jumpInsnNode0);
      Value value1 = simpleVerifier0.getElementValue(value0);
      assertSame(value1, value0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        simpleVerifier0.getElementValue(basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error
         //
         verifyException("org.mockito.asm.tree.analysis.SimpleVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Type type0 = Type.getObjectType("[C");
      BasicValue basicValue0 = new BasicValue(type0);
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      boolean boolean0 = simpleVerifier0.isArrayValue(basicValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      Type type0 = Type.getType("Lnull;");
      Value value0 = simpleVerifier0.newValue(type0);
      boolean boolean0 = simpleVerifier0.isArrayValue(value0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Type type0 = Type.getObjectType("rreY");
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      Value value0 = simpleVerifier0.newValue(type0);
      boolean boolean0 = simpleVerifier0.isArrayValue(value0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      boolean boolean0 = simpleVerifier0.isArrayValue(basicValue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      Type type0 = Type.getReturnType("[F");
      BasicValue basicValue0 = (BasicValue)simpleVerifier0.newValue(type0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(53, "L>*[F;");
      SourceValue sourceValue0 = new SourceValue(6, typeInsnNode0);
      // Undeclared exception!
      try { 
        simpleVerifier0.binaryOperation(typeInsnNode0, sourceValue0, sourceValue0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.analysis.SourceValue cannot be cast to org.mockito.asm.tree.analysis.BasicValue
         //
         verifyException("org.mockito.asm.tree.analysis.SimpleVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Type type0 = Type.getObjectType("[Z");
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)simpleVerifier0.newValue(type0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)simpleVerifier0.newValue((Type) null);
      assertFalse(basicValue0.isReference());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 06:55:19 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.CompilerEnvirons;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.Node;
import com.google.javascript.rhino.head.Parser;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.ast.ArrayLiteral;
import com.google.javascript.rhino.head.ast.AstNode;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.BreakStatement;
import com.google.javascript.rhino.head.ast.ElementGet;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.LabeledStatement;
import com.google.javascript.rhino.head.ast.Name;
import com.google.javascript.rhino.head.ast.ObjectLiteral;
import com.google.javascript.rhino.head.ast.ObjectProperty;
import com.google.javascript.rhino.head.ast.ParenthesizedExpression;
import com.google.javascript.rhino.head.ast.PropertyGet;
import com.google.javascript.rhino.head.ast.Scope;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      Name name0 = new Name();
      assertNotNull(name0);
      assertNull(name0.getString());
      assertEquals(0, name0.length());
      assertNull(name0.getJsDoc());
      assertEquals((-1), name0.getLineno());
      assertEquals(1, name0.getLength());
      assertEquals("39", name0.toString());
      assertEquals((-1), name0.getPosition());
      assertEquals((-1), name0.getAbsolutePosition());
      assertFalse(name0.isLocalName());
      assertNull(name0.getIdentifier());
      assertEquals(0, name0.depth());
      assertFalse(name0.hasChildren());
      assertEquals(39, name0.getType());
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      
      ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression(1, 15, name0);
      assertNotNull(parenthesizedExpression0);
      assertNull(name0.getString());
      assertEquals(0, name0.length());
      assertNull(name0.getJsDoc());
      assertEquals((-1), name0.getLineno());
      assertEquals(1, name0.getLength());
      assertEquals(1, name0.depth());
      assertEquals("39", name0.toString());
      assertEquals((-2), name0.getPosition());
      assertEquals((-1), name0.getAbsolutePosition());
      assertFalse(name0.isLocalName());
      assertNull(name0.getIdentifier());
      assertFalse(name0.hasChildren());
      assertEquals(39, name0.getType());
      assertEquals(0, parenthesizedExpression0.depth());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(1, parenthesizedExpression0.getPosition());
      assertEquals(1, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(87, parenthesizedExpression0.getType());
      assertFalse(parenthesizedExpression0.hasChildren());
      assertEquals(15, parenthesizedExpression0.getLength());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals((-1), parenthesizedExpression0.getLineno());
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.RIGHT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      
      parser0.markDestructuring(parenthesizedExpression0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertNull(name0.getString());
      assertEquals(0, name0.length());
      assertNull(name0.getJsDoc());
      assertEquals((-1), name0.getLineno());
      assertEquals(1, name0.getLength());
      assertEquals(1, name0.depth());
      assertEquals("39", name0.toString());
      assertEquals((-2), name0.getPosition());
      assertEquals((-1), name0.getAbsolutePosition());
      assertFalse(name0.isLocalName());
      assertNull(name0.getIdentifier());
      assertFalse(name0.hasChildren());
      assertEquals(39, name0.getType());
      assertEquals(0, parenthesizedExpression0.depth());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(1, parenthesizedExpression0.getPosition());
      assertEquals(1, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(87, parenthesizedExpression0.getType());
      assertFalse(parenthesizedExpression0.hasChildren());
      assertEquals(15, parenthesizedExpression0.getLength());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals((-1), parenthesizedExpression0.getLineno());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.RIGHT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(65536, 65536);
      assertNotNull(arrayLiteral0);
      assertEquals(65536, arrayLiteral0.getAbsolutePosition());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals(65536, arrayLiteral0.getLength());
      assertEquals(65, arrayLiteral0.getType());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(65536, arrayLiteral0.getPosition());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      
      parser0.markDestructuring(arrayLiteral0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(65536, arrayLiteral0.getAbsolutePosition());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertTrue(arrayLiteral0.isDestructuring());
      assertEquals(65536, arrayLiteral0.getLength());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(65536, arrayLiteral0.getPosition());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression();
      assertNotNull(parenthesizedExpression0);
      assertEquals((-1), parenthesizedExpression0.getLineno());
      assertEquals((-1), parenthesizedExpression0.getAbsolutePosition());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(87, parenthesizedExpression0.getType());
      assertFalse(parenthesizedExpression0.hasChildren());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals((-1), parenthesizedExpression0.getPosition());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      
      AstNode astNode0 = parser0.removeParens(parenthesizedExpression0);
      assertNull(astNode0);
      assertEquals((-1), parenthesizedExpression0.getLineno());
      assertEquals((-1), parenthesizedExpression0.getAbsolutePosition());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(87, parenthesizedExpression0.getType());
      assertFalse(parenthesizedExpression0.hasChildren());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals((-1), parenthesizedExpression0.getPosition());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Name name0 = new Name();
      assertNotNull(name0);
      assertEquals((-1), name0.getAbsolutePosition());
      assertEquals("39", name0.toString());
      assertFalse(name0.isLocalName());
      assertFalse(name0.hasChildren());
      assertEquals(39, name0.getType());
      assertEquals(0, name0.depth());
      assertEquals((-1), name0.getPosition());
      assertEquals((-1), name0.getLineno());
      assertNull(name0.getString());
      assertNull(name0.getJsDoc());
      assertNull(name0.getIdentifier());
      assertEquals(0, name0.length());
      assertEquals(1, name0.getLength());
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      parser0.checkMutableReference(name0);
      assertEquals((-1), name0.getAbsolutePosition());
      assertEquals("39", name0.toString());
      assertFalse(name0.isLocalName());
      assertFalse(name0.hasChildren());
      assertEquals(39, name0.getType());
      assertEquals(0, name0.depth());
      assertEquals((-1), name0.getPosition());
      assertEquals((-1), name0.getLineno());
      assertNull(name0.getString());
      assertNull(name0.getJsDoc());
      assertNull(name0.getIdentifier());
      assertEquals(0, name0.length());
      assertEquals(1, name0.getLength());
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(65536, Parser.ARGC_LIMIT);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(65536, 65536);
      assertNotNull(arrayLiteral0);
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(65536, arrayLiteral0.getAbsolutePosition());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(0, arrayLiteral0.depth());
      assertFalse(arrayLiteral0.hasChildren());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(65536, arrayLiteral0.getLength());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(65536, arrayLiteral0.getPosition());
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      
      AstRoot astRoot0 = parser0.parse("msg.no.curly.let", "M:kpE16j:@nR", 2);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(2, astRoot0.getLineno());
      assertEquals(16, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("M:kpE16j:@nR", astRoot0.getSourceName());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(2, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(2, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(5, Node.CASEARRAY_PROP);
      
      // Undeclared exception!
      try { 
        parser0.simpleAssignment(arrayLiteral0, astRoot0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION: ts.cursor=16, ts.tokenBeg=15, currentToken=0
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      Name name0 = new Name(65536);
      assertNotNull(name0);
      assertEquals(39, name0.getType());
      assertEquals(65536, name0.getAbsolutePosition());
      assertEquals(65536, name0.getPosition());
      assertNull(name0.getJsDoc());
      assertFalse(name0.isLocalName());
      assertEquals(1, name0.getLength());
      assertNull(name0.getIdentifier());
      assertEquals(0, name0.length());
      assertEquals("39", name0.toString());
      assertFalse(name0.hasChildren());
      assertEquals((-1), name0.getLineno());
      assertEquals(0, name0.depth());
      assertNull(name0.getString());
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      
      Node node0 = parser0.simpleAssignment(name0, name0);
      assertNotNull(node0);
      assertEquals(65536, name0.getAbsolutePosition());
      assertEquals(65536, name0.getPosition());
      assertNull(name0.getJsDoc());
      assertFalse(name0.isLocalName());
      assertEquals(1, name0.getLength());
      assertNull(name0.getIdentifier());
      assertEquals(0, name0.length());
      assertEquals("49", name0.toString());
      assertEquals(49, name0.getType());
      assertFalse(name0.hasChildren());
      assertEquals((-1), name0.getLineno());
      assertEquals(0, name0.depth());
      assertNull(name0.getString());
      assertEquals("8", node0.toString());
      assertTrue(node0.hasChildren());
      assertNull(node0.getJsDoc());
      assertEquals((-1), node0.getLineno());
      assertEquals(8, node0.getType());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      PropertyGet propertyGet0 = new PropertyGet(148);
      assertNotNull(propertyGet0);
      assertNull(propertyGet0.getJsDoc());
      assertFalse(propertyGet0.hasChildren());
      assertEquals(148, propertyGet0.getPosition());
      assertEquals((-1), propertyGet0.getOperatorPosition());
      assertEquals(33, propertyGet0.getType());
      assertEquals(33, propertyGet0.getOperator());
      assertEquals((-1), propertyGet0.getLineno());
      assertEquals("33", propertyGet0.toString());
      assertEquals(1, propertyGet0.getLength());
      assertEquals(148, propertyGet0.getAbsolutePosition());
      assertEquals(0, propertyGet0.depth());
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      
      // Undeclared exception!
      try { 
        parser0.simpleAssignment(propertyGet0, propertyGet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      BreakStatement breakStatement0 = new BreakStatement(786);
      assertNotNull(breakStatement0);
      assertEquals(1, breakStatement0.getLength());
      assertNull(breakStatement0.getJsDoc());
      assertEquals((-1), breakStatement0.getLineno());
      assertEquals(0, breakStatement0.depth());
      assertEquals(120, breakStatement0.getType());
      assertEquals(786, breakStatement0.getAbsolutePosition());
      assertEquals(786, breakStatement0.getPosition());
      assertEquals("120", breakStatement0.toString());
      assertFalse(breakStatement0.hasChildren());
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      
      // Undeclared exception!
      try { 
        parser0.destructuringAssignmentHelper(786, breakStatement0, (Node) null, "i");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      ObjectLiteral objectLiteral0 = new ObjectLiteral(65536, 65536);
      assertNotNull(objectLiteral0);
      assertEquals(65536, objectLiteral0.getAbsolutePosition());
      assertEquals((-1), objectLiteral0.getLineno());
      assertEquals(65536, objectLiteral0.getLength());
      assertEquals(0, objectLiteral0.depth());
      assertEquals("66", objectLiteral0.toString());
      assertNull(objectLiteral0.getJsDoc());
      assertFalse(objectLiteral0.hasChildren());
      assertFalse(objectLiteral0.isDestructuring());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(65536, objectLiteral0.getPosition());
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      
      ObjectProperty objectProperty0 = new ObjectProperty(8, 10);
      assertNotNull(objectProperty0);
      assertFalse(objectProperty0.hasChildren());
      assertNull(objectProperty0.getJsDoc());
      assertEquals("103", objectProperty0.toString());
      assertEquals(0, objectProperty0.depth());
      assertEquals((-1), objectProperty0.getOperatorPosition());
      assertFalse(objectProperty0.isGetter());
      assertEquals((-1), objectProperty0.getLineno());
      assertEquals(103, objectProperty0.getOperator());
      assertEquals(103, objectProperty0.getType());
      assertEquals(10, objectProperty0.getLength());
      assertFalse(objectProperty0.isSetter());
      assertEquals(8, objectProperty0.getPosition());
      assertEquals(8, objectProperty0.getAbsolutePosition());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      
      objectLiteral0.addElement(objectProperty0);
      assertEquals(65536, objectLiteral0.getAbsolutePosition());
      assertEquals((-1), objectLiteral0.getLineno());
      assertEquals(65536, objectLiteral0.getLength());
      assertEquals(0, objectLiteral0.depth());
      assertEquals("66", objectLiteral0.toString());
      assertNull(objectLiteral0.getJsDoc());
      assertFalse(objectLiteral0.hasChildren());
      assertFalse(objectLiteral0.isDestructuring());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(65536, objectLiteral0.getPosition());
      assertFalse(objectProperty0.hasChildren());
      assertEquals(1, objectProperty0.depth());
      assertNull(objectProperty0.getJsDoc());
      assertEquals("103", objectProperty0.toString());
      assertEquals((-1), objectProperty0.getOperatorPosition());
      assertFalse(objectProperty0.isGetter());
      assertEquals((-1), objectProperty0.getLineno());
      assertEquals(103, objectProperty0.getOperator());
      assertEquals(103, objectProperty0.getType());
      assertEquals(10, objectProperty0.getLength());
      assertFalse(objectProperty0.isSetter());
      assertEquals((-65528), objectProperty0.getPosition());
      assertEquals(8, objectProperty0.getAbsolutePosition());
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      
      AstRoot astRoot0 = parser0.parse("msg.let.decl.not.in.block", "msg.let.decl.not.in.block", 0);
      assertNotNull(astRoot0);
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getLineno());
      assertEquals("msg.let.decl.not.in.block", astRoot0.getSourceName());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(25, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      
      NativeArray nativeArray0 = new NativeArray((-1998L));
      assertNotNull(nativeArray0);
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals((-1998L), nativeArray0.getLength());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertEquals((-1998L), nativeArray0.jsGet_length());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      // Undeclared exception!
      try { 
        parser0.destructuringObject(objectLiteral0, 13, "get", objectLiteral0, nativeArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION: ts.cursor=25, ts.tokenBeg=24, currentToken=0
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      ObjectLiteral objectLiteral0 = new ObjectLiteral(65536, 65536);
      assertNotNull(objectLiteral0);
      assertEquals(0, objectLiteral0.depth());
      assertEquals(65536, objectLiteral0.getPosition());
      assertFalse(objectLiteral0.hasChildren());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(65536, objectLiteral0.getLength());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(65536, objectLiteral0.getAbsolutePosition());
      assertEquals((-1), objectLiteral0.getLineno());
      assertFalse(objectLiteral0.isDestructuring());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.BOTH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      
      ObjectProperty objectProperty0 = new ObjectProperty(8, 10);
      assertNotNull(objectProperty0);
      assertFalse(objectProperty0.isGetter());
      assertEquals(8, objectProperty0.getPosition());
      assertEquals(0, objectProperty0.depth());
      assertNull(objectProperty0.getJsDoc());
      assertFalse(objectProperty0.isSetter());
      assertEquals((-1), objectProperty0.getLineno());
      assertEquals("103", objectProperty0.toString());
      assertEquals(8, objectProperty0.getAbsolutePosition());
      assertEquals(10, objectProperty0.getLength());
      assertFalse(objectProperty0.hasChildren());
      assertEquals(103, objectProperty0.getOperator());
      assertEquals(103, objectProperty0.getType());
      assertEquals((-1), objectProperty0.getOperatorPosition());
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      
      objectLiteral0.addElement(objectProperty0);
      assertEquals(0, objectLiteral0.depth());
      assertEquals(65536, objectLiteral0.getPosition());
      assertFalse(objectLiteral0.hasChildren());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(65536, objectLiteral0.getLength());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(65536, objectLiteral0.getAbsolutePosition());
      assertEquals((-1), objectLiteral0.getLineno());
      assertFalse(objectLiteral0.isDestructuring());
      assertEquals(66, objectLiteral0.getType());
      assertFalse(objectProperty0.isGetter());
      assertEquals((-65528), objectProperty0.getPosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(1, objectProperty0.depth());
      assertFalse(objectProperty0.isSetter());
      assertEquals((-1), objectProperty0.getLineno());
      assertEquals("103", objectProperty0.toString());
      assertEquals(8, objectProperty0.getAbsolutePosition());
      assertEquals(10, objectProperty0.getLength());
      assertFalse(objectProperty0.hasChildren());
      assertEquals(103, objectProperty0.getOperator());
      assertEquals(103, objectProperty0.getType());
      assertEquals((-1), objectProperty0.getOperatorPosition());
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.BOTH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      
      NativeArray nativeArray0 = new NativeArray((-1998L));
      assertNotNull(nativeArray0);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertEquals((-1998L), nativeArray0.getLength());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertEquals((-1998L), nativeArray0.jsGet_length());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      // Undeclared exception!
      try { 
        parser0.destructuringObject(objectLiteral0, 13, "get", objectLiteral0, nativeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral((-390), 65536);
      assertNotNull(arrayLiteral0);
      assertEquals(65, arrayLiteral0.getType());
      assertEquals((-390), arrayLiteral0.getPosition());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals("65", arrayLiteral0.toString());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals((-390), arrayLiteral0.getAbsolutePosition());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(0, arrayLiteral0.depth());
      assertFalse(arrayLiteral0.hasChildren());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(65536, arrayLiteral0.getLength());
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      
      Object[] objectArray0 = new Object[5];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      assertNotNull(nativeArray0);
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(5L, nativeArray0.getLength());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertEquals(5L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(5, objectArray0.length);
      
      boolean boolean0 = parser0.destructuringArray(arrayLiteral0, 154, "gwV)(%7j.d_J+MzxP/", arrayLiteral0, nativeArray0);
      assertEquals(65, arrayLiteral0.getType());
      assertEquals((-390), arrayLiteral0.getPosition());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals("65", arrayLiteral0.toString());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals((-390), arrayLiteral0.getAbsolutePosition());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(0, arrayLiteral0.depth());
      assertFalse(arrayLiteral0.hasChildren());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(65536, arrayLiteral0.getLength());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(5L, nativeArray0.getLength());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertEquals(5L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(boolean0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      assertNotNull(objectLiteral0);
      assertEquals("66", objectLiteral0.toString());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals((-1), objectLiteral0.getAbsolutePosition());
      assertFalse(objectLiteral0.isDestructuring());
      assertFalse(objectLiteral0.hasChildren());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals((-1), objectLiteral0.getPosition());
      assertEquals(0, objectLiteral0.depth());
      assertEquals(66, objectLiteral0.getType());
      assertEquals((-1), objectLiteral0.getLineno());
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      
      AstRoot astRoot0 = parser0.parse("PoX.eEm/k", "PoX.eEm/k", 27);
      assertNotNull(astRoot0);
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(27, astRoot0.getBaseLineno());
      assertEquals("PoX.eEm/k", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(27, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(27, astRoot0.getEndLineno());
      assertEquals(9, astRoot0.getLength());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      
      Scope scope0 = (Scope)parser0.destructuringAssignmentHelper((-488), objectLiteral0, objectLiteral0, "PoX.eEm/k");
      assertNotNull(scope0);
      assertEquals("66", objectLiteral0.toString());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals((-1), objectLiteral0.getAbsolutePosition());
      assertFalse(objectLiteral0.isDestructuring());
      assertFalse(objectLiteral0.hasChildren());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals((-1), objectLiteral0.getPosition());
      assertEquals(0, objectLiteral0.depth());
      assertEquals(66, objectLiteral0.getType());
      assertEquals((-1), objectLiteral0.getLineno());
      assertEquals("158", scope0.toString());
      assertNull(scope0.getJsDoc());
      assertEquals(0, scope0.depth());
      assertEquals((-1), scope0.getPosition());
      assertEquals((-1), scope0.getLineno());
      assertEquals(158, scope0.getType());
      assertEquals(1, scope0.getLength());
      assertEquals((-1), scope0.getAbsolutePosition());
      assertTrue(scope0.hasChildren());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      assertNotNull(arrayLiteral0);
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals((-1), arrayLiteral0.getPosition());
      assertEquals(65, arrayLiteral0.getType());
      assertFalse(arrayLiteral0.isDestructuring());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals((-1), arrayLiteral0.getAbsolutePosition());
      assertEquals(0, arrayLiteral0.getSize());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("msg.return.inconsistent", "msg.return.inconsistent", 1);
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertFalse(astRoot0.isInStrictMode());
      assertTrue(astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("msg.return.inconsistent", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(23, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      
      Scope scope0 = (Scope)parser0.destructuringAssignmentHelper(17, arrayLiteral0, arrayLiteral0, "msg.return.inconsistent");
      assertNotNull(scope0);
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals((-1), arrayLiteral0.getPosition());
      assertEquals(65, arrayLiteral0.getType());
      assertFalse(arrayLiteral0.isDestructuring());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals((-1), arrayLiteral0.getAbsolutePosition());
      assertEquals(0, arrayLiteral0.getSize());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(1, scope0.getLength());
      assertEquals((-1), scope0.getAbsolutePosition());
      assertEquals((-1), scope0.getLineno());
      assertEquals(158, scope0.getType());
      assertTrue(scope0.hasChildren());
      assertEquals((-1), scope0.getPosition());
      assertNull(scope0.getJsDoc());
      assertEquals("158", scope0.toString());
      assertEquals(0, scope0.depth());
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("/", "s{V&OS=G0dn'/xh*", 11);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(11, astRoot0.getEndLineno());
      assertEquals(11, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals("s{V&OS=G0dn'/xh*", astRoot0.getSourceName());
      assertEquals(11, astRoot0.getBaseLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals((-1), astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      compilerEnvirons0.setIdeMode(false);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      
      // Undeclared exception!
      try { 
        parser0.parse("i!@|FMG*Ch$`^/UoZ", "i!@|FMG*Ch$`^/UoZ", 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      parser0.nestingOfFunction = (-908);
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      
      // Undeclared exception!
      try { 
        parser0.setIsGenerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      parser0.setIsGenerator();
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(65536, Parser.ARGC_LIMIT);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      parser0.nestingOfFunction = (-315);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      
      // Undeclared exception!
      try { 
        parser0.setRequiresActivation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      parser0.setRequiresActivation();
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(65536, Parser.ARGC_LIMIT);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("$d>({M-?", "$d>({M-?", 65536);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing : after property id ($d>({M-?#65536)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("                                                                                            []");
      assertNotNull(stringReader0);
      
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "                                                                                            []", 2);
      assertNotNull(astRoot0);
      assertNull(astRoot0.getJsDoc());
      assertEquals(94, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertTrue(astRoot0.hasChildren());
      assertEquals("                                                                                            []", astRoot0.getSourceName());
      assertEquals(2, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(2, astRoot0.getBaseLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(2, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      
      ElementGet elementGet0 = new ElementGet(9, 1);
      assertNotNull(elementGet0);
      assertEquals(9, elementGet0.getPosition());
      assertEquals((-1), elementGet0.getLb());
      assertFalse(elementGet0.hasChildren());
      assertEquals(36, elementGet0.getType());
      assertEquals(0, elementGet0.depth());
      assertEquals((-1), elementGet0.getRb());
      assertEquals("36", elementGet0.toString());
      assertEquals(9, elementGet0.getAbsolutePosition());
      assertNull(elementGet0.getJsDoc());
      assertEquals(1, elementGet0.getLength());
      assertEquals((-1), elementGet0.getLineno());
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      
      // Undeclared exception!
      try { 
        parser0.destructuringAssignmentHelper(2, elementGet0, astRoot0, "                                                                                            []");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("[U-_4CU]{", "while", (-2766));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2766
         //
         verifyException("com.google.javascript.rhino.head.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("[native code, arity=", "[native code, arity=", 3);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, astRoot0.getFunctionCount());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(3, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertTrue(astRoot0.hasChildren());
      assertEquals(3, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals("[native code, arity=", astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(3, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("/=", (String) null, (-2467));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2467
         //
         verifyException("com.google.javascript.rhino.head.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("(new Boolean(true))", "", 3750);
      assertNotNull(astRoot0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(3750, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(3750, astRoot0.getLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(3750, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertTrue(astRoot0.hasChildren());
      assertEquals(19, astRoot0.getLength());
      assertEquals("", astRoot0.getSourceName());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("@*9", "@*9", (-4154));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      compilerEnvirons0.setReservedKeywordAsIdentifier(false);
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      
      AstRoot astRoot0 = parser0.parse("msg.no.curly.let", "M:kpE16j:@nR", 2);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertFalse(astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(2, astRoot0.getLineno());
      assertEquals(2, astRoot0.getBaseLineno());
      assertEquals(2, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(15, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals("M:kpE16j:@nR", astRoot0.getSourceName());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("msg.bad.throw.eol", "msg.bad.throw.eol", 993);
      assertNotNull(astRoot0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(993, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals("msg.bad.throw.eol", astRoot0.getSourceName());
      assertEquals(993, astRoot0.getLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(993, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(17, astRoot0.getLength());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isRecordingComments());
      
      compilerEnvirons0.setXmlAvailable(false);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isRecordingComments());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("msg.catch.unreachable", "msg.catch.unreachable", 65536);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals("msg.catch.unreachable", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(21, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      compilerEnvirons0.setXmlAvailable(false);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      
      AstRoot astRoot0 = parser0.parse(" where it expected String, Number, Boolean or Scriptable instance. Please check your code for missing Context.javaToJS() call.", "msg.bad.object.init", 1832);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(1832, astRoot0.getLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(1832, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals("msg.bad.object.init", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1832, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(126, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertTrue(astRoot0.hasChildren());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      StringReader stringReader0 = new StringReader("D[:,Hw9]ez");
      assertNotNull(stringReader0);
      
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "IkM9", 34);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(34, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(34, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(10, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertEquals(34, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals("IkM9", astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("(new|Date(", "&,j5.^Ldp!D<dk=p", 65536);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals("&,j5.^Ldp!D<dk=p", astRoot0.getSourceName());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertTrue(astRoot0.hasChildren());
      assertEquals(10, astRoot0.getLength());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(65536, astRoot0.getLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("(new Boolean(false))", "(new Boolean(false))", 65536);
      assertNotNull(astRoot0);
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(20, astRoot0.getLength());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals("(new Boolean(false))", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("$Cah6(G,S?Fc3<", "$Cah6(G,S?Fc3<", 2);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(2, astRoot0.getBaseLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(15, astRoot0.getLength());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(2, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals("$Cah6(G,S?Fc3<", astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(2, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("7W[{6Iz^<@pw", "7W[{6Iz^<@pw", 24);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(24, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(12, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(24, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("7W[{6Iz^<@pw", astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(24, astRoot0.getEndLineno());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("Ns++\"!", "~<{-PpVK(IkM9>3P;HU", 58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated string literal (~<{-PpVK(IkM9>3P;HU#58)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      compilerEnvirons0.setXmlAvailable(false);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isXmlAvailable());
      
      // Undeclared exception!
      try { 
        parser0.parse("~<{uPVK(IkM9>3P;BU", "~<{uPVK(IkM9>3P;BU", (-377));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("--3' -4+T1v4", "--3' -4+T1v4", 21);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(21, astRoot0.getBaseLineno());
      assertEquals(21, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(3, astRoot0.getLength());
      assertEquals("--3' -4+T1v4", astRoot0.getSourceName());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(21, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("typeof", "5CgKqd4\"4ie1&c", 20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file (5CgKqd4\"4ie1&c#20)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("+b_\"OJUO5", "+b_\"OJUO5", 56320);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated string literal (+b_\"OJUO5#56320)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Parser parser0 = new Parser(compilerEnvirons0, errorCollector0);
      assertNotNull(parser0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("~{-YpVK(Ik9>3PHU", "~{-YpVK(Ik9>3PHU", (-2036));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isRecordingComments());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("BMX+`%O>{& J\"kgFNkr", "BMX+`%O>{& J\"kgFNkr", 65536);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal character (BMX+`%O>{& J\"kgFNkr#65536)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("newChild had siblings in addChildBefore", "newChild had siblings in addChildBefore", 65536);
      assertNotNull(astRoot0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(39, astRoot0.getLength());
      assertEquals(0, astRoot0.getPosition());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals("newChild had siblings in addChildBefore", astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("gvtH: Q@C=M>=I1W", "gvtH: Q@C=M>=I1W", 65536);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(65536, astRoot0.getLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("gvtH: Q@C=M>=I1W", astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(16, astRoot0.getLength());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse(";O(f&!b0", ";O(f&!b0", 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ) after argument list (;O(f&!b0#8)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("r7z(&&(MYP)OM_zPi!$", "r7z(&&(MYP)OM_zPi!$", 1);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals("r7z(&&(MYP)OM_zPi!$", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(20, astRoot0.getLength());
      assertEquals(1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("YL<ErjHBv)?.*Dh<y:8", "@{N>", 7);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(7, astRoot0.getLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(19, astRoot0.getLength());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(7, astRoot0.getBaseLineno());
      assertEquals("@{N>", astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(7, astRoot0.getEndLineno());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("IiBbanv},/", "IiBbanv},/", 20);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getPosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals(20, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(20, astRoot0.getBaseLineno());
      assertEquals("IiBbanv},/", astRoot0.getSourceName());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(20, astRoot0.getLineno());
      assertEquals(8, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("zcR,&.?", "zcR,&.?", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (zcR,&.?#124)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("Dm", (String) null, 17);
      assertNotNull(astRoot0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(17, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(17, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertFalse(astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(2, astRoot0.getLength());
      assertEquals(17, astRoot0.getLineno());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      
      parser0.defineSymbol(109, "Dm", false);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      StringReader stringReader0 = new StringReader("const");
      assertNotNull(stringReader0);
      
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "const", 65536);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(65536, astRoot0.getLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(5, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals("const", astRoot0.getSourceName());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      
      parser0.defineSymbol(87, "msg.too.deep.parernrecursion");
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.defineSymbol(4, "msg.too.deep.parernrecursion");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION: ts.cursor=5, ts.tokenBeg=4, currentToken=0
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      StringReader stringReader0 = new StringReader("const");
      assertNotNull(stringReader0);
      
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "const", 65536);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(5, astRoot0.getLength());
      assertTrue(astRoot0.hasChildren());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals("const", astRoot0.getSourceName());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      
      parser0.defineSymbol(87, "msg.too.deep.parser.recursion");
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      Scope scope0 = (Scope)parser0.destructuringAssignmentHelper(590, astRoot0, astRoot0, "msg.too.deep.parser.recursion");
      assertNotNull(scope0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getParamCount());
      assertEquals(5, astRoot0.getLength());
      assertTrue(astRoot0.hasChildren());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals("const", astRoot0.getSourceName());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertNull(scope0.getJsDoc());
      assertEquals(65536, scope0.getLineno());
      assertEquals(158, scope0.getType());
      assertEquals(1, scope0.getLength());
      assertTrue(scope0.hasChildren());
      assertEquals((-1), scope0.getPosition());
      assertEquals(0, scope0.depth());
      assertEquals((-1), scope0.getAbsolutePosition());
      assertEquals("158", scope0.toString());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      parser0.defineSymbol(1795, (String) null);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(65536, Parser.ARGC_LIMIT);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.defineSymbol(33, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("error: ", "error: ", 65536);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file (error: #65536)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      parser0.nestingOfFunction = 21;
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      
      AstRoot astRoot0 = parser0.parse("d:t](GJ", " where it expected String, Number, Boolean or Scriptable instance. Please check your code for missing Context.javaToJS() call.", 26);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(7, astRoot0.getLength());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertTrue(astRoot0.hasChildren());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(26, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(26, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(26, astRoot0.getLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(" where it expected String, Number, Boolean or Scriptable instance. Please check your code for missing Context.javaToJS() call.", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      parser0.nestingOfFunction = 65536;
      // Undeclared exception!
      try { 
        parser0.parse("NJBZ@OrYCUN9A%f;", "NJBZ@OrYCUN9A%f;", 65536);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement (NJBZ@OrYCUN9A%f;#65536)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("M:kpE16j:@nR", "M:kpE16j:@nR", 2);
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(2, astRoot0.getLineno());
      assertEquals(2, astRoot0.getBaseLineno());
      assertEquals(2, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertFalse(astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(12, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals("M:kpE16j:@nR", astRoot0.getSourceName());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      StringReader stringReader0 = new StringReader("with (");
      assertNotNull(stringReader0);
      
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "Z[", 707);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals("Z[", astRoot0.getSourceName());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(707, astRoot0.getBaseLineno());
      assertEquals(707, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(6, astRoot0.getLength());
      assertEquals(707, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("this node type does not support for each", "H;<h", 18);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("H;<h", astRoot0.getSourceName());
      assertEquals(18, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(40, astRoot0.getLength());
      assertEquals(18, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(18, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("for (", "msg.syntax", 3006);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(3006, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("msg.syntax", astRoot0.getSourceName());
      assertEquals(3006, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(3006, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(5, astRoot0.getLength());
      assertEquals(0, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("let", "d@m4)[~y91pm<<zM}l]", 47);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(47, astRoot0.getLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals("d@m4)[~y91pm<<zM}l]", astRoot0.getSourceName());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(3, astRoot0.getLength());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(47, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(47, astRoot0.getEndLineno());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(10, Node.SPECIALCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("var", "var", 8);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(8, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(8, astRoot0.getLineno());
      assertEquals("var", astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(3, astRoot0.getLength());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(8, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("break", "break", 3310);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(3310, astRoot0.getEndLineno());
      assertEquals(3310, astRoot0.getLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(4, astRoot0.getLength());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals("break", astRoot0.getSourceName());
      assertFalse(astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(3310, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("do ", "do ", 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file (do #2)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("try", "try", 26);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals("try", astRoot0.getSourceName());
      assertEquals(26, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(26, astRoot0.getEndLineno());
      assertEquals(3, astRoot0.getLength());
      assertEquals(26, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("throw", "throw", 65536);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file (throw#65536)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("return", "return", 20);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(5, astRoot0.getLength());
      assertEquals(0, astRoot0.getPosition());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(20, astRoot0.getEndLineno());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals("return", astRoot0.getSourceName());
      assertEquals(20, astRoot0.getLineno());
      assertEquals(20, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isRecordingComments());
      
      Parser parser0 = new Parser(compilerEnvirons0, errorCollector0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("QXl1^7% J~\"O", "QXl1^7% J~\"O", 133);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      
      Parser parser0 = new Parser(compilerEnvirons0, errorCollector0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("W0_{8V|_}", "W0_{8V|_}", 65536);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse(";Mth", ";Mth", 1972);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1972, astRoot0.getLineno());
      assertEquals(";Mth", astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(1972, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(1972, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(4, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("if (", "if (", 65536);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals("if (", astRoot0.getSourceName());
      assertEquals(65536, astRoot0.getEndLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(4, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("while", "while", (-2766));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("W0_{8V|_}", "W0_{8V|_}", (-943));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("_ia[|{T>6Dk~[,jHcN?", "_ia[|{T>6Dk~[,jHcN?", 21);
      assertNotNull(astRoot0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(19, astRoot0.getLength());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals("_ia[|{T>6Dk~[,jHcN?", astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(21, astRoot0.getLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(21, astRoot0.getBaseLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(21, astRoot0.getEndLineno());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      StringReader stringReader0 = new StringReader("Cavh");
      assertNotNull(stringReader0);
      
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "Cavh", 2);
      assertNotNull(astRoot0);
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(2, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals("Cavh", astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(2, astRoot0.getEndLineno());
      assertEquals(2, astRoot0.getLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(4, astRoot0.getLength());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "Cavh", 3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // parser reused
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      StringReader stringReader0 = new StringReader("const");
      assertNotNull(stringReader0);
      
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "const", 65536);
      assertNotNull(astRoot0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals("const", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(5, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(65536, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      
      // Undeclared exception!
      try { 
        parser0.parse("const", "H;<h", 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // parser reused
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      StringReader stringReader0 = new StringReader("const");
      assertNotNull(stringReader0);
      
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "const", 65536);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals("const", astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(5, astRoot0.getLength());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      
      Scope scope0 = (Scope)parser0.destructuringAssignmentHelper(590, astRoot0, astRoot0, "msg.too.deep.parser.recursion");
      assertNotNull(scope0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals("const", astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(5, astRoot0.getLength());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, scope0.depth());
      assertNull(scope0.getJsDoc());
      assertEquals((-1), scope0.getPosition());
      assertEquals(65536, scope0.getLineno());
      assertTrue(scope0.hasChildren());
      assertEquals(158, scope0.getType());
      assertEquals(1, scope0.getLength());
      assertEquals((-1), scope0.getAbsolutePosition());
      assertEquals("158", scope0.toString());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      
      Parser parser1 = new Parser();
      assertFalse(parser1.equals((Object)parser0));
      assertNotNull(parser1);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser1.pushScope(scope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      compilerEnvirons0.setXmlAvailable(false);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      
      // Undeclared exception!
      try { 
        parser0.parse("zZsA?3>RT@E15ON?8@`", "c(~f+IfJ?5b%", (-3460));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("d@m4)[~y91pm<<zM}l]", "d@m4)[~y91pm<<zM}l]", 65536);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals("d@m4)[~y91pm<<zM}l]", astRoot0.getSourceName());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(19, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(65536, astRoot0.getEndLineno());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("debugger;\n", "debugger;\n", (-1699));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("2=2%g/*:BG?.#RI4Q", "2=2%g/*:BG?.#RI4Q", 65536);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(16, astRoot0.getLength());
      assertTrue(astRoot0.hasChildren());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals("2=2%g/*:BG?.#RI4Q", astRoot0.getSourceName());
      assertEquals(65536, astRoot0.getLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isIdeMode());
      
      Parser parser0 = new Parser(compilerEnvirons0, errorCollector0);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("~<{-PpVK(IkM9>3P;HU", "~<{-PpVK(IkM9>3P;HU", 122);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.reportError("", "msg.continue.nonloop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property 
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.addError("msg.var.hides.arg", "msg.var.hides.arg", (-290), (-290));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variable msg.var.hides.arg hides argument
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.parse("switch (", "switch (", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.addWarning("msg.bad.assign.left", "EMPTY", (-751), (-751));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      AstRoot astRoot0 = parser0.parse("}09", "(new Boolean(false))", 109);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertEquals("136", astRoot0.toString());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(109, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(109, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("(new Boolean(false))", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(2, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(109, astRoot0.getLineno());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      // Undeclared exception!
      try { 
        parser0.addWarning("Math", "Math");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property Math
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      StringReader stringReader0 = new StringReader("com.google.javascript.rhino.head.JavaScriptException");
      assertNotNull(stringReader0);
      
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "com.google.javascript.rhino.head.JavaScriptException", 14);
      assertNotNull(astRoot0);
      assertEquals(52, astRoot0.getLength());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(14, astRoot0.getBaseLineno());
      assertEquals("com.google.javascript.rhino.head.JavaScriptException", astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(14, astRoot0.getLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(14, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      
      parser0.addStrictWarning("com.google.javascript.rhino.head.JavaScriptException", "kYm N");
      assertEquals(65536, Parser.ARGC_LIMIT);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      
      parser0.addStrictWarning(":s=9N*_I}r&)'z", ":s=9N*_I}r&)'z");
      assertEquals(65536, Parser.ARGC_LIMIT);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      AstRoot astRoot0 = parser0.parse("compileFunction only accepts source with single JS function: ", "SVy9L", 121);
      assertEquals(61, astRoot0.getLength());
      assertEquals(0, astRoot0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.eof();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.addWarning("m", (-833), (-833));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property m
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      AstRoot astRoot0 = parser0.parse("'%$a*QwZ)'", "'%$a*QwZ)'", 65536);
      assertEquals(10, astRoot0.getLength());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(65536, astRoot0.getLineno());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.lookupMessage("[c:65t/tX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property [c:65t/tX
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      AstRoot astRoot0 = parser0.parse("switch", "eval", 121);
      assertEquals(121, astRoot0.getBaseLineno());
      assertEquals(1, astRoot0.getLength());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      StringReader stringReader0 = new StringReader("const");
      parser0.parse((Reader) stringReader0, "const", 65536);
      parser0.defineSymbol(2854, "const");
      assertEquals(65536, Parser.ARGC_LIMIT);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      AstRoot astRoot0 = parser0.parse(" where it expected String, Number, Boolean or Scriptable instance. Please check your code for missing Context.javaToJS() call.", " where it expected String, Number, Boolean or Scriptable instance. Please check your code for missing Context.javaToJS() call.", 4);
      assertEquals(126, astRoot0.getLength());
      assertEquals(4, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      AstRoot astRoot0 = parser0.parse("~<{uPVK(IkM9>3P;BU", "~<{uPVK(IkM9>3P;BU", 65536);
      assertEquals(15, astRoot0.getLength());
      assertEquals(65536, astRoot0.getBaseLineno());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Parser parser0 = new Parser();
      LabeledStatement labeledStatement0 = new LabeledStatement();
      // Undeclared exception!
      try { 
        parser0.createDestructuringAssignment(24, labeledStatement0, labeledStatement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      StringReader stringReader0 = new StringReader("const");
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "const", 65536);
      Scope scope0 = (Scope)parser0.destructuringAssignmentHelper(590, astRoot0, astRoot0, "msg.too.deep.parser.recursion");
      parser0.pushScope(scope0);
      assertEquals(65536, scope0.getLineno());
      assertEquals(5, astRoot0.getLength());
      assertEquals("158", scope0.toString());
  }
}

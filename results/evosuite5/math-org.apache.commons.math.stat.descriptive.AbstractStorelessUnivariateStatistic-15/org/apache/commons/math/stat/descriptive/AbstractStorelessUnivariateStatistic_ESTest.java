/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 15:58:38 GMT 2019
 */

package org.apache.commons.math.stat.descriptive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.stat.descriptive.moment.FourthMoment;
import org.apache.commons.math.stat.descriptive.moment.GeometricMean;
import org.apache.commons.math.stat.descriptive.moment.SecondMoment;
import org.apache.commons.math.stat.descriptive.moment.ThirdMoment;
import org.apache.commons.math.stat.descriptive.moment.Variance;
import org.apache.commons.math.stat.descriptive.rank.Min;
import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractStorelessUnivariateStatistic_ESTest extends AbstractStorelessUnivariateStatistic_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Min min0 = new Min();
      GeometricMean geometricMean0 = new GeometricMean();
      min0.increment(Double.NaN);
      boolean boolean0 = geometricMean0.equals(min0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FourthMoment fourthMoment0 = new FourthMoment();
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      double[] doubleArray0 = new double[2];
      sumOfLogs0.incrementAll(doubleArray0);
      GeometricMean geometricMean0 = new GeometricMean(sumOfLogs0);
      Variance variance0 = new Variance(fourthMoment0);
      boolean boolean0 = geometricMean0.equals(variance0);
      assertEquals(Double.NEGATIVE_INFINITY, sumOfLogs0.getResult(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FourthMoment fourthMoment0 = new FourthMoment();
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      boolean boolean0 = sumOfLogs0.equals(fourthMoment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FourthMoment fourthMoment0 = new FourthMoment();
      boolean boolean0 = fourthMoment0.equals("X?=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[0];
      min0.incrementAll(doubleArray0);
      assertEquals(Double.NaN, min0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      double[] doubleArray0 = new double[6];
      double double0 = secondMoment0.evaluate(doubleArray0, 1, 1);
      assertEquals(0.0, secondMoment0.getResult(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      double[] doubleArray0 = new double[5];
      double double0 = thirdMoment0.evaluate(doubleArray0, 0, 0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      // Undeclared exception!
      try { 
        secondMoment0.evaluate((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input value array is null
         //
         verifyException("org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GeometricMean geometricMean0 = new GeometricMean();
      double[] doubleArray0 = new double[3];
      double double0 = geometricMean0.evaluate(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GeometricMean geometricMean0 = new GeometricMean();
      geometricMean0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Min min0 = new Min();
      // Undeclared exception!
      try { 
        min0.incrementAll((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input values array is null
         //
         verifyException("org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }
}

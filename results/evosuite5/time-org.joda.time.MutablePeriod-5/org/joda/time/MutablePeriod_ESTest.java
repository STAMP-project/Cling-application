/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 21:39:06 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MutablePeriod_ESTest extends MutablePeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(10209375, 10209375, 1452, 1452);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Duration duration0 = mutablePeriod0.toDurationFrom(mutableDateTime0);
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals(10379531L, duration0.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      Interval interval0 = new Interval(duration0, dateTime0);
      mutablePeriod0.add((ReadableInterval) interval0);
      assertEquals(1392409281320L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(10209375, 10209375, 1452, 1452);
      mutablePeriod0.add((ReadableInterval) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(10209375, 10209375, 1452, 1452);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutablePeriod0.setPeriod((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(10209375, 10209375, 1452, 1452);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Instant instant0 = Instant.now();
      mutablePeriod0.setPeriod((ReadableInstant) mutableDateTime0, (ReadableInstant) instant0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      mutablePeriod0.addHours(70);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) iSOChronology0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateMidnight0, (ReadableDuration) null, (PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PeriodType periodType0 = PeriodType.weeks();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod((Object) integer0, periodType0, (Chronology) julianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(25650000, 0, 25650000, 0);
      mutablePeriod0.clear();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(julianChronology0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1L), 207L, strictChronology0);
      mutablePeriod0.setDays(4282);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Months months0 = Months.SEVEN;
      PeriodType periodType0 = months0.getPeriodType();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(1996, 1996, 1996, 0, 0, 1996, 1996, 168, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      mutablePeriod0.add(30617280288L, (Chronology) iSOChronology0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Days days0 = Days.MAX_VALUE;
      Duration duration0 = days0.toStandardDuration();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, duration0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(30L, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2328L), (-2328L), periodType0);
      // Undeclared exception!
      try { 
        mutablePeriod0.setHours(2290);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'hours'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(10209375, 10209375, 1452, 1452);
      mutablePeriod0.setMonths(5);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      mutablePeriod0.add((-17L));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) iSOChronology0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0);
      mutablePeriod0.addSeconds(754);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      // Undeclared exception!
      try { 
        mutablePeriod0.setValue((-1703), (-1703));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1703
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      mutablePeriod0.addMillis(1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      mutablePeriod0.setYears(0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-137), 0, 0, 0);
      mutablePeriod0.setSeconds(0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(25650013, 25650013, 25650013, 0, 0, 25650013, 25650013, 25650013);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      mutablePeriod0.setWeeks(0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      Hours hours0 = weeks0.toStandardHours();
      PeriodType periodType0 = hours0.getPeriodType();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 0L, periodType0, buddhistChronology0);
      // Undeclared exception!
      try { 
        mutablePeriod0.addYears((-2808));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(julianChronology0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1L), 207L, strictChronology0);
      mutablePeriod0.setPeriod(0L, 1L);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Instant instant0 = new Instant();
      PeriodType periodType0 = PeriodType.yearMonthDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0, periodType0);
      mutablePeriod0.add((ReadableDuration) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, periodType0, (Chronology) ethiopicChronology0);
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      assertNotSame(mutablePeriod0, mutablePeriod1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Interval interval0 = new Interval(mutableDateTime0, mutableDateTime0);
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = interval0.toPeriod(periodType0);
      mutablePeriod0.mergePeriod(period0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(10209375, (-2098), (-2098), 1452);
      mutablePeriod0.addWeeks(10209375);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("Clone error");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Clone error\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(10209375, 10209375, 1452, 1452);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Duration duration0 = mutablePeriod0.toDurationFrom(mutableDateTime0);
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod1 = null;
      try {
        mutablePeriod1 = new MutablePeriod(duration0, mutableDateTime0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 37366313953
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(10209375, 10209375, 1452, 1452);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Duration duration0 = mutablePeriod0.toDurationFrom(mutableDateTime0);
      MutablePeriod mutablePeriod1 = new MutablePeriod(duration0, mutableDateTime0);
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1257L, periodType0);
      // Undeclared exception!
      try { 
        mutablePeriod0.add(0, (-1899), 2968, (-1899), 662, 0, 0, 89);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 477L);
      Days days0 = Days.ONE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      mutablePeriod0.set(durationFieldType0, 2454);
      assertEquals("days", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object object0 = new Object();
      Months months0 = Months.SIX;
      PeriodType periodType0 = months0.getPeriodType();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(10209375, (-2098), (-2098), 1452);
      mutablePeriod0.setPeriod((ReadableInterval) null);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2328L), (-2328L), periodType0);
      DateMidnight dateMidnight0 = new DateMidnight();
      Interval interval0 = dateMidnight0.toInterval();
      mutablePeriod0.setPeriod((ReadableInterval) interval0);
      assertEquals(1392418800000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L);
      mutablePeriod0.addMinutes((-2326));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(10209375, (-2098), (-2098), 1452);
      mutablePeriod0.addDays(5);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(977, (-1940), 0, 0);
      mutablePeriod0.addMonths((-5142));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(10209375, (-2098), (-2098), 1452);
      mutablePeriod0.setMinutes((-641));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      MutablePeriod mutablePeriod1 = mutablePeriod0.toMutablePeriod();
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      PeriodType periodType0 = days0.getPeriodType();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1581L), (-1581L), periodType0, ethiopicChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      // Undeclared exception!
      try { 
        mutablePeriod0.add(durationFieldType0, (-23));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'seconds'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object object0 = new Object();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0, copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      mutablePeriod0.setMillis(1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-137), 0, 0, 0);
      Duration duration0 = new Duration(0, (-137));
      mutablePeriod0.setPeriod((ReadableDuration) duration0);
      assertEquals(0L, duration0.getStandardHours());
  }
}

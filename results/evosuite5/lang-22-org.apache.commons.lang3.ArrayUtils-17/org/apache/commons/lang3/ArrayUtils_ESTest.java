/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 16:41:49 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.toObject(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.indexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-35), (-130));
      ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, (-1305), (-5067));
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.add(arrayUtils0.EMPTY_STRING_ARRAY, "4.0");
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (-1847L));
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true, (-1));
      Object object0 = new Object();
      ArrayUtils.toArray(arrayUtils0.EMPTY_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ArrayUtils.isSameLength((long[]) null, (long[]) null);
      Double double0 = new Double(1560.9897985996);
      Double double1 = new Double((-3276.344362535865));
      Short short0 = new Short((short) (-1));
      Short short1 = new Short((short) (-1));
      Short[] shortArray0 = new Short[0];
      ArrayUtils.nullToEmpty(shortArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2185L;
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '5';
      charArray0[2] = 'T';
      charArray0[3] = '\"';
      charArray0[4] = '!';
      charArray0[5] = '!';
      charArray0[6] = '1';
      charArray0[7] = '5';
      ArrayUtils.isSameLength(charArray0, charArray0);
      ArrayUtils.toPrimitive((Character[]) null, '!');
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3083.8);
      doubleArray0[1] = (double) 2185.0F;
      doubleArray0[2] = (double) '!';
      doubleArray0[3] = (double) 2185L;
      doubleArray0[4] = (double) '1';
      doubleArray0[5] = (double) '\"';
      doubleArray0[6] = (double) '<';
      doubleArray0[7] = (double) '!';
      ArrayUtils.isNotEmpty(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayUtils.clone((float[]) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.isSameLength((int[]) null, arrayUtils0.EMPTY_INT_ARRAY);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      ArrayUtils.removeElement(doubleArray0, (-1.0));
      ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.isSameLength((int[]) null, (int[]) null);
      ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, (Object) arrayUtils0, (-1));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)1932;
      ArrayUtils.nullToEmpty((char[]) null);
      ArrayUtils.lastIndexOf((float[]) null, (-2807.04F), 512);
      Short short0 = new Short((short)1932);
      Short short1 = new Short((short)1932);
      Short short2 = new Short((short)0);
      Short short3 = new Short((short)4);
      Short[] shortArray1 = new Short[4];
      shortArray1[0] = short1;
      shortArray1[1] = short2;
      shortArray1[2] = short0;
      shortArray1[3] = short3;
      ArrayUtils.toPrimitive(shortArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, byteArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Character.valueOf('y');
      Character character0 = new Character('{');
      Character.valueOf('0');
      Character.valueOf('+');
      float[] floatArray0 = new float[3];
      floatArray0[2] = (float) '+';
      ArrayUtils.nullToEmpty(floatArray0);
      ArrayUtils.add((int[]) null, 0, 0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-72);
      ArrayUtils.indexOf(byteArray0, (byte) (-86), (int) (byte) (-72));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int[] intArray0 = new int[9];
      intArray0[1] = (-5067);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = 0;
      intArray0[7] = (int) (byte) (-50);
      ArrayUtils.subarray(intArray0, (-50), 2);
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'S';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)68;
      ArrayUtils.addAll(byteArray0, (byte[]) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Long long0 = new Long(908L);
      Object object0 = new Object();
      long[] longArray0 = new long[4];
      longArray0[0] = 908L;
      ArrayUtils.isEmpty(longArray0);
      longArray0[1] = 91L;
      longArray0[2] = 908L;
      longArray0[3] = 908L;
      ArrayUtils.reverse(longArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      ArrayUtils.removeElement(booleanArray0, true);
      short[] shortArray0 = new short[0];
      ArrayUtils.addAll(shortArray0, shortArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '$';
      doubleArray0[1] = (double) '$';
      doubleArray0[3] = (double) 'a';
      ArrayUtils.nullToEmpty(doubleArray0);
      ArrayUtils.contains(booleanArray0, false);
      float[] floatArray0 = new float[4];
      floatArray0[2] = (float) '$';
      ArrayUtils.contains(floatArray0, 4123.0F);
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 0.0;
      ArrayUtils.nullToEmpty(doubleArray1);
      ArrayUtils.reverse(booleanArray0);
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-61));
      byteArray0[0] = byte0;
      ArrayUtils.nullToEmpty(byteArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      ArrayUtils.removeElement(byteArray0, (byte)63);
      ArrayUtils.subarray((boolean[]) null, 57, 57);
      boolean[] booleanArray0 = new boolean[4];
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1651.8074F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-2247.0F);
      floatArray0[3] = 1860.6F;
      floatArray0[4] = 2174.2307F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-3073.0F);
      floatArray0[7] = 2052.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      ArrayUtils.addAll(floatArray0, floatArray1);
      ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 2052.0F;
      objectArray0[1] = (Object) 2052.0F;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 2174.2307F;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) 2174.2307F;
      objectArray0[6] = (Object) 1.0F;
      objectArray0[7] = (Object) (-2247.0F);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '2052.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      Boolean[] booleanArray2 = new Boolean[7];
      booleanArray2[0] = (Boolean) false;
      booleanArray2[1] = (Boolean) false;
      booleanArray2[2] = (Boolean) false;
      booleanArray2[3] = (Boolean) false;
      booleanArray2[4] = (Boolean) false;
      booleanArray2[5] = (Boolean) false;
      booleanArray2[6] = (Boolean) false;
      ArrayUtils.toPrimitive(booleanArray2);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 3943;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 3943;
      doubleArray0[4] = (double) 3943;
      doubleArray0[5] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1236), 114);
      ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      ArrayUtils.addAll(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Character.valueOf('y');
      Character character0 = new Character('{');
      Character.valueOf('0');
      Character.valueOf('+');
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = '+';
      charArray0[2] = '{';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = 'y';
      charArray0[6] = 'D';
      charArray0[7] = '|';
      charArray0[8] = '|';
      ArrayUtils.removeElement(charArray0, 'f');
      ArrayUtils.addAll((long[]) null, (long[]) null);
      ArrayUtils.isNotEmpty((short[]) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(0.0);
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      floatArray0[1] = float1;
      Float float2 = Float.valueOf((-936.1F));
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      floatArray0[3] = float3;
      Float float4 = new Float(1.0);
      floatArray0[4] = float4;
      Float float5 = new Float(0.0F);
      floatArray0[5] = float5;
      ArrayUtils.toPrimitive(floatArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_STRING_ARRAY, (Object) arrayUtils0);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_STRING_ARRAY, arrayUtils0.EMPTY_STRING_ARRAY);
      ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      ArrayUtils.nullToEmpty((Boolean[]) null);
      ArrayUtils.nullToEmpty((Object[]) booleanArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 10;
      intArray0[1] = (-2291);
      intArray0[2] = (-106);
      intArray0[3] = 1627;
      ArrayUtils.indexOf(intArray0, 1627, (-2291));
      ArrayUtils.isSameLength((long[]) null, (long[]) null);
      ArrayUtils.isSameLength((char[]) null, (char[]) null);
      Object object0 = new Object();
      Object object1 = new Object();
      ArrayUtils.add((Object[]) null, object1);
      ArrayUtils.isNotEmpty((Object[]) booleanArray0);
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      ArrayUtils.nullToEmpty((short[]) null);
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-2776));
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[0]);
      shortArray0[3] = short3;
      try { 
        Short.valueOf((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1), (-1));
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, object0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Object
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2883;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 0;
      intArray0[4] = 318;
      intArray0[5] = 2;
      intArray0[6] = 2721;
      ArrayUtils.contains(intArray0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2883;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 318;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      doubleArray0[7] = (double) 318;
      ArrayUtils.lastIndexOf(doubleArray0, (double) 2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-3150.8031593854453));
      ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Character.valueOf('y');
      Character character0 = new Character('{');
      Character.valueOf('0');
      Character.valueOf('+');
      Character character1 = new Character('X');
      Character.valueOf('0');
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '+';
      longArray0[1] = (long) 'X';
      longArray0[2] = (long) '0';
      longArray0[3] = (long) '0';
      longArray0[4] = (long) '+';
      longArray0[5] = (-73L);
      ArrayUtils.lastIndexOf(longArray0, (-5041L), (-2146686799));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)2;
      ArrayUtils.isEmpty(byteArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[0];
      double[] doubleArray0 = new double[7];
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      ArrayUtils.reverse((Object[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)107;
      Boolean boolean0 = new Boolean((String) null);
      ArrayUtils.toPrimitive((Boolean[]) null);
      ArrayUtils.subarray(doubleArray0, (int) (byte)107, (int) (byte)107);
      ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)107;
      longArray0[1] = 0L;
      ArrayUtils.lastIndexOf(longArray0, 1006L, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, (-623L));
      ArrayUtils.contains(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)92);
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short)16);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) false;
      ArrayUtils.isEmpty(objectArray0);
      Boolean[] booleanArray1 = new Boolean[7];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) false;
      Short short0 = new Short((short)512);
      ArrayUtils.toPrimitive((Float[]) null, (float) (short)512);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-542);
      intArray0[2] = 3123;
      ArrayUtils.contains(intArray0, (-1982292597));
      ArrayUtils.removeElement((double[]) null, (double) 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 3123;
      longArray0[1] = (long) 3123;
      ArrayUtils.isNotEmpty((double[]) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = objectArray0[1];
      ArrayUtils.nullToEmpty((float[]) null);
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.nullToEmpty(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1397.3136F;
      ArrayUtils.isEmpty(floatArray0);
      ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) 3;
      ArrayUtils.removeElement((short[]) null, (short)9);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (double) 'J';
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'J';
      ArrayUtils.isNotEmpty(intArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)22;
      ArrayUtils.lastIndexOf(intArray0, 1819);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)8;
      ArrayUtils.contains(doubleArray0, (double) (byte)8);
      ArrayUtils.contains(doubleArray0, (-3298.3000909));
      ArrayUtils.isNotEmpty(intArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)48;
      floatArray0[1] = (float) 'J';
      ArrayUtils.subarray(floatArray0, (-1), 1819);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      Object object0 = new Object();
      ArrayUtils.indexOf((Object[]) integerArray0, object0, (-2145705129));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_OBJECT_ARRAY, (Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = objectArray0[1];
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.addAll(floatArray0, (float[]) null);
      ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-5041L);
      ArrayUtils.isSameLength(longArray0, (long[]) null);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-53);
      shortArray0[1] = (short) (-3363);
      shortArray0[2] = (short) (byte) (-53);
      ArrayUtils.removeElement(shortArray0, (short) (-53));
      ArrayUtils.toObject((long[]) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3378);
      intArray0[1] = 1631;
      intArray0[2] = 0;
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1631;
      longArray0[1] = (long) 1631;
      longArray0[2] = (long) 1631;
      longArray0[3] = (-11L);
      longArray0[4] = (long) 0;
      ArrayUtils.add(longArray0, 3, (long) 1631);
      ArrayUtils.subarray((byte[]) null, (-3378), 2092);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, (-1), 1567);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-44);
      ArrayUtils.isEmpty(byteArray0);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-44);
      shortArray0[1] = (short) (byte) (-44);
      ArrayUtils.addAll(shortArray0, shortArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_STRING_ARRAY, arrayUtils0.EMPTY_STRING_ARRAY);
      ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayUtils.indexOf((char[]) null, 'J');
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      ArrayUtils.lastIndexOf(doubleArray0, 1.0, 68);
      ArrayUtils.isNotEmpty((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long long1 = new Long(0L);
      Long long2 = new Long((-3366L));
      Long[] longArray0 = new Long[3];
      Long.remainderUnsigned(0L, (-3366L));
      longArray0[0] = long0;
      longArray0[1] = long2;
      longArray0[2] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 279L);
      ArrayUtils.isSameLength(longArray1, longArray1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ArrayUtils.removeElement(byteArray0, (byte)0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'Z', (-358));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      Object object0 = new Object();
      Byte byte0 = new Byte((byte) (-124));
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ArrayUtils.toPrimitive((Integer[]) null);
      ArrayUtils.isSameLength((float[]) null, (float[]) null);
      ArrayUtils.isSameLength((int[]) null, (int[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)57;
      ArrayUtils.isSameLength(byteArray0, byteArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.reverse(booleanArray0);
      ArrayUtils.addAll((int[]) null, (int[]) null);
      byte[] byteArray0 = new byte[0];
      ArrayUtils.lastIndexOf(byteArray0, (byte)103);
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = '+';
      charArray0[2] = 'i';
      ArrayUtils.reverse(charArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'J';
      longArray0[1] = (long) 'J';
      longArray0[2] = (long) 'J';
      longArray0[3] = (long) 'i';
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 'i';
      longArray0[6] = (long) 'J';
      ArrayUtils.toObject(longArray0);
      ArrayUtils.contains((double[]) null, (double) 74L, (double) 74L);
      ArrayUtils.isNotEmpty((double[]) null);
      ArrayUtils.nullToEmpty((Float[]) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      char[] charArray0 = new char[3];
      Long long0 = new Long((-1L));
      Long long1 = new Long(0L);
      Long long2 = new Long((-3366L));
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[1] = long2;
      longArray0[2] = long0;
      ArrayUtils.toPrimitive(longArray0, 279L);
      ArrayUtils.lastIndexOf(booleanArray0, true, (-44));
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      ArrayUtils.toArray(objectArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (Object) arrayUtils0, (-1));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ArrayUtils.nullToEmpty((float[]) null);
      Long long0 = new Long(611L);
      Double double0 = new Double(1.0);
      ArrayUtils.toPrimitive((Double[]) null, (-171.79461953001135));
      long[] longArray0 = new long[1];
      longArray0[0] = 611L;
      ArrayUtils.toObject(longArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ArrayUtils.isSameType("Cannot store ", "java.lang.Object");
      Integer integer0 = new Integer(652);
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      ArrayUtils.reverse(intArray0);
      Object object0 = new Object();
      ArrayUtils.lastIndexOf((Object[]) integerArray0, object0, 2252);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 652;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 2252;
      floatArray0[3] = (float) 2252;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 652;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 1;
      ArrayUtils.lastIndexOf(floatArray0, (float) 2252, (-1));
      Byte byte0 = new Byte((byte)80);
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      Byte byte1 = new Byte((byte)48);
      byteArray0[5] = byte1;
      byteArray0[6] = byte0;
      byteArray0[7] = byte0;
      ArrayUtils.toPrimitive(byteArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      ArrayUtils.removeElement(byteArray0, (byte)63);
      ArrayUtils.subarray((boolean[]) null, 57, 57);
      ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (-2981);
      ArrayUtils.nullToEmpty(intArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Long long0 = new Long(908L);
      Float float0 = new Float(2312.242319432692);
      Float float1 = new Float(4123.0F);
      Float float2 = new Float(2312.242319432692);
      Float.max(1.0F, (-2231.5405F));
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float2;
      floatArray0[2] = float2;
      floatArray0[4] = float1;
      Float.min((float) floatArray0[1], 1.0F);
      floatArray0[4] = float1;
      ArrayUtils.toPrimitive(floatArray0, 1.0F);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.isNotEmpty(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.isSameLength((long[]) null, (long[]) null);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.reverse(arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      ArrayUtils.isSameLength((long[]) null, arrayUtils0.EMPTY_LONG_ARRAY);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ArrayUtils.nullToEmpty((String[]) null);
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = (-1517L);
      longArray0[3] = 572L;
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      charArray0[1] = '5';
      charArray0[2] = '(';
      charArray0[3] = '|';
      charArray0[4] = 'D';
      ArrayUtils.removeElement(charArray0, '}');
      ArrayUtils.addAll(longArray0, (long[]) null);
      ArrayUtils.isNotEmpty((short[]) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils.lastIndexOf((Object[]) null, object0, 1);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-1);
      longArray0[4] = 0L;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 0;
      ArrayUtils.isSameLength((long[]) null, longArray0);
      ArrayUtils.isSameLength((char[]) null, (char[]) null);
      Object object1 = new Object();
      Object object2 = new Object();
      ArrayUtils.add((Object[]) null, object2);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      ArrayUtils.addAll(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.addAll(objectArray0, objectArray0);
      Object[] objectArray1 = new Object[1];
      Object object0 = new Object();
      objectArray1[0] = object0;
      int int0 = 2618;
      ArrayUtils.lastIndexOf(objectArray1, (Object) null, 2618);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      ArrayUtils.isSameLength(floatArray0, floatArray0);
      ArrayUtils.isSameLength(floatArray0, arrayUtils0.EMPTY_FLOAT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      ArrayUtils.isEmpty(objectArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-3), 829);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_INT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toMap(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 676L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      ArrayUtils.indexOf(longArray0, (-1L), (-46));
      ArrayUtils.contains(longArray0, (long) 1);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (-46);
      doubleArray0[2] = (-1208.4562);
      doubleArray0[3] = (double) 676L;
      doubleArray0[4] = (double) (-1L);
      ArrayUtils.lastIndexOf(doubleArray0, (double) (-1L), 1, (-1208.4562));
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      intArray0[2] = (-46);
      ArrayUtils.addAll(intArray0, intArray0);
      ArrayUtils.nullToEmpty(longArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.indexOf(arrayUtils0.EMPTY_CHAR_ARRAY, '$');
      ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, (-1), (int) (byte) (-1));
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'J';
      charArray0[2] = 'U';
      charArray0[3] = '$';
      charArray0[4] = '$';
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, charArray0);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (byte)121);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2185L;
      ArrayUtils.toObject(floatArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2476.749532713577;
      doubleArray0[1] = 80.95969720066;
      ArrayUtils.isSameLength((double[]) null, doubleArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = 676L;
      longArray0[1] = 1546L;
      ArrayUtils.isEmpty(longArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = '0';
      ArrayUtils.isSameLength(charArray0, charArray0);
      try { 
        Short.valueOf("java.lang.Boolean", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      ArrayUtils.subarray(byteArray0, (-337), (int) (byte)84);
      ArrayUtils.isEmpty((int[]) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BYTE_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1098;
      ArrayUtils.reverse(intArray0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-5041L);
      ArrayUtils.isSameLength(longArray0, (long[]) null);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-53);
      shortArray0[1] = (short) (-3363);
      ArrayUtils.isEmpty((long[]) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.nullToEmpty(objectArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 100;
      intArray0[1] = 100;
      intArray0[2] = 100;
      intArray0[3] = 100;
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("d!^,1lAR&W4!6EH:", "Mac");
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      Map.Entry.comparingByKey();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Object, Object>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 8);
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry0;
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry0;
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry0;
      abstractMap_SimpleEntryArray0[5] = abstractMap_SimpleEntry0;
      Map.Entry.comparingByValue();
      abstractMap_SimpleEntryArray0[6] = abstractMap_SimpleEntry0;
      abstractMap_SimpleEntryArray0[7] = abstractMap_SimpleEntry0;
      ArrayUtils.removeElement(abstractMap_SimpleEntryArray0, (Object) null);
      Integer integer0 = new Integer((-436));
      Integer integer1 = new Integer(2);
      try { 
        Integer.decode("Cannot store ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Cannot store \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.isNotEmpty(booleanArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = 2185L;
      longArray0[2] = 3749L;
      longArray0[3] = 3749L;
      longArray0[4] = 3749L;
      longArray0[5] = 3749L;
      longArray0[6] = 3749L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      ArrayUtils.isNotEmpty(longArray1);
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ArrayUtils.indexOf((char[]) null, 'J');
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-41.28);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 'J';
      ArrayUtils.indexOf(longArray0, 0L);
      Integer integer0 = new Integer((-1));
      Integer.compareUnsigned((-1), 953);
      Integer.divideUnsigned((-1), (-2146215655));
      Integer.toUnsignedLong(Integer.MAX_VALUE);
      ArrayUtils.contains((Object[]) null, (Object) integer0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll((int[]) null, (int[]) null);
      ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_STRING_ARRAY);
      ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayUtils.indexOf((char[]) null, 'J');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Object object0 = new Object();
      Byte byte0 = new Byte((byte)0);
      ArrayUtils.toPrimitive((Double[]) null);
      ArrayUtils.isEmpty(byteArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.addAll(objectArray0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte)5;
      ArrayUtils.isSameLength(byteArray0, byteArray1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) (byte)5;
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = (double) (byte)2;
      doubleArray0[5] = (double) (byte)5;
      doubleArray0[6] = (double) (byte)2;
      ArrayUtils.addAll(doubleArray0, doubleArray0);
      ArrayUtils.addAll(byteArray0, byteArray1);
      ArrayUtils.reverse((short[]) null);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)19;
      byteArray2[1] = (byte)2;
      byteArray2[2] = (byte)5;
      ArrayUtils.isSameLength(byteArray2, byteArray2);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (float) (byte)5;
      ArrayUtils.isSameLength(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (-1006), (long) (-1006));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1006, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), 1104);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'A';
      intArray0[1] = (int) 'A';
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (int) 'A';
      intArray0[5] = (int) 'A';
      ArrayUtils.toObject(intArray0);
      Long long0 = new Long(65);
      Long long1 = new Long(1271L);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, (short[]) null);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = object0;
      objectArray0[2] = (Object) arrayUtils0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) arrayUtils0;
      objectArray0[5] = object0;
      objectArray0[6] = object0;
      Object object1 = new Object();
      ArrayUtils.lastIndexOf(objectArray0, object1, (-1));
      ArrayUtils.add(arrayUtils0.EMPTY_STRING_ARRAY, "java.lang.Float");
      Object object2 = new Object();
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) arrayUtils0;
      objectArray1[1] = object1;
      objectArray1[2] = (Object) "java.lang.Float";
      ArrayUtils.addAll(objectArray1, (Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)124;
      ArrayUtils.addAll(byteArray0, byteArray0);
      ArrayUtils.isSameLength((float[]) null, (float[]) null);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)124;
      longArray0[1] = (long) (byte)124;
      longArray0[2] = (long) (byte)124;
      longArray0[3] = 1L;
      longArray0[4] = (long) (byte)124;
      ArrayUtils.subarray(longArray0, (int) (byte)124, (-75));
      ArrayUtils.isSameLength((float[]) null, (float[]) null);
      Character[] characterArray0 = new Character[5];
      char char0 = 'm';
      Character character0 = new Character('m');
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('m');
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      characterArray0[2] = character2;
      Character character3 = new Character('m');
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('(');
      Character.isAlphabetic((byte)72);
      characterArray0[4] = character4;
      ArrayUtils.toPrimitive(characterArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ArrayUtils.addAll((int[]) null, (int[]) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (-196.233432725293);
      doubleArray0[3] = 3319.3567;
      doubleArray0[4] = 1754.116546569601;
      doubleArray0[5] = (-373.419061);
      doubleArray0[6] = 1.0;
      ArrayUtils.removeElement(doubleArray0, 1.5);
      ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 1;
      ArrayUtils.isSameLength(intArray0, (int[]) null);
      ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      ArrayUtils.isSameLength((float[]) null, (float[]) null);
      ArrayUtils.toMap((Object[]) null);
      int[] intArray1 = new int[9];
      intArray1[0] = (-2146847035);
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = (-1);
      intArray1[4] = 1;
      intArray1[5] = (-1);
      intArray1[6] = (-1);
      intArray1[7] = 1;
      intArray1[8] = (-4143);
      ArrayUtils.isSameLength(intArray1, (int[]) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.addAll((float[]) null, arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.isSameLength((boolean[]) null, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, floatArray0);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, (byte[]) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      ArrayUtils.clone(arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 64;
      intArray0[2] = 730;
      ArrayUtils.lastIndexOf(intArray0, 730, (-2668));
      Character character0 = new Character('X');
      Character.valueOf('y');
      ArrayUtils.nullToEmpty((Character[]) null);
      ArrayUtils.lastIndexOf((byte[]) null, (byte) (-50), (-3028));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1397.3136F;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      ArrayUtils.reverse(byteArray0);
      long[] longArray0 = new long[0];
      ArrayUtils.subarray(longArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      ArrayUtils.isSameLength(floatArray0, floatArray0);
      ArrayUtils.removeElement(floatArray0, 0.0F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = objectArray0[1];
      ArrayUtils.clone((float[]) null);
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      ArrayUtils.getLength(objectArray0[2]);
      Integer[] integerArray0 = new Integer[1];
      Object[] objectArray1 = ArrayUtils.add((Object[]) integerArray0, objectArray0[2]);
      ArrayUtils.isNotEmpty(objectArray1);
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.addAll(booleanArray0, booleanArray0);
      Long.valueOf(0L);
      ArrayUtils.lastIndexOf((int[]) null, 3, 3);
      ArrayUtils.nullToEmpty((float[]) null);
      ArrayUtils.isEmpty((char[]) null);
      ArrayUtils.nullToEmpty((boolean[]) null);
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toMap(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.removeElement(booleanArray0, false);
      ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (Object) arrayUtils0, 2146261585);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, floatArray0);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_INT_ARRAY);
      Short short0 = new Short((short)3);
      Short short1 = new Short((short)3);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (short)1388);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (-5534L));
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1388;
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)3;
      shortArray0[3] = (short)1388;
      shortArray0[4] = (short)3;
      shortArray0[5] = (short)3;
      ArrayUtils.isSameLength(shortArray0, (short[]) null);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_OBJECT_ARRAY, (Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1651.2294F);
      floatArray0[1] = (-1380.39F);
      ArrayUtils.indexOf(floatArray0, (-1380.39F), (-328));
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      ArrayUtils.indexOf(longArray0, (-809L));
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-1380.39F);
      objectArray0[1] = (Object) 1L;
      objectArray0[2] = (Object) 1L;
      ArrayUtils.contains(objectArray0, (Object) "");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)78;
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-1213L));
      longArray0[0] = long0;
      Long long1 = new Long((byte)78);
      longArray0[1] = long1;
      Long long2 = new Long(2676L);
      longArray0[2] = long2;
      ArrayUtils.toPrimitive(longArray0, (long) (byte)36);
      ArrayUtils.lastIndexOf(booleanArray0, true, (int) (short)0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_INT_ARRAY, (-44), (-18));
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.nullToEmpty((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ArrayUtils.nullToEmpty((Boolean[]) null);
      Object object0 = new Object();
      Object object1 = new Object();
      ArrayUtils.add((Object[]) null, object1);
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)0;
      ArrayUtils.addAll(byteArray0, byteArray0);
      ArrayUtils.isSameLength(floatArray0, floatArray0);
      ArrayUtils.toPrimitive((Integer[]) null, (-1162));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (-1), (Object) "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ArrayUtils.nullToEmpty((String[]) null);
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = (-1517L);
      longArray0[3] = 572L;
      longArray0[4] = (-3835L);
      longArray0[5] = 2647L;
      longArray0[6] = 2245L;
      longArray0[7] = 0L;
      ArrayUtils.subarray(longArray0, Integer.MAX_VALUE, 57);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_STRING_ARRAY);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) map0;
      ArrayUtils.lastIndexOf(objectArray0, (Object) "org.apache.commons.lang3.ArrayUtils", 0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = objectArray0[1];
      ArrayUtils.getLength(objectArray0[2]);
      Integer integer0 = new Integer(0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4UZOKA2s<.?r(A:\"J}B";
      ArrayUtils.subarray(stringArray0, (-1), 56);
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'Q', 5);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-25);
      ArrayUtils.reverse(byteArray0);
      long[] longArray0 = new long[0];
      ArrayUtils.subarray(longArray0, (int) (byte) (-110), (int) (byte) (-25));
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-25);
      intArray0[1] = (-854);
      intArray0[2] = (int) (byte) (-96);
      intArray0[3] = (int) (byte) (-25);
      intArray0[4] = (int) (byte)111;
      intArray0[5] = (-854);
      intArray0[6] = (-4462);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte) (-110), (int) (byte) (-110));
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      ArrayUtils.isSameLength(charArray0, charArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-854);
      doubleArray0[1] = (double) (-25);
      doubleArray0[2] = (double) (-854);
      doubleArray0[3] = (double) (-854);
      doubleArray0[4] = (double) (byte)111;
      doubleArray0[5] = (double) (byte)111;
      intArray0[0] = (int) (byte) (-110);
      doubleArray0[7] = (double) (-4462);
      doubleArray0[8] = (double) (-854);
      ArrayUtils.add(doubleArray0, (-854.0));
      ArrayUtils.reverse(intArray1);
      ArrayUtils.isNotEmpty((float[]) null);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_STRING_ARRAY);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-1);
      ArrayUtils.subarray(intArray0, (-1), (int) (byte) (-1));
      Byte[] byteArray0 = new Byte[2];
      ArrayUtils.toPrimitive(byteArray0, (byte) (-7));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      long[] longArray0 = new long[0];
      ArrayUtils.isSameLength(longArray0, longArray0);
      ArrayUtils.isSameLength((int[]) null, (int[]) null);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)18511;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-1066);
      shortArray0[3] = (short)1807;
      shortArray0[4] = (short)380;
      ArrayUtils.reverse(shortArray0);
      ArrayUtils.nullToEmpty((Byte[]) null);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-623L);
      Long long0 = new Long((-623L));
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      ArrayUtils.isSameLength((short[]) null, (short[]) null);
      ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      ArrayUtils.addAll((boolean[]) null, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (Object) arrayUtils0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.lang3.ArrayUtils
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)91;
      doubleArray0[1] = (double) (byte)91;
      doubleArray0[2] = (double) (byte)91;
      doubleArray0[3] = (double) (byte)91;
      ArrayUtils.contains(doubleArray0, 2882.0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-2271);
      intArray0[1] = (-2271);
      intArray0[2] = (-2146809777);
      ArrayUtils.indexOf(intArray0, (int) (byte)91, (-2271));
      char[] charArray0 = new char[5];
      charArray0[1] = 'Y';
      doubleArray0[3] = (double) 'U';
      charArray0[3] = '$';
      charArray0[4] = 'y';
      ArrayUtils.isSameLength(charArray0, charArray0);
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = (Character) '$';
      characterArray0[1] = (Character) 'y';
      characterArray0[2] = (Character) '$';
      charArray0[2] = 'Y';
      characterArray0[4] = (Character) '$';
      ArrayUtils.toPrimitive(characterArray0, 'Y');
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)91;
      shortArray0[1] = (short) (byte)91;
      ArrayUtils.isEmpty(shortArray0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.addAll(booleanArray0, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true, (-1));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, 'A');
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      ArrayUtils.toMap(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, 0, (long) 0);
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-449));
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'E';
      floatArray0[1] = (float) 'Z';
      ArrayUtils.contains(floatArray0, 69.0F);
      Double double0 = new Double((-1.0));
      Double double1 = new Double(1.5);
      Double.min((-3185.312690974545), (-3185.312690974545));
      Double[] doubleArray0 = new Double[0];
      ArrayUtils.nullToEmpty(doubleArray0);
      ArrayUtils.reverse(booleanArray0);
      char[] charArray0 = new char[1];
      ArrayUtils.isNotEmpty(charArray0);
      short[] shortArray0 = new short[8];
      ArrayUtils.removeElement(shortArray0, (short)4);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.5;
      ArrayUtils.reverse(doubleArray1);
      ArrayUtils.nullToEmpty(doubleArray1);
      ArrayUtils.isNotEmpty((long[]) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toMap(arrayUtils0.EMPTY_OBJECT_ARRAY);
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short)3681, (-1));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)91;
      floatArray0[1] = (float) (byte)91;
      floatArray0[2] = (float) (byte)91;
      ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      objectArray0[6] = object0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2105.13773;
      doubleArray0[1] = 2.147483647E9;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      ArrayUtils.lastIndexOf(doubleArray1, 2.147483647E9, (-248), 1.0);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 2.147483647E9;
      doubleArray2[1] = (double) (-248);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 2.147483647E9;
      doubleArray2[4] = 2.147483647E9;
      doubleArray2[5] = 602.209;
      doubleArray2[6] = 2.147483647E9;
      doubleArray2[7] = 2545.50916;
      ArrayUtils.lastIndexOf(doubleArray2, (-1.0), 2.147483647E9);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 64;
      intArray0[1] = 1553;
      intArray0[2] = 730;
      ArrayUtils.lastIndexOf(intArray0, 730, (-2668));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 730;
      objectArray0[1] = (Object) (byte) (-1);
      objectArray0[2] = (Object) (byte)2;
      objectArray0[3] = (Object) 730;
      objectArray0[4] = (Object) 730;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) (byte)0;
      objectArray0[7] = (Object) 64;
      objectArray0[8] = (Object) 1553;
      ArrayUtils.contains(objectArray0, objectArray0[6]);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      Object object1 = new Object();
      ArrayUtils.lastIndexOf(objectArray0, object1, 2146261585);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = objectArray0[1];
      Short short0 = new Short((short)1220);
      Short[] shortArray0 = new Short[10];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      Short short1 = new Short((short) (-1960));
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[2]);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      ArrayUtils.indexOf(byteArray0, (byte)2, (-1));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)32);
      ArrayUtils.isSameLength(byteArray1, byteArray0);
      Byte[] byteArray2 = new Byte[3];
      byteArray2[0] = (Byte) (byte)91;
      byteArray2[1] = (Byte) (byte)91;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ArrayUtils.nullToEmpty((float[]) null);
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = '*';
      ArrayUtils.isEmpty(charArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mznVISC,2AqReMA4FT";
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '*';
      ArrayUtils.addAll(intArray0, intArray0);
      ArrayUtils.isEmpty((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte)0;
      ArrayUtils.isSameLength((byte[]) null, byteArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_STRING_ARRAY);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ArrayUtils.nullToEmpty((Boolean[]) null);
      ArrayUtils.nullToEmpty((Boolean[]) null);
      Object object0 = new Object();
      ArrayUtils.isSameLength((char[]) null, (char[]) null);
      Object object1 = new Object();
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      Double[] doubleArray0 = new Double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Short short0 = new Short((short)3609);
      Short[] shortArray0 = new Short[4];
      Short short1 = new Short((short)3609);
      shortArray0[0] = short1;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      ArrayUtils.indexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-28), (-4211));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      ArrayUtils.nullToEmpty(longArray0);
      long[] longArray1 = new long[8];
      longArray1[0] = (-2512L);
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = '\"';
      charArray0[2] = ';';
      charArray0[3] = 'y';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      ArrayUtils.reverse(charArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "+t4-b0{Mf^$%L";
      stringArray0[2] = "1.4";
      stringArray0[3] = "dwJ&/!(<k";
      stringArray0[4] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[5] = "Q>4";
      stringArray0[6] = "', is neither of type Map.Entry nor an Array";
      ArrayUtils.isNotEmpty(stringArray0);
      ArrayUtils.isSameLength((short[]) null, (short[]) null);
      ArrayUtils.toObject(charArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '\"';
      doubleArray0[1] = (double) ';';
      doubleArray0[2] = (double) 'y';
      doubleArray0[3] = (double) (-2512L);
      doubleArray0[4] = (double) '\"';
      doubleArray0[5] = (double) (-2512L);
      doubleArray0[6] = (double) 'y';
      ArrayUtils.isEmpty(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement((Object[]) arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, (Object) null);
      ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.reverse(arrayUtils0.EMPTY_INT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ArrayUtils.nullToEmpty((Boolean[]) null);
      Object object0 = new Object();
      float[] floatArray0 = new float[0];
      ArrayUtils.isSameLength(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1049.274469);
      ArrayUtils.indexOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-2146809777));
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, (char[]) null);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, 'y');
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (short)64);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 1654;
      intArray0[2] = 1654;
      Long long0 = new Long(0);
      ArrayUtils.toPrimitive((Long[]) null, 1643L);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-804);
      shortArray0[1] = (short)3519;
      shortArray0[2] = (short) (-804);
      ArrayUtils.isNotEmpty(shortArray0);
      ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      ArrayUtils.isNotEmpty((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.lastIndexOf((Object[]) null, (Object) arrayUtils0, (-1));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ArrayUtils.nullToEmpty((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = Double.valueOf((-988.18185446));
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double(1397.3135986328125);
      doubleArray0[2] = double2;
      ArrayUtils.toPrimitive(doubleArray0);
      ArrayUtils.nullToEmpty((Object[]) doubleArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ArrayUtils.isEmpty((boolean[]) null);
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = new Boolean(true);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(true);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf("H)eNFnjmTQjI|");
      booleanArray0[4] = boolean4;
      ArrayUtils.nullToEmpty(booleanArray0);
      ArrayUtils.indexOf((boolean[]) null, true);
      ArrayUtils.subarray((float[]) null, 0, 2138279926);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = new Long(1271L);
      Long.compareUnsigned(0L, (-1460L));
      Long long2 = new Long(1271L);
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.contains(booleanArray0, false);
      ArrayUtils.contains((float[]) null, (float) 0L);
      Double[] doubleArray0 = new Double[0];
      ArrayUtils.nullToEmpty(doubleArray0);
      ArrayUtils.reverse(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.reverse(booleanArray0);
      ArrayUtils.contains(floatArray0, 2861.0F);
      Double double0 = new Double(1.0F);
      Double double1 = new Double(1.0);
      Double.min((-1275.0), 1.0);
      ArrayUtils.nullToEmpty((Double[]) null);
      ArrayUtils.reverse(booleanArray0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      charArray0[4] = 'Z';
      ArrayUtils.isNotEmpty(charArray0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'Z';
      ArrayUtils.isNotEmpty(floatArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 778.091F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 62.571037F;
      floatArray0[6] = (-355.405F);
      ArrayUtils.isEmpty(floatArray0);
      Integer integer0 = new Integer(0);
      Integer.toUnsignedString(0);
      ArrayUtils.indexOf((Object[]) null, (Object) integer0);
      Integer.toUnsignedString(2137);
      ArrayUtils.subarray((char[]) null, 0, (-523));
      long[] longArray0 = new long[6];
      Integer.compareUnsigned((-523), (-9));
      longArray0[0] = (long) (-1);
      ArrayUtils.lastIndexOf(longArray0, (-1L), 1456);
      ArrayUtils.isNotEmpty((byte[]) null);
      int[] intArray0 = new int[14];
      intArray0[0] = 1378;
      ArrayUtils.reverse(intArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-1);
      ArrayUtils.subarray(intArray0, (-1), (int) (byte) (-1));
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte)0;
      ArrayUtils.toPrimitive(byteArray1, (byte)0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ArrayUtils.toObject((char[]) null);
      char[] charArray0 = new char[6];
      charArray0[5] = 'K';
      charArray0[1] = ';';
      charArray0[2] = '\"';
      charArray0[3] = 'y';
      ArrayUtils.contains(charArray0, '\u0000');
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-601));
      integerArray0[0] = integer0;
      ArrayUtils.toPrimitive(integerArray0, 1422);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-2389));
      Object object0 = new Object();
      Object object1 = new Object();
      ArrayUtils.isSameType(arrayUtils0, object0);
      ArrayUtils.addAll((Object[]) arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, (Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (byte)2);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      ArrayUtils.lastIndexOf(objectArray0, object1);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1553);
      shortArray0[1] = (short)791;
      shortArray0[2] = (short)791;
      shortArray0[3] = (short)791;
      shortArray0[4] = (short)791;
      shortArray0[5] = (short)791;
      shortArray0[6] = (short)791;
      shortArray0[7] = (short)791;
      ArrayUtils.addAll(shortArray0, shortArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toString((Object) arrayUtils0);
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ArrayUtils.indexOf((char[]) null, 'J');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-1);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      ArrayUtils.isSameLength(byteArray0, byteArray1);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      Integer.max(1318, 0);
      integerArray0[0] = integer0;
      ArrayUtils.add(integerArray0, integer0);
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = 'Z';
      charArray0[2] = '8';
      charArray0[3] = '<';
      charArray0[4] = '-';
      ArrayUtils.isSameLength(charArray0, charArray0);
      ArrayUtils.isEmpty((short[]) null);
      ArrayUtils.addAll((short[]) null, (short[]) null);
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte) (-15);
      Byte byte1 = new Byte((byte) (-15));
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte0);
      byteArray0[5] = byte6;
      Byte byte7 = new Byte(byte0);
      byteArray0[6] = byte7;
      Byte byte8 = new Byte(byte0);
      byteArray0[7] = byte8;
      ArrayUtils.toPrimitive(byteArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = object0;
      objectArray0[2] = (Object) arrayUtils0;
      objectArray0[3] = (Object) arrayUtils0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) arrayUtils0;
      objectArray0[6] = object0;
      objectArray0[7] = object0;
      ArrayUtils.addAll(objectArray0, (Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (Object) null, 48);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      booleanArray0[7] = true;
      ArrayUtils.removeElement(booleanArray0, false);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1678);
      shortArray0[1] = (short)376;
      ArrayUtils.addAll(shortArray0, shortArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      Object object0 = new Object();
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = 'B';
      charArray0[2] = 'M';
      ArrayUtils.isSameLength(charArray0, (char[]) null);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, object1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Object
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = new Boolean((String) null);
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.valueOf(true);
      booleanArray0[2] = boolean1;
      ArrayUtils.nullToEmpty(booleanArray0);
      ArrayUtils.indexOf((boolean[]) null, (boolean) boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer integer0 = new Integer((-3014));
      ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, (Object) integer0, (-3014));
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, (long[]) null);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, (char[]) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, (Object) "69z~g`({");
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.String
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      Float float0 = new Float((double) (-1));
      Float float1 = new Float(2861.0F);
      Object object0 = new Object();
      ArrayUtils.toString((Object) "1.2");
      Float float2 = new Float(13.135083);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, 1264L);
      ArrayUtils.isSameLength((short[]) null, arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      Long long0 = new Long(611L);
      ArrayUtils.toPrimitive((Long[]) null, (long) (short)14);
      ArrayUtils.reverse((long[]) null);
      ArrayUtils.nullToEmpty(floatArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)91;
      ArrayUtils.reverse(longArray0);
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, (-623L));
      ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      ArrayUtils.lastIndexOf(charArray0, '$');
      ArrayUtils.removeElement(booleanArray0, true);
      short[] shortArray0 = new short[0];
      ArrayUtils.addAll(shortArray0, shortArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '$';
      doubleArray0[1] = (double) '$';
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) '$';
      ArrayUtils.nullToEmpty(doubleArray0);
      ArrayUtils.contains(booleanArray0, false);
      ArrayUtils.toMap((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short) (-1791));
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-2277));
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-1791);
      floatArray0[1] = (float) (short)shortArray0[0];
      floatArray0[2] = (float) (short) (-1791);
      floatArray0[3] = (float) (short) (-2277);
      floatArray0[4] = (float) (short)shortArray0[0];
      floatArray0[5] = (float) (short)shortArray0[0];
      ArrayUtils.lastIndexOf(floatArray0, (-1655.4456F), 1);
      Short short2 = new Short((short)512);
      Float[] floatArray1 = new Float[8];
      floatArray1[0] = (Float) (-1791.0F);
      floatArray1[1] = (Float) (-1791.0F);
      floatArray1[2] = (Float) (-2277.0F);
      floatArray1[3] = (Float) (-1791.0F);
      floatArray1[4] = (Float) (-1791.0F);
      floatArray1[5] = (Float) (-1791.0F);
      floatArray1[6] = (Float) (-1791.0F);
      floatArray1[7] = (Float) (-1791.0F);
      ArrayUtils.toPrimitive(floatArray1, 1710.6747F);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Long long0 = new Long(1L);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, 670L);
      ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_STRING_ARRAY, (Object[]) arrayUtils0.EMPTY_CLASS_ARRAY);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short) (-1791));
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-2277));
      shortArray0[1] = short1;
      shortArray0[2] = shortArray0[0];
      ArrayUtils.nullToEmpty(shortArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)shortArray0[1];
      doubleArray0[1] = (double) (short)shortArray0[2];
      doubleArray0[2] = (double) (short) (-2277);
      ArrayUtils.toObject(doubleArray0);
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ArrayUtils.toObject((char[]) null);
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = ';';
      charArray0[2] = '\"';
      charArray0[3] = 'y';
      charArray0[4] = '(';
      charArray0[5] = 'R';
      ArrayUtils.reverse(charArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Float float0 = new Float((double) (-1));
      Float float1 = new Float(1.0F);
      Float float2 = new Float(1.0);
      Float.max(478.67F, 1.0F);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, false);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.reverse(arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short)812);
      ArrayUtils.reverse(arrayUtils0.EMPTY_DOUBLE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toMap(arrayUtils0.EMPTY_OBJECT_ARRAY);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      ArrayUtils.removeElement(floatArray0, 1755.2621F);
      ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Object) "Array and element cannot both be null", (-1));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-623L);
      doubleArray0[2] = 2882.0;
      doubleArray0[3] = (double) (-623L);
      ArrayUtils.contains(doubleArray0, (-623.0));
      ArrayUtils.indexOf(arrayUtils0.EMPTY_INT_ARRAY, 5, (-2146809777));
      ArrayUtils.toObject(arrayUtils0.EMPTY_FLOAT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1212;
      floatArray0[1] = (float) 1212;
      floatArray0[2] = (float) 1212;
      floatArray0[3] = (float) 1212;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-1);
      ArrayUtils.removeElement(floatArray0, 1212.0F);
      ArrayUtils.subarray(arrayUtils0.EMPTY_CHAR_ARRAY, 1212, 1212);
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      Object object0 = new Object();
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      ArrayUtils.reverse(arrayUtils0.EMPTY_BYTE_ARRAY);
      ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-3204));
      ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.contains(arrayUtils0.EMPTY_FLOAT_ARRAY, 1.0F);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      Byte byte0 = new Byte((byte) (-62));
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      ArrayUtils.nullToEmpty(byteArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, 2055.92);
      Object object0 = new Object();
      ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      ArrayUtils.toMap(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      Integer integer0 = new Integer((-1516));
      Object object1 = new Object();
      Object object2 = new Object();
      ArrayUtils.addAll((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.addAll((Object[]) null, objectArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1411.0161F);
      floatArray0[1] = (-966.6F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-340.4F);
      ArrayUtils.nullToEmpty(floatArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, 74.0);
      ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll((int[]) null, (int[]) null);
      ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_STRING_ARRAY);
      double double0 = 1.0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, 5, 1.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)1932;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1932;
      shortArray0[5] = (short) (-1426);
      ArrayUtils.reverse(shortArray0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) arrayUtils0;
      objectArray0[1] = (Object) arrayUtils0;
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      objectArray0[2] = (Object) arrayUtils0;
      objectArray0[3] = (Object) arrayUtils0;
      objectArray0[4] = (Object) arrayUtils0;
      objectArray0[5] = (Object) arrayUtils0;
      ArrayUtils.toObject(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.toObject(arrayUtils0.EMPTY_INT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-44);
      ArrayUtils.isEmpty(byteArray0);
      ArrayUtils.subarray((double[]) null, (-1989), (-339));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll((float[]) null, arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-51);
      ArrayUtils.indexOf(byteArray0, (byte) (-38), (int) (byte) (-51));
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)81;
      intArray0[1] = (int) (byte) (-38);
      ArrayUtils.toObject(byteArray0);
      ArrayUtils.isNotEmpty(intArray0);
      ArrayUtils.toObject((double[]) null);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      ArrayUtils.removeElement(doubleArray0, 36.7492400333);
      ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, (int[]) null);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, intArray0);
      ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.isSameLength((int[]) null, intArray0);
      ArrayUtils.toMap(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ArrayUtils.indexOf((char[]) null, 'J');
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-10.713776326279778);
      doubleArray0[1] = (double) (-1);
      doubleArray0[3] = (double) 'J';
      doubleArray0[2] = (double) (-1);
      ArrayUtils.contains(doubleArray0, (double) (-1));
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      ArrayUtils.indexOf(intArray0, (-1), (-2271));
      ArrayUtils.isSameLength((char[]) null, (char[]) null);
      ArrayUtils.isNotEmpty((char[]) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 74.0;
      objectArray0[1] = (Object) (-1);
      objectArray0[2] = (Object) 74.0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (-1);
      objectArray0[5] = (Object) (-1);
      ArrayUtils.isSameLength(objectArray0, objectArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "`vGv8<nSn`";
      stringArray0[1] = "java.specification.vendor";
      stringArray0[2] = "java.compiler";
      stringArray0[3] = "java.lang.Boolean";
      stringArray0[4] = ")Wnr.";
      stringArray0[5] = ".R{08me";
      stringArray0[6] = "r";
      ArrayUtils.isNotEmpty(stringArray0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = new Short((short)0);
      Object object0 = new Object();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      char[] charArray0 = new char[7];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (short)0, 797);
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      ArrayUtils.lastIndexOf(byteArray0, (byte) (-84));
      ArrayUtils.reverse(charArray1);
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.toObject(longArray0);
      ArrayUtils.contains(doubleArray0, (double) (short)0, (-602.209));
      ArrayUtils.isNotEmpty(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      Integer integer0 = new Integer((-1));
      ArrayUtils.isEquals(arrayUtils0, integer0);
      ArrayUtils.addAll((int[]) null, (int[]) null);
      ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      ArrayUtils.subarray((int[]) null, (-51), (-51));
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      charArray0[1] = 'b';
      charArray0[2] = '_';
      charArray0[3] = '+';
      charArray0[4] = 'c';
      charArray0[5] = '>';
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, charArray0);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      ArrayUtils.reverse(arrayUtils0.EMPTY_INT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ArrayUtils.indexOf((char[]) null, 'J');
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-51);
      shortArray0[1] = (short) (byte) (-51);
      shortArray0[2] = (short) (byte) (-51);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      ArrayUtils.toPrimitive(shortArray1);
      ArrayUtils.clone((char[]) null);
      ArrayUtils.isNotEmpty((Object[]) shortArray1);
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-623L);
      doubleArray0[2] = 2882.0;
      doubleArray0[3] = (double) (-623L);
      ArrayUtils.contains(doubleArray0, (-623.0));
      ArrayUtils.indexOf(arrayUtils0.EMPTY_INT_ARRAY, 5, (-2146809777));
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, 'y');
      ArrayUtils.isNotEmpty(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-1);
      ArrayUtils.subarray(intArray0, (-1), (int) (byte) (-1));
      Short.toUnsignedLong((short) (-646));
      ArrayUtils.toPrimitive((Short[]) null, (short) (byte) (-1));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'J';
      doubleArray0[1] = (double) 'J';
      ArrayUtils.addAll(doubleArray0, doubleArray0);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) (-1);
      integerArray0[4] = (Integer) (-1);
      integerArray0[5] = (Integer) (-1);
      ArrayUtils.toPrimitive(integerArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      ArrayUtils.toMap(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      ArrayUtils.toMap(arrayUtils0.EMPTY_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Object) arrayUtils0, 0);
      ArrayUtils.toString((Object) null, "java.lang.Boolean");
      ArrayUtils.isSameLength((long[]) null, arrayUtils0.EMPTY_LONG_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, (char[]) null);
      Object object1 = new Object();
      ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils.isSameType(object0, "Cannot store ");
      ArrayUtils.toPrimitive((Character[]) null);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-479));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-479));
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1864);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-479));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(877);
      integerArray0[5] = integer5;
      ArrayUtils.toPrimitive(integerArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toMap(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (Object) arrayUtils0, 2146261585);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BYTE_ARRAY);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, 0.0F);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ArrayUtils.nullToEmpty((Boolean[]) null);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)6;
      shortArray0[3] = (short) (-449);
      ArrayUtils.addAll((short[]) null, shortArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.isNotEmpty(intArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      ArrayUtils.isSameLength((float[]) null, arrayUtils0.EMPTY_FLOAT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ArrayUtils.nullToEmpty((Boolean[]) null);
      Object object0 = new Object();
      Object object1 = new Object();
      ArrayUtils.add((Object[]) null, object1);
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      ArrayUtils.toPrimitive((Byte[]) null, (byte) (-26));
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      Float float0 = new Float((double) (-1));
      Float float1 = new Float(2861.0F);
      Object object0 = new Object();
      ArrayUtils.toString((Object) "1.2");
      Float float2 = new Float(13.135083);
      Double double0 = new Double((-1151.0));
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, 445L);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3901;
      shortArray0[1] = (short)342;
      shortArray0[2] = (short) (-402);
      shortArray0[3] = (short)3584;
      shortArray0[4] = (short) (-217);
      shortArray0[5] = (short)1478;
      ArrayUtils.isSameLength((short[]) null, shortArray0);
      ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (Object[]) arrayUtils0.EMPTY_STRING_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = '4';
      charArray0[2] = '@';
      ArrayUtils.indexOf(charArray0, 'K', (-3080));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-44);
      ArrayUtils.isEmpty(byteArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-44);
      longArray0[1] = (long) (byte) (-44);
      longArray0[2] = (long) (byte) (-44);
      longArray0[3] = (long) (byte) (-44);
      ArrayUtils.isSameLength(longArray0, longArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-44);
      doubleArray0[1] = 3546.0805155571124;
      doubleArray0[2] = (double) (-44L);
      ArrayUtils.lastIndexOf(doubleArray0, 1397.8788963, (int) (byte) (-44));
      ArrayUtils.nullToEmpty(doubleArray0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-44);
      Object[] objectArray0 = new Object[0];
      ArrayUtils.toMap(objectArray0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Long long0 = new Long(1L);
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      ArrayUtils.reverse(arrayUtils0.EMPTY_SHORT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)32);
      ArrayUtils.isSameLength(byteArray1, byteArray0);
      Byte[] byteArray2 = new Byte[3];
      byteArray2[0] = (Byte) (byte)91;
      byteArray2[1] = (Byte) (byte)91;
      byteArray2[2] = (Byte) (byte)91;
      ArrayUtils.toPrimitive(byteArray2);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = objectArray0[1];
      ArrayUtils.clone((float[]) null);
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      ArrayUtils.getLength(objectArray0[2]);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'S';
      ArrayUtils.lastIndexOf(charArray0, 'H', 0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1820.2583F);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)63;
      ArrayUtils.removeElement(byteArray0, (byte) (-114));
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.subarray(booleanArray0, (int) (byte) (-114), 2467);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-114);
      intArray0[1] = (int) (byte)63;
      intArray0[2] = (int) (byte)63;
      intArray0[3] = (int) (byte)63;
      intArray0[4] = (-2981);
      intArray0[5] = (int) (byte)63;
      ArrayUtils.nullToEmpty(intArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      ArrayUtils.toString((Object) arrayUtils0);
      Integer integer0 = new Integer((-1));
      ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_CLASS_ARRAY, (Object) arrayUtils0, (-1));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-5041L);
      double[] doubleArray0 = new double[0];
      ArrayUtils.lastIndexOf(doubleArray0, (double) 0L, (-2360));
      ArrayUtils.nullToEmpty(doubleArray0);
      char[] charArray0 = new char[4];
      charArray0[1] = 'T';
      charArray0[2] = 'd';
      charArray0[3] = 'I';
      ArrayUtils.nullToEmpty(charArray0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll((int[]) null, (int[]) null);
      ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_STRING_ARRAY);
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, (int[]) null);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer integer0 = new Integer((-1));
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1));
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ArrayUtils.isSameLength((long[]) null, (long[]) null);
      Double double0 = new Double(1560.9897985996);
      Double double1 = new Double((-3276.344362535865));
      Double double2 = new Double((byte) (-53));
      ArrayUtils.nullToEmpty((Short[]) null);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2185L;
      longArray0[1] = (-409L);
      ArrayUtils.toObject(longArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2185L;
      ArrayUtils.lastIndexOf((short[]) null, (short)57, (int) (short)1777);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      ArrayUtils.isSameType(object0, "Cannot store ");
      Integer integer0 = new Integer(2252);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      ArrayUtils.reverse(arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, object0, (-1));
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) 1, 652);
      Byte byte0 = new Byte((byte) (-47));
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-5041L);
      ArrayUtils.isSameLength(longArray0, (long[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)114;
      ArrayUtils.subarray(byteArray0, 2, (int) (byte)114);
      int[] intArray0 = new int[2];
      intArray0[0] = 8;
      intArray0[1] = (int) (byte)65;
      ArrayUtils.isEmpty(intArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, 36, (double) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 64;
      intArray0[2] = 730;
      ArrayUtils.lastIndexOf(intArray0, 730, (-2668));
      ArrayUtils.nullToEmpty((float[]) null);
      ArrayUtils.isEmpty((char[]) null);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1602.31F);
      floatArray0[1] = (-3494.17F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1791.0F);
      floatArray0[4] = (-1094.5416F);
      ArrayUtils.isSameLength((float[]) null, floatArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1094.5416F);
      doubleArray0[1] = (double) (-3494.17F);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      ArrayUtils.isSameLength((float[]) null, (float[]) null);
      ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      ArrayUtils.isSameLength(floatArray0, (float[]) null);
      AbstractMap.SimpleImmutableEntry<Object, String>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Object, String>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 6);
      Object object0 = new Object();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(object0, "Nl.Mdg7j`NDX\"w(3");
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Object object1 = new Object();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, String>(object1, "Nl.Mdg7j`NDX\"w(3");
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      Object object2 = new Object();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Object, String>(object2, "Nl.Mdg7j`NDX\"w(3");
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Object, String>("IH`Z~rYZ", "IH`Z~rYZ");
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleImmutableEntry1);
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleImmutableEntry4, "Nl.Mdg7j`NDX\"w(3");
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry5;
      ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer integer0 = new Integer((-1));
      ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Object) "30w?ge", (-1));
      ArrayUtils.isNotEmpty((Object[]) arrayUtils0.EMPTY_STRING_ARRAY);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ArrayUtils.isSameLength((long[]) null, (long[]) null);
      Double double0 = new Double((-3276.344362535865));
      Double[] doubleArray0 = new Double[2];
      doubleArray0[1] = double0;
      ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[1]);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Object[] objectArray0 = new Object[14];
      Object object0 = new Object();
      Object object1 = new Object();
      ArrayUtils.lastIndexOf(objectArray0, object1, 2360);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.subarray(floatArray0, (-1), (-1));
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.addAll(booleanArray0, booleanArray0);
      Long.valueOf(0L);
      ArrayUtils.lastIndexOf((int[]) null, 3, 3);
      ArrayUtils.nullToEmpty((float[]) null);
      ArrayUtils.isEmpty((char[]) null);
      Float[] floatArray0 = new Float[0];
      ArrayUtils.nullToEmpty(floatArray0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-44);
      ArrayUtils.isEmpty(byteArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-44);
      longArray0[1] = (long) (byte) (-44);
      longArray0[2] = (long) (byte) (-44);
      longArray0[3] = (long) (byte) (-44);
      ArrayUtils.isSameLength(longArray0, longArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-44);
      doubleArray0[1] = 3546.0805155571124;
      doubleArray0[2] = (double) (-44L);
      ArrayUtils.lastIndexOf(doubleArray0, 1397.8788963, (int) (byte) (-44));
      ArrayUtils.nullToEmpty(doubleArray0);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-44);
      shortArray0[1] = (short) (byte) (-44);
      ArrayUtils.contains(shortArray0, (short)1332);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.clone(arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.contains((char[]) null, '%');
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Boolean[] booleanArray1 = new Boolean[6];
      booleanArray1[1] = (Boolean) false;
      Boolean.valueOf(false);
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) false;
      booleanArray1[5] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      int int0 = (-1899);
      ArrayUtils.indexOf((double[]) null, 735.0, (-1899));
      Character character0 = new Character('z');
      Character character1 = new Character('z');
      Character.valueOf('4');
      Character character2 = new Character('T');
      Character character3 = new Character('q');
      Character.valueOf('|');
      Character.valueOf('4');
      Character character4 = new Character('1');
      Character[] characterArray0 = new Character[0];
      ArrayUtils.toPrimitive(characterArray0);
      boolean[] booleanArray3 = new boolean[1];
      booleanArray3[0] = (boolean) booleanArray1[3];
      ArrayUtils.isSameLength(booleanArray2, booleanArray3);
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-2697L));
      longArray0[0] = long0;
      try { 
        Long.valueOf("java.vm.info", 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll((int[]) null, (int[]) null);
      ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_STRING_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.isSameLength((int[]) null, (int[]) null);
      ArrayUtils.reverse((int[]) null);
      Integer integer0 = new Integer(3471);
      ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, (Object) integer0, 3471);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      ArrayUtils.add((Object[]) null, object0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, 100, 100);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ArrayUtils.nullToEmpty((float[]) null);
      Long long0 = new Long(611L);
      ArrayUtils.toPrimitive((Long[]) null, (long) (short)9);
      ArrayUtils.isSameLength((short[]) null, (short[]) null);
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      char[] charArray0 = new char[0];
      double[] doubleArray0 = new double[7];
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      ArrayUtils.reverse((Object[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, (int) (byte)0);
      ArrayUtils.nullToEmpty(doubleArray0);
      ArrayUtils.nullToEmpty(charArray0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.isSameLength((int[]) null, arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.isEmpty((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.lastIndexOf((double[]) null, (double) (byte)0, (int) (byte)0);
      ArrayUtils.isNotEmpty(byteArray0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toString((Object) arrayUtils0, "java.lang.Object");
      Object object0 = new Object();
      ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, (Object) arrayUtils0, (-1));
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Double double0 = new Double((-3728.697232784));
      Double double1 = new Double((-1));
      Double double2 = new Double(1469.5871287);
      Double double3 = new Double((-1));
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (-939.9565210631085));
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      ArrayUtils.isSameLength((char[]) null, arrayUtils0.EMPTY_CHAR_ARRAY);
      Object object0 = new Object();
      ArrayUtils.add((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (Object) null);
      ArrayUtils.isNotEmpty((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ArrayUtils.indexOf((char[]) null, 'J');
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-41.28);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 'J';
      doubleArray0[4] = (double) (-1);
      ArrayUtils.contains(doubleArray0, (double) (-1));
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ArrayUtils.indexOf((char[]) null, 'J');
      ArrayUtils.reverse((boolean[]) null);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'J';
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 1449.645F;
      floatArray0[5] = (float) (-1);
      ArrayUtils.nullToEmpty(floatArray0);
      ArrayUtils.addAll(floatArray0, floatArray0);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-24);
      ArrayUtils.lastIndexOf(byteArray0, (byte)56, (int) (byte)2);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.reverse(booleanArray0);
      ArrayUtils.addAll((int[]) null, (int[]) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) false;
      ArrayUtils.isEmpty(objectArray0);
      Boolean[] booleanArray1 = new Boolean[7];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) false;
      booleanArray1[5] = (Boolean) false;
      booleanArray1[6] = (Boolean) false;
      ArrayUtils.toPrimitive(booleanArray1, true);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ArrayUtils.nullToEmpty((float[]) null);
      String[] stringArray0 = new String[2];
      Long long0 = new Long(611L);
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      ArrayUtils.isSameLength((short[]) null, (short[]) null);
      ArrayUtils.isSameLength((short[]) null, (short[]) null);
      ArrayUtils.isSameLength((Object[]) stringArray0, (Object[]) null);
      Object object0 = new Object();
      ArrayUtils.isEmpty((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.clone(arrayUtils0.EMPTY_FLOAT_ARRAY);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) arrayUtils0;
      objectArray0[1] = (Object) arrayUtils0;
      objectArray0[2] = (Object) arrayUtils0;
      objectArray0[3] = (Object) arrayUtils0;
      objectArray0[4] = (Object) arrayUtils0;
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.reverse(arrayUtils0.EMPTY_FLOAT_ARRAY);
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils.isSameLength((double[]) null, (double[]) null);
      ArrayUtils.subarray((char[]) null, (int) (short) (-164), (int) (short) (-164));
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      byte[] byteArray0 = new byte[9];
      Object object1 = new Object();
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      Object object2 = new Object();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_CHAR_ARRAY, '(', 1364);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      short[] shortArray0 = null;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      double[] doubleArray0 = new double[3];
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      char[] charArray0 = new char[1];
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) (short) (-149);
      floatArray0[2] = (float) (short) (-149);
      byte[] byteArray0 = new byte[2];
      doubleArray0[1] = (double) (byte) (-84);
      byteArray0[1] = (byte) (-84);
      ArrayUtils.lastIndexOf(byteArray0, (byte) (-84));
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.toObject(longArray0);
      ArrayUtils.contains(doubleArray0, (double) 0.0F, (double) 0.0F);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'E';
      floatArray0[1] = (float) 'Z';
      ArrayUtils.contains(floatArray0, 69.0F);
      Double double0 = new Double((-1.0));
      Double double1 = new Double(1.5);
      Double.min((-3185.312690974545), (-3185.312690974545));
      Double[] doubleArray0 = new Double[0];
      ArrayUtils.nullToEmpty(doubleArray0);
      ArrayUtils.reverse(booleanArray0);
      char[] charArray0 = new char[1];
      ArrayUtils.isNotEmpty(charArray0);
      ArrayUtils.indexOf(booleanArray0, false);
      ArrayUtils.subarray(floatArray0, (-887), (-887));
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      Integer integer0 = new Integer(501);
      ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, 501);
      ArrayUtils.isNotEmpty(objectArray0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = objectArray0[1];
      int[] intArray0 = new int[2];
      intArray0[0] = (-2408);
      intArray0[1] = 31;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      ArrayUtils.isEmpty(objectArray0);
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(";");
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf(true);
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(false);
      booleanArray0[3] = boolean3;
      ArrayUtils.toPrimitive(booleanArray0);
      ArrayUtils.isSameLength(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ArrayUtils.toObject((char[]) null);
      Integer integer0 = new Integer((-1843));
      ArrayUtils.isEquals(integer0, integer0);
      ArrayUtils.clone((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      ArrayUtils.lastIndexOf(objectArray0, object1, 3);
      Long[] longArray0 = new Long[3];
      Long.getLong("`1hgNLzun+s");
      longArray0[0] = null;
      Long long0 = new Long(3);
      longArray0[1] = long0;
      Long long1 = new Long((long) longArray0[1]);
      longArray0[2] = long1;
      ArrayUtils.toPrimitive(longArray0, (long) longArray0[1]);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.nullToEmpty((Object[]) arrayUtils0.EMPTY_CLASS_ARRAY);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (-1), (byte)123);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      float[] floatArray0 = new float[5];
      ArrayUtils.nullToEmpty(floatArray0);
      Long long0 = new Long(403L);
      ArrayUtils.toPrimitive((Long[]) null);
      ArrayUtils.isSameLength((short[]) null, (short[]) null);
      ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = 'J';
      charArray0[3] = '7';
      ArrayUtils.isNotEmpty(charArray0);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.reverse(booleanArray0);
      ArrayUtils.clone(floatArray0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_SHORT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll((int[]) null, (int[]) null);
      ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_STRING_ARRAY);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      ArrayUtils.isSameLength((int[]) null, arrayUtils0.EMPTY_INT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      Float float0 = new Float((double) (-1));
      Float float1 = new Float(2861.0F);
      Object object0 = new Object();
      ArrayUtils.toString(object0, "1.2");
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, (short[]) null);
      ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (Object) "java.lang.Object@3ccd899e", (-50));
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.subarray(arrayUtils0.EMPTY_CHAR_ARRAY, 1212, 1212);
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      Object object0 = new Object();
      ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      Object object1 = new Object();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (byte)44);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-337);
      shortArray0[2] = (short)0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'w';
      longArray0[1] = (long) (short)1;
      longArray0[2] = (long) (short) (-337);
      longArray0[3] = 0L;
      longArray0[4] = (long) (short) (-337);
      longArray0[5] = 858L;
      longArray0[6] = (long) (short)1;
      ArrayUtils.indexOf(longArray0, 74L, (int) (short)0);
      ArrayUtils.contains(longArray0, 1L);
      ArrayUtils.lastIndexOf((double[]) null, (double) (short) (-337), (int) (short) (-337), (double) 74L);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      ArrayUtils.clone(arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.isNotEmpty((Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      Object[] objectArray0 = new Object[0];
      ArrayUtils.indexOf(objectArray0, (Object) arrayUtils0, 87);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      ArrayUtils.addAll(objectArray1, objectArray1);
      ArrayUtils.lastIndexOf(objectArray0, (Object) null, 48);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double[]) null);
      ArrayUtils.nullToEmpty((boolean[]) null);
      ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement((int[]) null, (-1));
      ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_STRING_ARRAY);
      boolean[] booleanArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.subarray(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), 15);
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, booleanArray0);
      ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-5949));
      ArrayUtils.subarray(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = new Long(1271L);
      Long.compareUnsigned(0L, (-1460L));
      Long long2 = new Long(1271L);
      ArrayUtils.toPrimitive((Long[]) null, 1271L);
      ArrayUtils.isNotEmpty((short[]) null);
      ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ArrayUtils.nullToEmpty((float[]) null);
      Long long0 = new Long(611L);
      ArrayUtils.toPrimitive((Long[]) null, (long) (short)9);
      ArrayUtils.isSameLength((short[]) null, (short[]) null);
      ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      ArrayUtils.nullToEmpty((Long[]) null);
      ArrayUtils.toObject((short[]) null);
      double[] doubleArray0 = new double[0];
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      ArrayUtils.isSameLength(booleanArray0, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      Integer[] integerArray0 = new Integer[5];
      ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, 1L);
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) (-1);
      integerArray0[4] = (Integer) (-1);
      ArrayUtils.nullToEmpty(integerArray0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ArrayUtils.indexOf((char[]) null, 'J');
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      ArrayUtils.subarray((short[]) null, (-1), (-421));
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'J';
      intArray0[1] = (int) 'J';
      intArray0[2] = (int) 'J';
      ArrayUtils.reverse(intArray0);
      ArrayUtils.toObject((boolean[]) null);
      ArrayUtils.addAll((short[]) null, (short[]) null);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, (-1639), 'M');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1639, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_STRING_ARRAY, arrayUtils0.EMPTY_STRING_ARRAY);
      ArrayUtils.isNotEmpty((boolean[]) null);
      ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      ArrayUtils.nullToEmpty(longArray0);
      long[] longArray1 = new long[8];
      longArray1[0] = (-2512L);
      longArray1[1] = 1L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = 0L;
      longArray1[5] = 2146L;
      longArray1[6] = (-904L);
      longArray1[7] = 0L;
      ArrayUtils.add(longArray1, 0L);
      Integer integer0 = new Integer(4128);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      String[] stringArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_STRING_ARRAY, arrayUtils0.EMPTY_STRING_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_OBJECT_ARRAY, arrayUtils0.EMPTY_OBJECT_ARRAY);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) arrayUtils0;
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, (Object[]) stringArray0);
      ArrayUtils.lastIndexOf(objectArray1, (Object) arrayUtils0, 507);
      ArrayUtils.toMap(arrayUtils0.EMPTY_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-5041L);
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 2332L;
      longArray0[5] = (-144L);
      ArrayUtils.removeElement(longArray0, (-5041L));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)100;
      ArrayUtils.contains(byteArray0, (byte) (-72));
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)2357;
      ArrayUtils.removeElement(shortArray0, (short) (byte) (-50));
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.indexOf(booleanArray0, false, (-1412));
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      ArrayUtils.isEmpty((boolean[]) null);
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = new Boolean((String) null);
      booleanArray0[0] = boolean0;
      // Undeclared exception!
      try { 
        ArrayUtils.add((String[]) null, 4, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, 0L);
      ArrayUtils.contains(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-72));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-72);
      shortArray0[1] = (short) (byte)100;
      shortArray0[2] = (short) (byte)0;
      ArrayUtils.lastIndexOf(shortArray0, (short)2357);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, ' ');
      ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, 'm');
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      ArrayUtils.addAll((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.isSameLength((long[]) null, (long[]) null);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-2262));
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      char[] charArray0 = new char[1];
      Object[] objectArray0 = new Object[1];
      ArrayUtils.nullToEmpty(objectArray0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      ArrayUtils.nullToEmpty(shortArray0);
      ArrayUtils.toObject(shortArray0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2230.7F;
      floatArray0[1] = (-1380.39F);
      ArrayUtils.indexOf(floatArray0, (-3073.0F), (-328));
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1380.39F);
      doubleArray0[1] = (double) (-3073.0F);
      doubleArray0[2] = (double) (-809L);
      doubleArray0[3] = (double) (-328);
      ArrayUtils.contains(doubleArray0, (double) (-328));
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2185L;
      longArray0[1] = (-409L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-51);
      ArrayUtils.contains(byteArray0, (byte)0);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)93;
      shortArray0[1] = (short) (byte)110;
      shortArray0[2] = (short) (byte)110;
      ArrayUtils.lastIndexOf(shortArray0, (short) (-3323));
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)0);
      ArrayUtils.isSameLength((double[]) null, arrayUtils0.EMPTY_DOUBLE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-1403));
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      ArrayUtils.reverse(intArray0);
      Object object1 = new Object();
      Byte byte0 = new Byte((byte) (-124));
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, longArray0);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.reverse(arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)32);
      ArrayUtils.isSameLength(byteArray1, byteArray0);
      Byte[] byteArray2 = new Byte[4];
      byteArray2[0] = (Byte) (byte)0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)32;
      shortArray0[2] = (short) (byte)32;
      shortArray0[5] = (short) (byte)32;
      shortArray0[6] = (short) (byte)0;
      ArrayUtils.isEmpty(shortArray0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-78);
      ArrayUtils.isSameLength(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (-78);
      doubleArray0[2] = (double) (-78);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-111);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (-78);
      objectArray0[2] = (Object) (-78.0);
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) (-78.0);
      doubleArray0[2] = (double) (-78);
      ArrayUtils.addAll(objectArray0, objectArray0);
      AbstractMap.SimpleImmutableEntry<Integer, String>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, String>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 5);
      Integer integer0 = new Integer((-1137));
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "");
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleImmutableEntry1);
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry4;
      Integer integer1 = Integer.getInteger("java.lang.Integer", (Integer) (-78));
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer1, "java.lang.Integer");
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry5;
      ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      ArrayUtils.toMap(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.lastIndexOf(charArray0, '$');
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) '$';
      doubleArray0[3] = (double) (-1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      ArrayUtils.reverse((Object[]) null);
      doubleArray0[1] = (double) (byte)0;
      ArrayUtils.toObject((int[]) null);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)84;
      ArrayUtils.add(floatArray0, (float) (byte)0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      ArrayUtils.isEmpty(longArray0);
      ArrayUtils.toPrimitive((Float[]) null);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-2271);
      intArray0[1] = (-2271);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.addAll(booleanArray0, booleanArray0);
      Long.valueOf(1271L);
      ArrayUtils.lastIndexOf(intArray0, (-2271), (-2271));
      ArrayUtils.nullToEmpty((float[]) null);
      ArrayUtils.isEmpty((char[]) null);
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(546.2987200960722);
      floatArray0[0] = float0;
      ArrayUtils.nullToEmpty(floatArray0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      ArrayUtils.isSameLength((float[]) null, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_INT_ARRAY, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      ArrayUtils.lastIndexOf(objectArray0, object1);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      ArrayUtils.lastIndexOf(longArray0, (-11L));
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)73;
      shortArray0[1] = (short) (-196);
      ArrayUtils.clone(shortArray0);
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)48;
      Byte byte1 = new Byte((byte)48);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)48);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)42);
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)48);
      byteArray0[4] = byte5;
      try { 
        Byte.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 487.0F;
      floatArray0[1] = (-1655.4456F);
      floatArray0[2] = (-1379.6012F);
      ArrayUtils.isSameLength(floatArray0, floatArray0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.isNotEmpty(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BYTE_ARRAY);
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (-2832.9958F));
      ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-560.0317));
      ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, 3253.370941302225);
      ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.removeElement(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1020), 12);
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.reverse(arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.reverse(arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.addAll((Object[]) arrayUtils0.EMPTY_CLASS_ARRAY, (Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.indexOf(booleanArray0, true);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[2] = objectArray0[1];
      ArrayUtils.clone((float[]) null);
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      ArrayUtils.getLength(objectArray0[2]);
      Integer integer0 = new Integer(0);
      ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = (-1);
      intArray0[8] = 0;
      ArrayUtils.isSameLength(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      ArrayUtils.indexOf((char[]) null, 'J');
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-10.713776326279778);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 'J';
      doubleArray0[2] = (double) (-1);
      ArrayUtils.contains(doubleArray0, (double) (-1));
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      ArrayUtils.indexOf(intArray0, (-1), (-2271));
      ArrayUtils.isSameLength((char[]) null, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-5041L);
      longArray0[2] = 0L;
      longArray0[3] = (-1279L);
      longArray0[4] = 2332L;
      longArray0[5] = (-144L);
      ArrayUtils.removeElement(longArray0, (-5041L));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)100;
      ArrayUtils.contains(byteArray0, (byte) (-72));
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)2357;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.lastIndexOf(shortArray0, (short) (-43));
      ArrayUtils.contains(shortArray0, (short) (byte)0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = 'D';
      charArray0[2] = '3';
      ArrayUtils.reverse(charArray0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.add(arrayUtils0.EMPTY_STRING_ARRAY, "4.0");
      ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, 'A');
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)8, 3103);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) arrayUtils0;
      Object object0 = new Object();
      objectArray0[3] = objectArray0[3];
      // Undeclared exception!
      try { 
        ArrayUtils.addAll((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot store java.lang.Object in an array of java.lang.Double
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      ArrayUtils.clone((char[]) null);
      ArrayUtils.isNotEmpty((Object[]) arrayUtils0.EMPTY_STRING_ARRAY);
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      int[] intArray0 = new int[3];
      ArrayUtils.removeElement((long[]) null, (long) 730);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)57;
      ArrayUtils.contains(byteArray0, (byte) (-92));
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      ArrayUtils.nullToEmpty((long[]) null);
      ArrayUtils.reverse(intArray1);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      ArrayUtils.isEmpty(objectArray0);
      ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'J';
      intArray0[1] = (int) 'J';
      ArrayUtils.isSameLength(intArray0, intArray0);
      ArrayUtils.lastIndexOf((char[]) null, 'J', 74);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, floatArray0);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.isNotEmpty(byteArray0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-56);
      intArray0[1] = (int) (byte) (-46);
      intArray0[2] = 2;
      intArray0[3] = (int) (byte) (-56);
      intArray0[4] = (int) (byte) (-46);
      intArray0[5] = 3258;
      intArray0[6] = (int) (byte) (-56);
      ArrayUtils.lastIndexOf(intArray0, (-56), 2);
      ArrayUtils.nullToEmpty((float[]) null);
      ArrayUtils.isEmpty((char[]) null);
      ArrayUtils.nullToEmpty(booleanArray0);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) (-46);
      integerArray0[1] = (Integer) (-56);
      integerArray0[2] = (Integer) (-46);
      integerArray0[3] = (Integer) 3258;
      integerArray0[4] = (Integer) (-56);
      ArrayUtils.nullToEmpty(integerArray0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)78;
      ArrayUtils.addAll(byteArray0, byteArray0);
      ArrayUtils.lastIndexOf(booleanArray0, true, (int) (byte)17);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toMap(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)63);
      booleanArray0[2] = true;
      ArrayUtils.subarray(booleanArray0, (-1), (-2981));
      ArrayUtils.isSameLength((Object[]) null, (Object[]) arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-5041L);
      ArrayUtils.isSameLength(longArray0, (long[]) null);
      Boolean boolean0 = new Boolean((String) null);
      ArrayUtils.toPrimitive((Boolean[]) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)107;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-5041L);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (byte)107;
      doubleArray0[5] = (double) (byte)107;
      doubleArray0[6] = (double) (-5041L);
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 0L;
      ArrayUtils.subarray(doubleArray0, 1, 2);
      ArrayUtils.lastIndexOf((long[]) null, (-5041L), 1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils.isSameLength((double[]) null, (double[]) null);
      ArrayUtils.subarray((char[]) null, 1057, (int) (short) (-149));
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-84);
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte) (-84);
      ArrayUtils.lastIndexOf(byteArray0, (byte)103);
      ArrayUtils.reverse((char[]) null);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 1057;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (byte)0;
      ArrayUtils.toObject(longArray0);
      ArrayUtils.contains((double[]) null, (double) (byte) (-84), (double) (byte)0);
      ArrayUtils.isNotEmpty((double[]) null);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ArrayUtils.indexOf((char[]) null, 'J');
      ArrayUtils.isSameLength((long[]) null, (long[]) null);
      ArrayUtils.subarray((byte[]) null, (-51), (int) (byte)114);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-53);
      intArray0[1] = (int) (byte) (-53);
      intArray0[2] = (int) (byte) (-53);
      intArray0[3] = (-51);
      ArrayUtils.isEmpty((int[]) null);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-2876), (double) (-2876));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2876, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      ArrayUtils.nullToEmpty((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1049.274469);
      ArrayUtils.indexOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-2146809777));
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, (long[]) null);
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_CLASS_ARRAY, (Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-56), (-1269));
      Object object0 = new Object();
      Object object1 = new Object();
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Object) arrayUtils0, 0);
      ArrayUtils.isSameLength((long[]) null, arrayUtils0.EMPTY_LONG_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, (char[]) null);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (Object) (-1));
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toMap(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, 1486, 1486);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1486, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Byte.toUnsignedLong((byte)12);
      Byte byte0 = new Byte((byte)12);
      Byte byte1 = new Byte((byte) (-100));
      byte[] byteArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BYTE_ARRAY, (int) (byte)0, (int) (byte)0);
      ArrayUtils.toMap(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      ArrayUtils.addAll(byteArray0, byteArray0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 56;
      intArray0[2] = (-1);
      intArray0[3] = 2;
      ArrayUtils.addAll(intArray0, arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      Object object1 = new Object();
      ArrayUtils.isSameType(object1, object0);
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)15;
      Byte byte1 = new Byte((byte)15);
      byteArray0[0] = byte1;
      byteArray0[1] = (Byte) byte0;
      Byte byte2 = new Byte(byte0);
      byteArray0[2] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      ArrayUtils.isSameLength(byteArray1, (byte[]) null);
      ArrayUtils.add((String[]) null, "");
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double[]) null);
      ArrayUtils.isSameLength((double[]) null, arrayUtils0.EMPTY_DOUBLE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)63);
      ArrayUtils.contains(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-2981));
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      ArrayUtils.reverse((Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      ArrayUtils.reverse(arrayUtils0.EMPTY_BYTE_ARRAY);
      ArrayUtils.toObject((int[]) null);
      ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (-3872.29F));
      long[] longArray0 = new long[6];
      longArray0[1] = (long) (byte)107;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)0;
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-44);
      ArrayUtils.isEmpty(byteArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-44);
      longArray0[1] = (long) (byte) (-44);
      longArray0[2] = (long) (byte) (-44);
      longArray0[3] = (long) (byte) (-44);
      longArray0[4] = (long) (byte) (-44);
      longArray0[5] = (long) (byte) (-44);
      longArray0[6] = (long) (byte) (-44);
      ArrayUtils.isSameLength(longArray0, longArray0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.lastIndexOf(booleanArray0, true);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-44L);
      doubleArray0[1] = (double) (byte) (-44);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 4, (double) (byte) (-44));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      ArrayUtils.removeElement(byteArray0, (byte)32);
      Boolean boolean0 = new Boolean((String) null);
      ArrayUtils.toPrimitive((Boolean[]) null);
      ArrayUtils.subarray((double[]) null, (int) (byte)91, 3943);
      ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      ArrayUtils.addAll((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3363);
      shortArray0[1] = (short) (-2262);
      shortArray0[2] = (short) (-2262);
      ArrayUtils.isSameLength(shortArray0, shortArray0);
      ArrayUtils.removeElement(shortArray0, (short) (-3363));
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'A';
      ArrayUtils.contains(doubleArray0, (-1.0));
      ArrayUtils.contains(doubleArray0, 1609.0);
      ArrayUtils.isNotEmpty((int[]) null);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)914;
      shortArray0[1] = (short)7;
      shortArray0[2] = (short) (-1447);
      ArrayUtils.subarray(shortArray0, (int) (short)7, 8);
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      ArrayUtils.reverse((Object[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      Boolean boolean0 = new Boolean((String) null);
      ArrayUtils.toPrimitive((Boolean[]) null);
      ArrayUtils.subarray(doubleArray0, (int) (byte)21, (int) (byte)21);
      ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)21;
      longArray0[1] = 0L;
      ArrayUtils.addAll((double[]) null, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BYTE_ARRAY);
      ArrayUtils.subarray(arrayUtils0.EMPTY_LONG_ARRAY, (-1), (-854));
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_INT_ARRAY, (-1010));
      ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short)3042);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = objectArray0[1];
      ArrayUtils.nullToEmpty((float[]) null);
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-3363);
      shortArray0[1] = (short) (-3363);
      shortArray0[2] = (short) (-3363);
      shortArray0[3] = (short) (-3363);
      shortArray0[4] = (short) (-3363);
      shortArray0[5] = (short) (-3363);
      shortArray0[6] = (short) (-3363);
      shortArray0[7] = (short)533;
      shortArray0[8] = (short) (-3363);
      ArrayUtils.removeElement((short[]) null, (short)12);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, (-623L));
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_INT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      Object object0 = new Object();
      ArrayUtils.addAll((Object[]) null, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BYTE_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (-2832.9958F));
      ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-560.0317));
      ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, 3253.370941302225);
      ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.removeElement(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1020), 12);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 12;
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-1);
      ArrayUtils.reverse(byteArray0);
      ArrayUtils.subarray(longArray0, (-2025), 8);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)29;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) (byte)6;
      floatArray0[4] = (float) (byte)85;
      ArrayUtils.isSameLength(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1411.0161F);
      floatArray0[1] = (-966.6F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      ArrayUtils.nullToEmpty(floatArray0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.lastIndexOf(booleanArray0, false, 16);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'A';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'A';
      ArrayUtils.toObject(longArray0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      ArrayUtils.lastIndexOf(charArray0, 'a');
      ArrayUtils.removeElement(booleanArray0, true);
      short[] shortArray0 = new short[0];
      ArrayUtils.addAll(shortArray0, shortArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '$';
      doubleArray0[1] = (double) '$';
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 'a';
      ArrayUtils.nullToEmpty(doubleArray0);
      ArrayUtils.contains(booleanArray0, false);
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) '$';
      ArrayUtils.contains(floatArray0, 4123.0F);
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) (-1.0);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '$';
      intArray0[1] = (int) '$';
      intArray0[2] = (-1);
      intArray0[3] = (int) '$';
      intArray0[4] = (int) '$';
      intArray0[5] = (int) '$';
      ArrayUtils.removeElement(intArray0, 36);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Object[] objectArray0 = new Object[17];
      Long long0 = new Long(908L);
      ArrayUtils.toPrimitive((Long[]) null, (long) (short)9);
      ArrayUtils.isSameLength((short[]) null, (short[]) null);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) long0;
      objectArray1[1] = (Object) long0;
      objectArray1[2] = (Object) long0;
      ArrayUtils.isSameLength(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-337);
      ArrayUtils.toObject((byte[]) null);
      int[] intArray0 = new int[0];
      ArrayUtils.isNotEmpty(intArray0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = 46;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_LONG_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2883;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 318;
      intArray0[5] = 0;
      intArray0[6] = 2721;
      ArrayUtils.contains(intArray0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2883;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 318;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      doubleArray0[7] = (double) 318;
      ArrayUtils.removeElement(doubleArray0, 0.0);
      ArrayUtils.isEmpty(intArray0);
      char[] charArray0 = new char[0];
      ArrayUtils.toObject(charArray0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ArrayUtils.subarray(stringArray0, 512, 512);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      int[] intArray0 = new int[3];
      intArray0[2] = 730;
      Float float0 = new Float(13.135083);
      Float float1 = new Float((float) 730);
      Float float2 = new Float((-988.3759));
      Float.max(2077.9412F, 1.0F);
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float2;
      floatArray0[1] = float1;
      floatArray0[2] = float2;
      floatArray0[3] = float0;
      floatArray0[4] = float1;
      floatArray0[5] = float1;
      ArrayUtils.toPrimitive(floatArray0, 112.0F);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.addAll((char[]) null, arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_STRING_ARRAY);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)104;
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, shortArray0);
      ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_STRING_ARRAY, arrayUtils0.EMPTY_STRING_ARRAY);
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Short short0 = new Short((short)19);
      Short short1 = new Short((short)19);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (short) (-3641));
      ArrayUtils.indexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)2, (int) (short)19);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      ArrayUtils.toPrimitive((Short[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)115;
      byteArray0[8] = (byte) (-1);
      ArrayUtils.lastIndexOf(byteArray0, (byte)10, (-1));
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-58);
      ArrayUtils.lastIndexOf(byteArray0, (byte) (-58), (int) (byte)10);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      Double double0 = new Double(0.0);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (-1118L));
      ArrayUtils.isSameLength((short[]) null, (short[]) null);
      ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      ArrayUtils.isSameLength((long[]) null, (long[]) null);
      Double double0 = new Double(1560.9897985996);
      Double double1 = new Double((-3276.344362535865));
      Double double2 = new Double((byte) (-53));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-53);
      shortArray0[1] = (short) (byte) (-53);
      shortArray0[2] = (short)2909;
      ArrayUtils.addAll(shortArray0, shortArray0);
      ArrayUtils.nullToEmpty((Integer[]) null);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      ArrayUtils.nullToEmpty((float[]) null);
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = '*';
      ArrayUtils.isEmpty(charArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mznVISC,2AqReMA4FT";
      stringArray0[1] = "4.9";
      ArrayUtils.addAll(stringArray0, stringArray0);
      ArrayUtils.toObject((float[]) null);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'E';
      floatArray0[1] = (float) 'Z';
      ArrayUtils.contains(floatArray0, 69.0F);
      Double double0 = new Double('E');
      Double double1 = new Double(1.5);
      Double[] doubleArray0 = new Double[0];
      ArrayUtils.isEmpty((Object[]) doubleArray0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short) (-1791));
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-2277));
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1791));
      shortArray0[2] = short2;
      ArrayUtils.nullToEmpty(shortArray0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll((byte[]) null, arrayUtils0.EMPTY_BYTE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1049.274469);
      ArrayUtils.indexOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-2146809777));
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, (long[]) null);
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      charArray0[4] = 'y';
      charArray0[5] = 'y';
      ArrayUtils.isSameLength((char[]) null, charArray0);
      Object object0 = new Object();
      ArrayUtils.add(arrayUtils0.EMPTY_OBJECT_ARRAY, (Object) arrayUtils0);
      ArrayUtils.isNotEmpty((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2618;
      ArrayUtils.isNotEmpty((double[]) null);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2693.9720941478);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 2929.209;
      doubleArray0[3] = 2054.0487;
      doubleArray0[4] = (-4928.575313710118);
      doubleArray0[5] = 1469.5871287;
      ArrayUtils.indexOf(doubleArray0, 2105.13773, 0.0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)29;
      ArrayUtils.isNotEmpty(byteArray0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(object1, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Object object0 = new Object();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1592.6563454872726);
      doubleArray0[2] = (-1592.6563454872726);
      doubleArray0[3] = 131.665842749;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1592.6563454872726);
      doubleArray0[6] = 131.665842749;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      ArrayUtils.addAll(doubleArray0, doubleArray0);
      ArrayUtils.lastIndexOf(doubleArray0, (-1592.6563454872726), 0, (-1592.6563454872726));
      ArrayUtils.lastIndexOf(doubleArray0, 131.665842749, 2545.50916);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      ArrayUtils.removeElement(charArray0, 'A');
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.nullToEmpty(booleanArray0);
      ArrayUtils.toPrimitive((Byte[]) null);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-337);
      shortArray0[2] = (short)0;
      ArrayUtils.subarray(shortArray0, (int) (short) (-337), 1098);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1;
      intArray0[1] = 1098;
      ArrayUtils.reverse(intArray0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.toObject(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1397.3136F;
      ArrayUtils.isEmpty(floatArray0);
      ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      ArrayUtils.subarray(longArray0, (-1), (-1));
      float[] floatArray1 = new float[4];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = (float) (-1L);
      ArrayUtils.isSameLength(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2883;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 0;
      intArray0[4] = 318;
      intArray0[5] = 2;
      intArray0[6] = 2721;
      ArrayUtils.contains(intArray0, 0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) Integer.MAX_VALUE;
      objectArray0[1] = (Object) 318;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) Integer.MAX_VALUE;
      objectArray0[5] = (Object) Integer.MAX_VALUE;
      ArrayUtils.addAll(objectArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = new Long(1271L);
      Long.compareUnsigned(0L, (-1460L));
      Long long2 = new Long(1271L);
      ArrayUtils.contains((float[]) null, (float) 0L);
      Double[] doubleArray0 = new Double[0];
      ArrayUtils.nullToEmpty(doubleArray0);
      ArrayUtils.toMap(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte) (-102);
      ArrayUtils.lastIndexOf(byteArray0, (byte) (-15), 2457);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[1] = object0;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short) (-1426);
      shortArray0[3] = (short)506;
      shortArray0[4] = (short)506;
      shortArray0[5] = (short) (-1426);
      ArrayUtils.reverse(shortArray0);
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = Boolean.valueOf(false);
      Boolean boolean2 = new Boolean(false);
      Boolean.compare(false, false);
      Boolean boolean3 = new Boolean((String) null);
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean3;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean0;
      ArrayUtils.toPrimitive(booleanArray0);
      ArrayUtils.isEmpty(shortArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-181);
      ArrayUtils.reverse(floatArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = 'N';
      ArrayUtils.reverse(charArray0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (short)1875);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0);
      short[] shortArray0 = new short[0];
      ArrayUtils.addAll(shortArray0, shortArray0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      ArrayUtils.subarray(arrayUtils0.EMPTY_BYTE_ARRAY, 8, 2092);
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_INT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      ArrayUtils.indexOf((char[]) null, 'J');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), (int) (byte) (-1));
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = Boolean.FALSE;
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(true);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((String) null);
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf((String) null);
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf("d$y0");
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      booleanArray0[6] = boolean6;
      ArrayUtils.toPrimitive(booleanArray0, false);
      ArrayUtils.isSameLength(intArray1, intArray0);
      Double double0 = new Double((-1));
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      ArrayUtils.toPrimitive(doubleArray0, 2601.448972582);
      ArrayUtils.nullToEmpty(byteArray0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = new Long(1271L);
      Long.compareUnsigned(0L, (-1460L));
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short)9;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)9;
      shortArray0[4] = (short)1;
      ArrayUtils.removeElement(shortArray0, (short)2077);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (-1077.049);
      doubleArray0[2] = (double) (short)9;
      doubleArray0[3] = (double) 1271L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = (double) (-1);
      ArrayUtils.reverse(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1591;
      shortArray0[1] = (short) (-1151);
      ArrayUtils.nullToEmpty(shortArray0);
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((short) (-1151));
      longArray0[0] = long0;
      Long long1 = new Long(1546L);
      Long.toUnsignedString(1546L);
      Long.max((short)1591, (short) (-1151));
      longArray0[1] = long1;
      Long.max(1591L, (-1L));
      ArrayUtils.nullToEmpty(longArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1151);
      doubleArray0[1] = (double) (short) (-1151);
      doubleArray0[2] = (double) (short)1591;
      ArrayUtils.indexOf(doubleArray0, (double) longArray0[1], (-1516));
      float[] floatArray0 = new float[2];
      floatArray0[0] = 171.25923F;
      floatArray0[1] = 1783.031F;
      ArrayUtils.lastIndexOf(floatArray0, (-1816.227F), Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) booleanArray0, (Object) arrayUtils0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.lang3.ArrayUtils
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = objectArray0[1];
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      ArrayUtils.getLength(objectArray0[2]);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = objectArray0[1];
      int[] intArray0 = new int[3];
      intArray0[2] = 730;
      ArrayUtils.lastIndexOf(intArray0, 0, 4);
      ArrayUtils.nullToEmpty((float[]) null);
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.nullToEmpty(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      ArrayUtils.isSameLength((float[]) null, floatArray0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)11;
      ArrayUtils.lastIndexOf(byteArray0, (byte)11, (int) (byte)50);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)50;
      shortArray0[1] = (short) (byte) (-73);
      shortArray0[2] = (short) (byte)50;
      shortArray0[3] = (short) (byte)11;
      shortArray0[4] = (short) (byte) (-73);
      shortArray0[5] = (short) (byte) (-73);
      shortArray0[6] = (short) (byte) (-73);
      ArrayUtils.isEmpty(shortArray0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)50;
      objectArray0[1] = (Object) (short) (-73);
      objectArray0[2] = (Object) (byte)50;
      ArrayUtils.add(objectArray0, objectArray0[1]);
      ArrayUtils.lastIndexOf(shortArray0, (short)2357, (int) (short) (-73));
      ArrayUtils.isEmpty(shortArray0);
      float[] floatArray0 = new float[0];
      ArrayUtils.addAll(floatArray0, floatArray0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      integerArray0[2] = integer2;
      ArrayUtils.toPrimitive(integerArray0);
      ArrayUtils.toPrimitive((Boolean[]) null, true);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.lastIndexOf(charArray0, '$');
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2;
      ArrayUtils.addAll(shortArray0, shortArray0);
      ArrayUtils.nullToEmpty(doubleArray0);
      ArrayUtils.contains(booleanArray1, false);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = (float) (short) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (short) (-1);
      ArrayUtils.subarray(booleanArray0, (int) (short)2, (-1));
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short)2;
      objectArray0[1] = (Object) 2.0F;
      objectArray0[2] = (Object) (short)2;
      objectArray0[3] = (Object) (short)2;
      objectArray0[4] = (Object) (-1.0F);
      ArrayUtils.isSameLength((Object[]) null, objectArray0);
      ArrayUtils.nullToEmpty((int[]) null);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      ArrayUtils.subarray((String[]) null, 18, 18);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_STRING_ARRAY, arrayUtils0.EMPTY_STRING_ARRAY);
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 730.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      ArrayUtils.nullToEmpty(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[1] = 'r';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      charArray0[5] = 'A';
      charArray0[6] = 'A';
      charArray0[7] = 'A';
      ArrayUtils.removeElement(charArray0, 'A');
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'A';
      doubleArray0[1] = (double) 'A';
      doubleArray0[2] = (double) 'A';
      ArrayUtils.indexOf(doubleArray0, 1801.4128005, (-4547), (-184.0088078656792));
      ArrayUtils.reverse((byte[]) null);
      short[] shortArray0 = new short[0];
      ArrayUtils.isEmpty(shortArray0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.lastIndexOf(charArray0, '$');
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      long[] longArray0 = new long[0];
      ArrayUtils.removeElement(longArray0, 2332L);
      byte[] byteArray0 = new byte[0];
      ArrayUtils.contains(byteArray0, (byte)2);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (-1254);
      ArrayUtils.lastIndexOf(shortArray0, (short) (byte) (-126));
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0);
      ArrayUtils.contains((float[]) null, (-2655.9634F));
      Double double0 = new Double((-41.28));
      Double double1 = new Double(1.0);
      Double.min((-2655.9634F), (-2655.9634F));
      Double[] doubleArray0 = new Double[0];
      ArrayUtils.nullToEmpty(doubleArray0);
      ArrayUtils.reverse(booleanArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = 'Z';
      ArrayUtils.isNotEmpty(charArray0);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short)4;
      ArrayUtils.removeElement(shortArray0, (short)7);
      ArrayUtils.reverse((double[]) null);
      byte[] byteArray0 = new byte[0];
      ArrayUtils.addAll(byteArray0, byteArray0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)1932;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1546;
      shortArray0[5] = (short) (-1426);
      ArrayUtils.reverse(shortArray0);
      float[] floatArray0 = new float[0];
      ArrayUtils.subarray(floatArray0, 1, (int) (short)0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double[]) null);
      ArrayUtils.isEmpty((double[]) null);
      ArrayUtils.nullToEmpty((double[]) null);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toMap((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Arguments cannot both be null";
      stringArray0[1] = ", '";
      ArrayUtils.nullToEmpty(stringArray0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, intArray0);
      Object object0 = new Object();
      ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, object0, (-1));
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      ArrayUtils.reverse(arrayUtils0.EMPTY_BYTE_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_STRING_ARRAY);
      ArrayUtils.removeElement(longArray0, (long) (-1));
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      ArrayUtils.indexOf((char[]) null, 'J');
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-51);
      shortArray0[1] = (short) (byte) (-51);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short)32;
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte) (-51);
      shortArray0[6] = (short) (byte) (-51);
      shortArray0[7] = (short) (byte) (-51);
      shortArray0[8] = (short) (byte) (-51);
      ArrayUtils.indexOf(shortArray0, (short)1, (int) (short) (-51));
      // Undeclared exception!
      try { 
        ArrayUtils.add((String[]) null, (int)  (-1), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.indexOf((int[]) null, 1, 1356);
      ArrayUtils.isSameLength((char[]) null, (char[]) null);
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('d');
      characterArray0[0] = character0;
      ArrayUtils.toPrimitive(characterArray0, '1');
      double[] doubleArray0 = new double[0];
      ArrayUtils.isNotEmpty(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      ArrayUtils.toObject((char[]) null);
      char[] charArray0 = new char[6];
      charArray0[5] = 'K';
      charArray0[1] = ';';
      charArray0[2] = '\"';
      charArray0[3] = '\u0089';
      ArrayUtils.contains(charArray0, '\u0000');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)0;
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.subarray(booleanArray0, (int) (byte)122, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      Object object1 = new Object();
      ArrayUtils.isSameType(arrayUtils0, object0);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      ArrayUtils.isSameLength((byte[]) null, arrayUtils0.EMPTY_BYTE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1098;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {1098, 0}, intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-3);
      shortArray0[1] = (short) (-758);
      shortArray0[2] = (short) (-3);
      shortArray0[3] = (short) (-2294);
      shortArray0[4] = (short) (-2294);
      shortArray0[5] = (short) (-3);
      shortArray0[6] = (short)10;
      shortArray0[7] = (short) (-2294);
      shortArray0[8] = (short) (-3);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-623L);
      doubleArray0[2] = 2882.0;
      doubleArray0[3] = (double) (-623L);
      ArrayUtils.contains(doubleArray0, (-623.0));
      ArrayUtils.indexOf(arrayUtils0.EMPTY_INT_ARRAY, 5, (-2146809777));
      ArrayUtils.toMap(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, 'y');
      ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-579));
      Float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      double[] doubleArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, 367.3);
      assertNotNull(doubleArray0);
      
      ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      boolean boolean1 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BYTE_ARRAY);
      ArrayUtils.subarray(arrayUtils0.EMPTY_LONG_ARRAY, (-1), (-854));
      Byte[] byteArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertNotNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, 'V');
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_STRING_ARRAY);
      ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) map0;
      byte[] byteArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = new Long(1271L);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      Short[] shortArray2 = ArrayUtils.toObject(shortArray0);
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray3);
      assertNotNull(shortArray3);
      assertSame(shortArray0, shortArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '.';
      charArray0[4] = '.';
      charArray0[5] = '.';
      Long long2 = new Long((-1L));
      Long[] longArray0 = new Long[7];
      longArray0[0] = long1;
      longArray0[1] = long2;
      longArray0[2] = long0;
      Long long3 = new Long((long) longArray0[0]);
      longArray0[3] = long3;
      longArray0[4] = long0;
      longArray0[5] = long0;
      longArray0[6] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1271L, (-1L), 0L, 1271L, 0L, 0L, 1271L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_CLASS_ARRAY);
      assertNotNull(map0);
      
      Integer integer0 = new Integer(57);
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) map0, 57);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.subarray(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), (-1));
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      Object object0 = new Object();
      ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, (char[]) null);
      String[] stringArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_STRING_ARRAY);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, Integer.MAX_VALUE, 15);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short)0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      ArrayUtils.reverse(objectArray0);
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      ArrayUtils.toObject((int[]) null);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (-1);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, (-1.0F), (-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      Integer integer0 = new Integer((-854));
      Character.valueOf('-');
      Character character0 = new Character('l');
      Character.valueOf('-');
      Character.compare(']', '.');
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, 47, (-1215));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-45));
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertNotNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, (Object[]) arrayUtils0.EMPTY_STRING_ARRAY);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, (int[]) null);
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_OBJECT_ARRAY);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      ArrayUtils.subarray(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1), (-884));
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      long[] longArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      
      boolean boolean2 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, (-623L));
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double[]) null);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      double[] doubleArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double[]) null);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Character[] characterArray0 = new Character[7];
      Character character0 = Character.valueOf('y');
      characterArray0[0] = character0;
      char char0 = '{';
      Character character1 = new Character('{');
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('0');
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('+');
      characterArray0[4] = character4;
      Character character5 = new Character('X');
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('0');
      characterArray0[6] = character6;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(7, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertNotNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-46.0));
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, 0L);
      assertNotNull(longArray0);
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)100);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-65);
      shortArray0[1] = (short) (byte) (-65);
      shortArray0[2] = (short) (byte)2;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2357);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      ArrayUtils.nullToEmpty((String[]) null);
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = (-1517L);
      longArray0[3] = 572L;
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      charArray0[1] = '5';
      charArray0[2] = '(';
      ArrayUtils.nullToEmpty((float[]) null);
      char[] charArray1 = new char[8];
      charArray1[0] = '(';
      charArray1[1] = '5';
      ArrayUtils.reverse((float[]) null);
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '(', '5', '*'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, "\".[cUi_[ZiNP]<ZsG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement((boolean[]) null, false);
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.addAll((Object[]) arrayUtils0.EMPTY_STRING_ARRAY, (Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, 'f');
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-3250), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3250, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = 0L;
      longArray0[1] = (-5041L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-53);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-379));
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }
}

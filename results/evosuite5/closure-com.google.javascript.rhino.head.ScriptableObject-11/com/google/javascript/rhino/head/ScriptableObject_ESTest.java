/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 23:38:40 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Arguments;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Callable;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.FieldAndMethods;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.InterpretedFunction;
import com.google.javascript.rhino.head.Interpreter;
import com.google.javascript.rhino.head.JavaMembers;
import com.google.javascript.rhino.head.JavaScriptException;
import com.google.javascript.rhino.head.LazilyLoadedCtor;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeGenerator;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJSON;
import com.google.javascript.rhino.head.NativeJavaArray;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.NativeJavaObject;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeMath;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.ScriptRuntime;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.Synchronizer;
import com.google.javascript.rhino.head.TopLevel;
import com.google.javascript.rhino.head.UniqueTag;
import com.google.javascript.rhino.head.WrapFactory;
import java.util.TreeSet;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ScriptableObject_ESTest extends ScriptableObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeCall nativeCall1 = new NativeCall();
      nativeCall1.isGenericDescriptor(nativeCall0);
      UniqueTag uniqueTag0 = (UniqueTag)Scriptable.NOT_FOUND;
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<TopLevel> class0 = TopLevel.class;
      ScriptableObject.defineClass((Scriptable) nativeCall0, class0, false, false);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test002()  throws Throwable  {
      String string0 = "|9y";
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("|9y");
      // Undeclared exception!
      try { 
        nativeJavaPackage0.setAttributes(368, 368);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 368
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeJavaTopPackage0, nativeBoolean0, 12, 160);
      NativeError nativeError0 = new NativeError();
      Double double0 = new Double(160);
      NativeBoolean nativeBoolean1 = new NativeBoolean(false);
      Class<NativeContinuation> class0 = NativeContinuation.class;
      ScriptableObject.getTypedProperty((Scriptable) nativeBoolean0, 8, class0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Class<TopLevel> class1 = TopLevel.class;
      ScriptableObject.defineClass((Scriptable) nativeContinuation0, class1, true, true);
      idFunctionObject0.getMaxInstanceId();
      NativeArray nativeArray0 = new NativeArray(100);
      Class<Double> class2 = Double.class;
      // Undeclared exception!
      try { 
        nativeArray0.getDefaultValue(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeCall nativeCall0 = new NativeCall();
      nativeCall0.isGenericDescriptor(nativeIterator_StopIteration0);
      ScriptableObject.getPropertyIds(nativeIterator_StopIteration0);
      NativeCall nativeCall1 = nativeCall0.parentActivationCall;
      TopLevel topLevel0 = new TopLevel();
      nativeIterator_StopIteration0.checkPropertyChange("jsStaticFunction_putAll", (ScriptableObject) null, topLevel0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test005()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      context0.initStandardObjects();
      context0.decompileFunctionBody(nativeJavaTopPackage0, (-316));
      // Undeclared exception!
      try { 
        ScriptableObject.redefineProperty(nativeJavaTopPackage0, " p;#D<?", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: redeclaration of var  p;#D<?.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test006()  throws Throwable  {
      String string0 = "|9y";
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("|9y");
      // Undeclared exception!
      try { 
        nativeJavaPackage0.defineOwnProperty((Context) null, "|9y", (ScriptableObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test007()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      nativeIterator_StopIteration0.put("language version", (Scriptable) nativeJavaTopPackage0, (Object) importerTopLevel0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "getClassName";
      stringArray0[1] = "error reporter";
      Class<NativeCall> class0 = NativeCall.class;
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.defineFunctionProperties(stringArray0, class0, 84);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 84
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Float float0 = new Float((double) 13);
      nativeJavaTopPackage0.sameValue("# q", float0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeCall nativeCall0 = new NativeCall();
      NativeError nativeError0 = new NativeError();
      IdFunctionObject idFunctionObject0 = nativeCall0.exportAsJSClass(2, nativeError0, true);
      nativeError0.getGetterOrSetter("7ZK4V<U-t2ld)r^2n/7", 0, false);
      idFunctionObject0.isGetterOrSetter("$LyY;3*vlLOGV?9OR", (-4204), true);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      nativeBoolean0.getClassName();
      ScriptableObject.getPropertyIds(idFunctionObject0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2358L);
      ScriptableObject scriptableObject0 = ScriptableObject.ensureScriptableObject(nativeArray0);
      ScriptableObject.getPropertyIds(scriptableObject0);
      NativeCall nativeCall0 = new NativeCall();
      Arguments arguments0 = null;
      try {
        arguments0 = new Arguments(nativeCall0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = Context.enter((Context) null);
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      ScriptableObject.redefineProperty(scriptableObject0, "/[KiA2S", false);
      ImporterTopLevel importerTopLevel0 = null;
      try {
        importerTopLevel0 = new ImporterTopLevel((Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ImporterTopLevel", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      String[] stringArray0 = new String[21];
      Class<NativeMath> class0 = NativeMath.class;
      NativeCall nativeCall0 = new NativeCall();
      Class<NativeJSON> class1 = NativeJSON.class;
      // Undeclared exception!
      try { 
        nativeCall0.defineProperty("", class1, 208);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ClassLoader.getSystemClassLoader();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeObject0.defineConst("OVyhAHo)YQ7Fj=aE?9s", nativeIterator_StopIteration0);
      Class<BaseFunction> class0 = BaseFunction.class;
      ScriptableObject.getTypedProperty((Scriptable) nativeIterator_StopIteration0, "msg.ctor.multiple.parms", class0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test014()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeError nativeError0 = new NativeError();
      JavaScriptException javaScriptException0 = new JavaScriptException(nativeError0, "mo26K__kuY~yaJz*BC", 8);
      nativeError0.setStackProvider(javaScriptException0);
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel(context0);
      importerTopLevel1.getAllIds();
      ImporterTopLevel importerTopLevel2 = new ImporterTopLevel();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test015()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("|9y");
      ScriptableObject.deleteProperty((Scriptable) nativeJavaPackage0, "|9y");
      NativeObject nativeObject0 = new NativeObject();
      ScriptableObject.isTrue(nativeCall0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test016()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Float float0 = new Float((double) 4);
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      context0.removeThreadLocal(float0);
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      // Undeclared exception!
      try { 
        nativeJavaTopPackage0.putConst("language version", nativeJavaClass0, context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeJavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      Delegator delegator0 = new Delegator();
      nativeObject0.defineConst("msg.change.enumerable.with.configurable.false", delegator0);
      nativeObject0.delete("|,v");
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ScriptableObject.getPropertyIds(nativeObject0);
      NativeCall nativeCall0 = new NativeCall();
      Arguments arguments0 = null;
      try {
        arguments0 = new Arguments(nativeCall0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test018()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("'/CEZ[.xvr");
      nativeJavaPackage0.forcePackage("getBuiltinCtor", nativeCall0);
      ScriptableObject.deleteProperty((Scriptable) nativeJavaPackage0, "'/CEZ[.xvr");
      NativeObject nativeObject0 = new NativeObject();
      nativeObject0.containsKey((Object) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Context.getCurrentContext();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ScriptableObject.hasProperty((Scriptable) nativeBoolean0, 12);
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel();
      // Undeclared exception!
      try { 
        importerTopLevel1.getInstanceIdName((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Float float0 = new Float(0.0);
      nativeJavaTopPackage0.sameValue(float0, float0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeError nativeError0 = new NativeError();
      NativeError nativeError1 = new NativeError();
      nativeError1.checkPropertyChange("com.google.javascript.rhino.head.xml.XMLLib", nativeError0, nativeError0);
      Context.enter();
      Float float0 = new Float((-1.0F));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      int int0 = (-1003958423);
      Scriptable scriptable0 = null;
      boolean boolean0 = true;
      Float float0 = new Float((float) 1);
      IdFunctionObject idFunctionObject0 = null;
      try {
        idFunctionObject0 = new IdFunctionObject(importerTopLevel0, float0, 2173, "msg.change.enumerable.with.configurable.false", (-1003958423), (Scriptable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test023()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Float float0 = new Float((double) 2);
      Context context0 = new Context();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("language version");
      ScriptableObject.deleteProperty((Scriptable) nativeJavaPackage0, (String) null);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.isEmpty();
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      nativeJavaPackage0.equivalentValues(nativeJavaObject0);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      nativeBoolean0.findPrototypeId("error reporter");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeError nativeError0 = new NativeError();
      NativeError nativeError1 = new NativeError();
      NativeError nativeError2 = new NativeError();
      NativeCall nativeCall0 = new NativeCall();
      Class<NativeGenerator> class0 = NativeGenerator.class;
      nativeCall0.defineProperty("com.google.javascript.rhino.head.xml.XMLLib", class0, 4);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ScriptableObject.getPropertyIds(nativeCall0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel();
      importerTopLevel1.getAllIds();
      ImporterTopLevel importerTopLevel2 = new ImporterTopLevel();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ScriptableObject.hasProperty((Scriptable) importerTopLevel0, 2);
      ScriptableObject.putProperty((Scriptable) importerTopLevel0, 1704, (Object) contextFactory0);
      NativeContinuation.init(context0, importerTopLevel0, false);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test027()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("|9y");
      nativeJavaPackage0.forcePackage("|9y", nativeCall0);
      ScriptableObject.deleteProperty((Scriptable) nativeJavaPackage0, "|9y");
      NativeObject nativeObject0 = new NativeObject();
      nativeObject0.containsKey(nativeJavaPackage0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      NativeNumber nativeNumber0 = new NativeNumber(545.01074305);
      nativeJavaTopPackage0.setAttributes(3, (Scriptable) nativeNumber0, 2);
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      ScriptableObject.redefineProperty(nativeJavaTopPackage0, "[?Y1IVaP#oTqEm~L2", false);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ScriptableObject.getPropertyIds(scriptableObject0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      String[] stringArray0 = new String[21];
      stringArray0[0] = "|,v";
      stringArray0[1] = "msg.change.enumerable.with.configurable.false";
      java.util.function.Function<FieldAndMethods, NativeIterator.StopIteration> function0 = (java.util.function.Function<FieldAndMethods, NativeIterator.StopIteration>) mock(java.util.function.Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(com.google.javascript.rhino.head.FieldAndMethods.class));
      nativeObject0.computeIfAbsent("msg.change.enumerable.with.configurable.false", function0);
      Class<NativeMath> class0 = NativeMath.class;
      // Undeclared exception!
      try { 
        nativeObject0.defineFunctionProperties(stringArray0, class0, (-5));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"|,v\" not found in \"com.google.javascript.rhino.head.NativeMath\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      String string0 = "|(A";
      ScriptableObject.putConstProperty(nativeObject0, "|(A", nativeObject0);
      ScriptableObject.deleteProperty((Scriptable) nativeObject0, "|(A");
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      int int0 = 1690;
      // Undeclared exception!
      try { 
        nativeContinuation0.initPrototypeId(1690);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1690
         //
         verifyException("com.google.javascript.rhino.head.NativeContinuation", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeError nativeError1 = new NativeError();
      nativeError0.checkPropertyChange(")1PjJtEQ4/5:,F@W^", nativeError1, nativeError1);
      NativeArray nativeArray0 = new NativeArray(866L);
      Context context0 = Context.enter();
      Float float0 = new Float((-1.0F));
      nativeArray0.defineOwnProperty(context0, (Object) float0, (ScriptableObject) nativeError0, true);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test032()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeCall nativeCall0 = new NativeCall();
      NativeError nativeError1 = new NativeError();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      nativeJavaTopPackage0.getGetterOrSetter((String) null, 2, true);
      Context context0 = new Context();
      context0.initStandardObjects();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ContextFactory.getGlobal();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      ScriptableObject.checkValidAttributes(1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test034()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Float float0 = new Float((double) 2);
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      context0.removeThreadLocal(nativeJavaTopPackage0);
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      nativeJavaTopPackage0.putConst("language version", importerTopLevel0, classLoader0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      nativeContinuation0.getImplementation();
      BoundFunction boundFunction0 = new BoundFunction(context0, nativeContinuation0, nativeJavaTopPackage0, nativeJavaClass0, (Object[]) null);
      boundFunction0.hasInstance(nativeContinuation0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeCall nativeCall1 = nativeCall0.parentActivationCall;
      nativeCall0.parentActivationCall = null;
      Class<BaseFunction> class0 = BaseFunction.class;
      ScriptableObject.defineClass((Scriptable) nativeCall0, class0);
      NativeObject nativeObject0 = new NativeObject();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.sealObject();
      importerTopLevel0.isEmpty();
      Object[] objectArray0 = Context.emptyArgs;
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeString nativeString0 = new NativeString("|9y");
      // Undeclared exception!
      try { 
        nativeString0.initPrototypeId(228);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 228
         //
         verifyException("com.google.javascript.rhino.head.NativeString", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test036()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ContextFactory.getGlobal();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      WrapFactory wrapFactory0 = new WrapFactory();
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel();
      Context.toNumber(importerTopLevel0);
      Class<Object> class0 = Object.class;
      wrapFactory0.wrapAsJavaObject(context0, importerTopLevel0, context0, class0);
      ImporterTopLevel importerTopLevel2 = new ImporterTopLevel(context0, false);
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      importerTopLevel2.put(160, (Scriptable) importerTopLevel0, (Object) nativeBoolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeObject nativeObject0 = new NativeObject();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.isEmpty();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) nativeObject0;
      objectArray0[3] = (Object) "|9y";
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.toArray(objectArray0);
      Context context0 = new Context();
      Class<NativeObject> class0 = NativeObject.class;
      ScriptableObject.buildClassCtor((Scriptable) importerTopLevel0, class0, true, true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ClassLoader.getSystemClassLoader();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeObject0.defineConst("OVyhAHo)YQ7Fj=aE?9s", nativeIterator_StopIteration0);
      NativeCall nativeCall0 = new NativeCall();
      NativeJSON.init(nativeObject0, true);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeObject0, nativeObject0, 1, "OVyhAHo)YQ7Fj=aE?9s", 1, nativeCall0);
      ScriptableObject.getTopScopeValue(nativeCall0, idFunctionObject0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ScriptableObject.getPropertyIds((Scriptable) null);
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      Double double0 = new Double((-1.0));
      nativeIterator_StopIteration0.get(double0);
      idFunctionObject0.equivalentValues(nativeIterator_StopIteration1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test039()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("/9b");
      nativeJavaPackage0.forcePackage("/9b", nativeCall0);
      ScriptableObject.deleteProperty((Scriptable) nativeJavaPackage0, "/9b");
      NativeObject nativeObject0 = new NativeObject();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      // Undeclared exception!
      try { 
        nativeBoolean0.addLazilyInitializedValue("/9b", 2, (LazilyLoadedCtor) null, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /9b
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test040()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Float float0 = new Float((double) 2);
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      context0.removeThreadLocal(nativeJavaTopPackage0);
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      nativeJavaTopPackage0.putConst("language version", importerTopLevel0, classLoader0);
      // Undeclared exception!
      try { 
        Interpreter.captureContinuation(context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Interpreter frames not found
         //
         verifyException("com.google.javascript.rhino.head.Interpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      context0.getWrapFactory();
      Class<BaseFunction> class0 = BaseFunction.class;
      ScriptableObject.getTypedProperty((Scriptable) importerTopLevel0, "error reporter", class0);
      ScriptableObject.getPropertyIds((Scriptable) null);
      NativeCall nativeCall0 = context0.currentActivationCall;
      Arguments arguments0 = null;
      try {
        arguments0 = new Arguments((NativeCall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Arguments", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test042()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        nativeCall0.exportAsJSClass(2, nativeCall0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: Call.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test043()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeError nativeError0 = new NativeError();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("language version");
      nativeJavaPackage0.get(13, (Scriptable) importerTopLevel0);
      ScriptableObject.deleteProperty((Scriptable) nativeError0, "0Sc#K[*^#tS4Si$qRZ");
      NativeObject nativeObject0 = new NativeObject();
      nativeObject0.defineOwnProperties(context0, nativeError0);
      Class<NativeObject> class0 = NativeObject.class;
      ScriptableObject.buildClassCtor((Scriptable) nativeObject0, class0, false, false);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeCall nativeCall0 = new NativeCall();
      NativeError nativeError0 = new NativeError();
      IdFunctionObject idFunctionObject0 = nativeCall0.exportAsJSClass(2, nativeError0, true);
      idFunctionObject0.isGetterOrSetter("$LyY;3*vlLOGV?9OR", (-4204), true);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      nativeBoolean0.getClassName();
      nativeIterator_StopIteration0.containsKey(nativeError0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      contextFactory0.makeContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Context context0 = new Context();
      Class<NativeObject> class0 = NativeObject.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) importerTopLevel0, class0, false, false);
      NativeError nativeError0 = new NativeError();
      // Undeclared exception!
      try { 
        nativeError0.setGetterOrSetter("language version", 109, baseFunction0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // language version
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test046()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ScriptableObject.hasProperty((Scriptable) importerTopLevel0, 2189);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      nativeContinuation0.getImplementation();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      UniqueTag uniqueTag0 = (UniqueTag)Scriptable.NOT_FOUND;
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ScriptableObject.putConstProperty(nativeObject0, "|(}", nativeObject0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ContextFactory.getGlobal();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test049()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      contextFactory0.makeContext();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      nativeBoolean0.size();
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeBoolean0, nativeJavaObject0, 7, 8);
      // Undeclared exception!
      try { 
        nativeBoolean0.getAttributes(1030, (Scriptable) idFunctionObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property 1030 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      NativeError nativeError0 = new NativeError();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      String string0 = "'L+sNC{2pVUpzV=\\{AE";
      Integer integer0 = new Integer(76);
      // Undeclared exception!
      try { 
        nativeContinuation0.associateValue(integer0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test051()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("|9y");
      Class<BaseFunction> class0 = BaseFunction.class;
      ScriptableObject.defineClass((Scriptable) nativeCall0, class0);
      nativeJavaPackage0.forcePackage("|9y", nativeCall0);
      ScriptableObject.deleteProperty((Scriptable) nativeJavaPackage0, "|9y");
      NativeObject nativeObject0 = new NativeObject();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.isEmpty();
      Object[] objectArray0 = Context.emptyArgs;
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      nativeContinuation0.getImplementation();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test052()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("|9y");
      nativeJavaPackage0.forcePackage("getBuiltinCtor", nativeCall0);
      ScriptableObject.deleteProperty((Scriptable) nativeJavaPackage0, "|9y");
      NativeObject nativeObject0 = new NativeObject();
      nativeObject0.containsKey((Object) null);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test053()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeJavaTopPackage0, nativeBoolean0, 12, 160);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("isScript", classLoader0);
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptable(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type org.evosuite.instrumentation.InstrumentingClassLoader
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      WrapFactory wrapFactory0 = context0.getWrapFactory();
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel();
      Class<Object> class0 = Object.class;
      Scriptable scriptable0 = wrapFactory0.wrapAsJavaObject(context0, importerTopLevel0, importerTopLevel1, class0);
      // Undeclared exception!
      try { 
        importerTopLevel0.put(7, scriptable0, (Object) contextFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Java class \"com.google.javascript.rhino.head.ImporterTopLevel\" has no public instance field or method named \"7\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Context.getCurrentContext();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeCall nativeCall0 = new NativeCall();
      Class<BaseFunction> class0 = BaseFunction.class;
      ScriptableObject.getTypedProperty((Scriptable) nativeIterator_StopIteration0, "language version", class0);
      ScriptableObject.getPropertyIds(nativeIterator_StopIteration0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test056()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      context0.getApplicationClassLoader();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      Class<TopLevel> class0 = TopLevel.class;
      ScriptableObject.defineClass((Scriptable) nativeBoolean0, class0, false);
      nativeBoolean0.size();
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Error;
      // Undeclared exception!
      try { 
        TopLevel.getBuiltinCtor(context0, (Scriptable) nativeBoolean0, topLevel_Builtins0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constructor for \"Error\" not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test057()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeJavaTopPackage0, nativeBoolean0, 12, 160);
      ScriptableObject.isFalse(classLoader0);
      idFunctionObject0.isConst(context0.languageVersionProperty);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeError nativeError0 = new NativeError();
      Synchronizer synchronizer0 = new Synchronizer(nativeError0);
      ScriptableObject.buildDataDescriptor(importerTopLevel0, synchronizer0, 1005);
      NativeNumber nativeNumber0 = new NativeNumber(13);
      JavaScriptException javaScriptException0 = null;
      try {
        javaScriptException0 = new JavaScriptException(nativeNumber0, "msg.extend.scriptable", (-441));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -441
         //
         verifyException("com.google.javascript.rhino.head.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ScriptableObject.putConstProperty(nativeObject0, "|(}", nativeObject0);
      ScriptableObject.deleteProperty((Scriptable) nativeObject0, "T6wtNhk");
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeGenerator.init(nativeContinuation0, true);
      Float float0 = new Float((float) 0);
      nativeContinuation0.defineConst("T6wtNhk", nativeObject0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) nativeContinuation0;
      objectArray0[1] = (Object) float0;
      objectArray0[2] = (Object) float0;
      objectArray0[2] = (Object) "T6wtNhk";
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      nativeArray0.defineOwnProperty(context0, objectArray0[1], (ScriptableObject) nativeContinuation0, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("T6wtNhk", classLoader1);
      NativeJavaPackage nativeJavaPackage1 = nativeJavaPackage0.forcePackage("msg.invalid.type", nativeArray0);
      Class<NativeIterator.StopIteration> class0 = NativeIterator.StopIteration.class;
      nativeJavaPackage1.getDefaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Context context0 = new Context();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeCall nativeCall0 = new NativeCall();
      NativeJSON.init(nativeIterator_StopIteration0, false);
      ScriptableObject.getTopScopeValue(nativeCall0, nativeCall0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      nativeIterator_StopIteration0.remove((Object) context0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      nativeArray0.delete(1);
      ScriptableObject.deleteProperty((Scriptable) nativeArray0, 4);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      NativeJSON.init(nativeArray0, true);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Context context0 = Context.enter();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeCall nativeCall0 = new NativeCall();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ScriptableObject.getPropertyIds(nativeCall0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test063()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      context0.initStandardObjects();
      ScriptableObject.redefineProperty(nativeJavaTopPackage0, "[?Y1IVaP#oTqEm~L2", false);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      ScriptableObject.redefineProperty(nativeJavaTopPackage0, "[?Y1IVaP#oTqEm~L2", false);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Class<NativeContinuation> class0 = NativeContinuation.class;
      ScriptableObject.getTypedProperty((Scriptable) scriptableObject0, 1, class0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test065()  throws Throwable  {
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("|9y");
      ScriptableObject.deleteProperty((Scriptable) nativeJavaPackage0, "|9y");
      NativeObject nativeObject0 = new NativeObject();
      nativeObject0.containsKey((Object) null);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test066()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      context0.instructionThreshold = (-1881767740);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeError nativeError0 = new NativeError();
      ScriptableObject.buildDataDescriptor(nativeError0, nativeError0, 100);
      JavaScriptException javaScriptException0 = new JavaScriptException(nativeError0, "mo26K__kuY~yaJz*BC", 8);
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel(context0);
      importerTopLevel1.getAllIds();
      ImporterTopLevel importerTopLevel2 = new ImporterTopLevel();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeCall nativeCall0 = new NativeCall();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeGenerator.init(nativeIterator_StopIteration0, false);
      ScriptableObject.getPropertyIds((Scriptable) null);
      ImporterTopLevel importerTopLevel0 = null;
      try {
        importerTopLevel0 = new ImporterTopLevel((Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ImporterTopLevel", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test068()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("|9y");
      Double double0 = new Double(4);
      ScriptableObject.putConstProperty(nativeJavaPackage0, "(.", double0);
      NativeObject nativeObject0 = new NativeObject();
      nativeObject0.defineConst(";BAsE_oQKd]TGx", nativeCall0);
      Class<BaseFunction> class0 = BaseFunction.class;
      ScriptableObject.getTypedProperty((Scriptable) nativeObject0, "(.", class0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test069()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Class<NativeJavaClass> class0 = NativeJavaClass.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) nativeError0, class0, true, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't define constructor or class com.google.javascript.rhino.head.NativeJavaObject since more than one constructor has multiple parameters.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeObject nativeObject0 = new NativeObject();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.isEmpty();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      nativeContinuation0.getImplementation();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test071()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      String string0 = "|9y";
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("|9y");
      // Undeclared exception!
      try { 
        ScriptableObject.getArrayPrototype(nativeJavaPackage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      contextFactory0.makeContext();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      nativeBoolean0.size();
      ScriptableObject.getPropertyIds(nativeObject0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Context.getCurrentContext();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeCall nativeCall0 = new NativeCall();
      NativeJSON.init(nativeIterator_StopIteration0, false);
      ScriptableObject.getTopScopeValue(nativeCall0, nativeCall0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      nativeContinuation0.getImplementation();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test074()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      contextFactory0.seal();
      NativeError nativeError0 = new NativeError();
      NativeError nativeError1 = new NativeError();
      JavaScriptException javaScriptException0 = new JavaScriptException(nativeError1, "mo26K__kuY~yaJz*BC", 8);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      importerTopLevel0.isEmpty();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test075()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("|9y");
      nativeJavaPackage0.forcePackage("|9y", nativeCall0);
      ScriptableObject.deleteProperty((Scriptable) nativeJavaPackage0, "|9y");
      NativeObject nativeObject0 = new NativeObject();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.isEmpty();
      nativeJavaPackage0.equivalentValues("|9y");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Long long0 = new Long(0L);
      Long.divideUnsigned(0L, (-2969L));
      Long.sum((-2969L), 0L);
      Long.compare(0L, 0L);
      ScriptableObject.isTrue(long0);
      Scriptable scriptable0 = null;
      Integer integer0 = new Integer(0);
      Integer.toUnsignedLong((-16));
      Integer.compareUnsigned((-1633), 357);
      Integer.compareUnsigned(11, 54);
      Integer.compareUnsigned(0, (-800));
      // Undeclared exception!
      try { 
        ScriptableObject.defineProperty((Scriptable) null, "]^mLPSJW*GWED(=u", (Object) integer0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeJavaTopPackage0, nativeBoolean0, 12, 160);
      nativeJavaTopPackage0.sameValue(idFunctionObject0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      classLoader0.clearAssertionStatus();
      NativeError nativeError0 = new NativeError();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      classLoader0.getParent();
      nativeError0.setGetterOrSetter((String) null, 288, nativeJavaTopPackage0, false);
      Context.getCurrentContext();
      // Undeclared exception!
      try { 
        Context.reportRuntimeError0((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PropertyResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test079()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Class<NativeWith> class0 = NativeWith.class;
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.getDefaultValue(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.NativeWith
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray(150);
      nativeArray0.getOwnPropertyDescriptor(context0, context0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Context.enter();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(importerTopLevel0, nativeIterator_StopIteration0, 103, 8);
      ScriptableObject.buildDataDescriptor(importerTopLevel0, idFunctionObject0, 2);
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context0, (Scriptable) nativeIterator_StopIteration0, ")B9w4", (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000013 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      // Undeclared exception!
      try { 
        ScriptableObject.checkValidAttributes(2093);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2093
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2494L));
      ScriptableObject.getProperty((Scriptable) nativeArray0, "S*k@m");
      nativeArray0.preventExtensions();
      nativeArray0.getMaxInstanceId();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ScriptableObject.hasProperty((Scriptable) importerTopLevel0, 130);
      ScriptableObject.defineConstProperty(importerTopLevel0, "else");
      ScriptableObject.putProperty((Scriptable) importerTopLevel0, 1278, (Object) contextFactory0);
      NativeContinuation.init(context0, importerTopLevel0, false);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test085()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      String string0 = "|(}";
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) nativeContinuation0, class0, false, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.NativeJavaArray\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test086()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.makeContext();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertNotNull(context0);
      
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertNotNull(classLoader0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertNotNull(nativeIterator_StopIteration0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("global", importerTopLevel0.getClassName());
      assertNotNull(importerTopLevel0);
      
      ImporterTopLevel importerTopLevel1 = (ImporterTopLevel)context0.initStandardObjects((ScriptableObject) importerTopLevel0, false);
      assertSame(importerTopLevel0, importerTopLevel1);
      assertSame(importerTopLevel1, importerTopLevel0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel1.getTypeOf());
      assertTrue(importerTopLevel1.isExtensible());
      assertFalse(importerTopLevel1.isEmpty());
      assertTrue(importerTopLevel1.hasPrototypeMap());
      assertFalse(importerTopLevel1.avoidObjectDetection());
      assertFalse(importerTopLevel1.isSealed());
      assertEquals("global", importerTopLevel1.getClassName());
      assertNotNull(importerTopLevel1);
      
      ImporterTopLevel importerTopLevel2 = new ImporterTopLevel(context0);
      assertFalse(importerTopLevel2.equals((Object)importerTopLevel1));
      assertFalse(importerTopLevel2.equals((Object)importerTopLevel0));
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals("global", importerTopLevel2.getClassName());
      assertEquals("object", importerTopLevel2.getTypeOf());
      assertTrue(importerTopLevel2.isExtensible());
      assertFalse(importerTopLevel2.avoidObjectDetection());
      assertFalse(importerTopLevel2.isSealed());
      assertFalse(importerTopLevel2.isEmpty());
      assertTrue(importerTopLevel2.hasPrototypeMap());
      assertNotNull(importerTopLevel2);
      
      nativeIterator_StopIteration0.put("error reporter", (Scriptable) importerTopLevel2, (Object) contextFactory0);
      assertFalse(importerTopLevel2.equals((Object)importerTopLevel1));
      assertFalse(importerTopLevel2.equals((Object)importerTopLevel0));
      assertNotSame(importerTopLevel2, importerTopLevel1);
      assertNotSame(importerTopLevel2, importerTopLevel0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("global", importerTopLevel2.getClassName());
      assertEquals("object", importerTopLevel2.getTypeOf());
      assertTrue(importerTopLevel2.isExtensible());
      assertFalse(importerTopLevel2.avoidObjectDetection());
      assertFalse(importerTopLevel2.isSealed());
      assertFalse(importerTopLevel2.isEmpty());
      assertTrue(importerTopLevel2.hasPrototypeMap());
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertNotNull(nativeContinuation0);
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(importerTopLevel2);
      assertFalse(importerTopLevel2.equals((Object)importerTopLevel1));
      assertFalse(importerTopLevel2.equals((Object)importerTopLevel0));
      assertNotSame(importerTopLevel2, importerTopLevel1);
      assertNotSame(importerTopLevel2, importerTopLevel0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, objectArray0.length);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals("global", importerTopLevel2.getClassName());
      assertEquals("object", importerTopLevel2.getTypeOf());
      assertTrue(importerTopLevel2.isExtensible());
      assertFalse(importerTopLevel2.avoidObjectDetection());
      assertFalse(importerTopLevel2.isSealed());
      assertFalse(importerTopLevel2.isEmpty());
      assertTrue(importerTopLevel2.hasPrototypeMap());
      assertNotNull(objectArray0);
      
      ImporterTopLevel importerTopLevel3 = new ImporterTopLevel(context0);
      assertFalse(importerTopLevel3.equals((Object)importerTopLevel1));
      assertFalse(importerTopLevel3.equals((Object)importerTopLevel0));
      assertFalse(importerTopLevel3.equals((Object)importerTopLevel2));
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals("object", importerTopLevel3.getTypeOf());
      assertEquals("global", importerTopLevel3.getClassName());
      assertTrue(importerTopLevel3.isExtensible());
      assertFalse(importerTopLevel3.isEmpty());
      assertFalse(importerTopLevel3.isSealed());
      assertTrue(importerTopLevel3.hasPrototypeMap());
      assertFalse(importerTopLevel3.avoidObjectDetection());
      assertNotNull(importerTopLevel3);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = new Context();
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertNotNull(context0);
      
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertNotNull(nativeJavaTopPackage0);
      
      // Undeclared exception!
      try { 
        nativeJavaTopPackage0.getGetterOrSetter("error reporter", 6, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // error reporter
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isEmpty());
      assertTrue(nativeCall0.isExtensible());
      assertNotNull(nativeCall0);
      
      Arguments arguments0 = null;
      try {
        arguments0 = new Arguments(nativeCall0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test089()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertNotNull(nativeCall0);
      
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("|9y");
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertNotNull(nativeJavaPackage0);
      
      nativeJavaPackage0.setAttributes((String) null, (Scriptable) nativeCall0, 13);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      
      NativeJavaPackage nativeJavaPackage1 = nativeJavaPackage0.forcePackage("|9y", nativeCall0);
      assertFalse(nativeJavaPackage1.equals((Object)nativeJavaPackage0));
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertNotSame(nativeJavaPackage1, nativeJavaPackage0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertTrue(nativeJavaPackage1.isEmpty());
      assertFalse(nativeJavaPackage1.isSealed());
      assertFalse(nativeJavaPackage1.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaPackage1.getClassName());
      assertTrue(nativeJavaPackage1.isExtensible());
      assertEquals("object", nativeJavaPackage1.getTypeOf());
      assertNotNull(nativeJavaPackage1);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeJavaPackage0, "|9y");
      assertFalse(nativeJavaPackage0.equals((Object)nativeJavaPackage1));
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(boolean0);
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      
      NativeObject nativeObject0 = new NativeObject();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertNotNull(nativeObject0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertNotNull(importerTopLevel0);
      
      boolean boolean1 = importerTopLevel0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(boolean1);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      
      Object object0 = nativeJavaPackage0.equivalentValues("|9y");
      assertFalse(nativeJavaPackage0.equals((Object)nativeJavaPackage1));
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertNotNull(object0);
      
      ScriptableObject.putProperty((Scriptable) nativeJavaPackage1, "msg.no.side.effects", (Object) null);
      assertFalse(nativeJavaPackage0.equals((Object)nativeJavaPackage1));
      assertFalse(nativeJavaPackage1.equals((Object)nativeJavaPackage0));
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertNotSame(nativeJavaPackage1, nativeJavaPackage0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertTrue(nativeJavaPackage1.isEmpty());
      assertFalse(nativeJavaPackage1.isSealed());
      assertFalse(nativeJavaPackage1.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaPackage1.getClassName());
      assertTrue(nativeJavaPackage1.isExtensible());
      assertEquals("object", nativeJavaPackage1.getTypeOf());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test090()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.makeContext();
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertNotNull(nativeJavaTopPackage0);
      
      NativeError nativeError0 = new NativeError();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertNotNull(nativeError0);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertNotNull(nativeContinuation0);
      
      nativeError0.setGetterOrSetter("'L+sNC{2pVUpzV={AE", 0, nativeContinuation0, true);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      
      Context context1 = Context.getCurrentContext();
      assertFalse(context1.equals((Object)context0));
      assertNotSame(context1, context0);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context1.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, context1.getOptimizationLevel());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isSealed());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertFalse(context1.isGeneratingDebug());
      assertTrue(context1.isGeneratingSource());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertNotNull(context1);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertFalse(context0.equals((Object)context1));
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertNotNull(importerTopLevel0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test091()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(nativeCall0.isEmpty());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertNotNull(nativeCall0);
      
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("|9y");
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertNotNull(nativeJavaPackage0);
      
      NativeJavaPackage nativeJavaPackage1 = nativeJavaPackage0.forcePackage("|9y", nativeCall0);
      assertFalse(nativeJavaPackage1.equals((Object)nativeJavaPackage0));
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertNotSame(nativeJavaPackage1, nativeJavaPackage0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeCall0.isEmpty());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.isSealed());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage1.avoidObjectDetection());
      assertTrue(nativeJavaPackage1.isExtensible());
      assertFalse(nativeJavaPackage1.isSealed());
      assertEquals("object", nativeJavaPackage1.getTypeOf());
      assertEquals("JavaPackage", nativeJavaPackage1.getClassName());
      assertTrue(nativeJavaPackage1.isEmpty());
      assertNotNull(nativeJavaPackage1);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeJavaPackage0, "|9y");
      assertFalse(nativeJavaPackage0.equals((Object)nativeJavaPackage1));
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(boolean0);
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      
      NativeObject nativeObject0 = new NativeObject();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertNotNull(nativeObject0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertNotNull(importerTopLevel0);
      
      boolean boolean1 = importerTopLevel0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(boolean1);
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel(context0, true);
      assertFalse(importerTopLevel1.equals((Object)importerTopLevel0));
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals("object", importerTopLevel1.getTypeOf());
      assertFalse(importerTopLevel1.isSealed());
      assertFalse(importerTopLevel1.avoidObjectDetection());
      assertFalse(importerTopLevel1.isEmpty());
      assertTrue(importerTopLevel1.hasPrototypeMap());
      assertTrue(importerTopLevel1.isExtensible());
      assertEquals("global", importerTopLevel1.getClassName());
      assertNotNull(importerTopLevel1);
      
      boolean boolean2 = importerTopLevel1.isEmpty();
      assertFalse(importerTopLevel1.equals((Object)importerTopLevel0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(importerTopLevel1, importerTopLevel0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(boolean2);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals("object", importerTopLevel1.getTypeOf());
      assertFalse(importerTopLevel1.isSealed());
      assertFalse(importerTopLevel1.avoidObjectDetection());
      assertFalse(importerTopLevel1.isEmpty());
      assertTrue(importerTopLevel1.hasPrototypeMap());
      assertTrue(importerTopLevel1.isExtensible());
      assertEquals("global", importerTopLevel1.getClassName());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.makeContext();
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(context0);
      
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertNotNull(nativeJavaTopPackage0);
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      assertNotNull(nativeBoolean0);
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeJavaTopPackage0, nativeBoolean0, 12, 160);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      assertEquals(12, idFunctionObject0.methodId());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("", idFunctionObject0.getFunctionName());
      assertEquals(160, idFunctionObject0.getLength());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals(160, idFunctionObject0.getArity());
      assertTrue(idFunctionObject0.isExtensible());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertNotNull(idFunctionObject0);
      
      NativeError nativeError0 = new NativeError();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertNotNull(nativeError0);
      
      Double double0 = new Double(160);
      assertEquals(160.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      NativeBoolean nativeBoolean1 = (NativeBoolean)ScriptableObject.ensureScriptable(nativeBoolean0);
      assertSame(nativeBoolean0, nativeBoolean1);
      assertSame(nativeBoolean1, nativeBoolean0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean1.avoidObjectDetection());
      assertTrue(nativeBoolean1.isEmpty());
      assertEquals("Boolean", nativeBoolean1.getClassName());
      assertFalse(nativeBoolean1.isSealed());
      assertFalse(nativeBoolean1.hasPrototypeMap());
      assertEquals("object", nativeBoolean1.getTypeOf());
      assertTrue(nativeBoolean1.isExtensible());
      assertNotNull(nativeBoolean1);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertNotNull(nativeIterator_StopIteration0);
      
      IdFunctionObject idFunctionObject1 = new IdFunctionObject(nativeBoolean0, nativeBoolean1, 4, 140);
      assertFalse(idFunctionObject1.equals((Object)idFunctionObject0));
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean1.avoidObjectDetection());
      assertTrue(nativeBoolean1.isEmpty());
      assertEquals("Boolean", nativeBoolean1.getClassName());
      assertFalse(nativeBoolean1.isSealed());
      assertFalse(nativeBoolean1.hasPrototypeMap());
      assertEquals("object", nativeBoolean1.getTypeOf());
      assertTrue(nativeBoolean1.isExtensible());
      assertFalse(idFunctionObject1.isSealed());
      assertEquals("", idFunctionObject1.getFunctionName());
      assertFalse(idFunctionObject1.hasPrototypeMap());
      assertEquals(140, idFunctionObject1.getLength());
      assertTrue(idFunctionObject1.isEmpty());
      assertEquals("function", idFunctionObject1.getTypeOf());
      assertEquals(140, idFunctionObject1.getArity());
      assertTrue(idFunctionObject1.isExtensible());
      assertFalse(idFunctionObject1.avoidObjectDetection());
      assertEquals("Function", idFunctionObject1.getClassName());
      assertEquals(4, idFunctionObject1.methodId());
      assertNotNull(idFunctionObject1);
      
      NativeJavaTopPackage nativeJavaTopPackage1 = (NativeJavaTopPackage)ScriptableObject.ensureScriptable(nativeJavaTopPackage0);
      assertSame(nativeJavaTopPackage0, nativeJavaTopPackage1);
      assertSame(nativeJavaTopPackage1, nativeJavaTopPackage0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertTrue(nativeJavaTopPackage1.isExtensible());
      assertEquals("object", nativeJavaTopPackage1.getTypeOf());
      assertTrue(nativeJavaTopPackage1.isEmpty());
      assertFalse(nativeJavaTopPackage1.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage1.getClassName());
      assertFalse(nativeJavaTopPackage1.isSealed());
      assertNotNull(nativeJavaTopPackage1);
      
      String string0 = idFunctionObject1.getFunctionName();
      assertFalse(idFunctionObject1.equals((Object)idFunctionObject0));
      assertSame(nativeBoolean0, nativeBoolean1);
      assertSame(nativeBoolean1, nativeBoolean0);
      assertNotSame(idFunctionObject1, idFunctionObject0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("", string0);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean1.avoidObjectDetection());
      assertTrue(nativeBoolean1.isEmpty());
      assertEquals("Boolean", nativeBoolean1.getClassName());
      assertFalse(nativeBoolean1.isSealed());
      assertFalse(nativeBoolean1.hasPrototypeMap());
      assertEquals("object", nativeBoolean1.getTypeOf());
      assertTrue(nativeBoolean1.isExtensible());
      assertFalse(idFunctionObject1.isSealed());
      assertEquals("", idFunctionObject1.getFunctionName());
      assertFalse(idFunctionObject1.hasPrototypeMap());
      assertEquals(140, idFunctionObject1.getLength());
      assertTrue(idFunctionObject1.isEmpty());
      assertEquals("function", idFunctionObject1.getTypeOf());
      assertEquals(140, idFunctionObject1.getArity());
      assertTrue(idFunctionObject1.isExtensible());
      assertFalse(idFunctionObject1.avoidObjectDetection());
      assertEquals("Function", idFunctionObject1.getClassName());
      assertEquals(4, idFunctionObject1.methodId());
      assertNotNull(string0);
      
      NativeArray nativeArray0 = null;
      try {
        nativeArray0 = new NativeArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test093()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertNotNull(nativeCall0);
      
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("|9y");
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertNotNull(nativeJavaPackage0);
      
      boolean boolean0 = nativeCall0.isGenericDescriptor(nativeJavaPackage0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(boolean0);
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertTrue(nativeJavaPackage0.isExtensible());
      
      Class<NativeObject> class0 = NativeObject.class;
      // Undeclared exception!
      try { 
        nativeCall0.defineProperty("(.", class0, (-1950496919));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1950496919
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(nativeCall0.isEmpty());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertNotNull(nativeCall0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertNotNull(nativeIterator_StopIteration0);
      
      String[] stringArray0 = new String[0];
      Class<InterpretedFunction> class0 = InterpretedFunction.class;
      nativeIterator_StopIteration0.defineFunctionProperties(stringArray0, class0, 20);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, stringArray0.length);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isEmpty());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertNotNull(nativeContinuation0);
      
      NativeContinuation nativeContinuation1 = new NativeContinuation();
      assertFalse(nativeContinuation1.equals((Object)nativeContinuation0));
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeContinuation1.avoidObjectDetection());
      assertFalse(nativeContinuation1.isSealed());
      assertTrue(nativeContinuation1.isEmpty());
      assertEquals("object", nativeContinuation1.getTypeOf());
      assertFalse(nativeContinuation1.hasPrototypeMap());
      assertTrue(nativeContinuation1.isExtensible());
      assertEquals("Continuation", nativeContinuation1.getClassName());
      assertNotNull(nativeContinuation1);
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeIterator_StopIteration0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, objectArray0.length);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertNotNull(objectArray0);
      
      // Undeclared exception!
      try { 
        Interpreter.captureContinuation((Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Interpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      String string0 = "#ays![@m/Vq]^,}n@";
      BaseFunction baseFunction0 = new BaseFunction();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("Function", baseFunction0.getClassName());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertFalse(baseFunction0.isSealed());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertTrue(baseFunction0.isEmpty());
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isExtensible());
      assertNotNull(baseFunction0);
      
      int int0 = 188;
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptableObject("#ays![@m/Vq]^,}n@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type string
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test096()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertNotNull(nativeIterator_StopIteration0);
      
      String[] stringArray0 = new String[21];
      stringArray0[0] = "|,v";
      Class<NativeMath> class0 = NativeMath.class;
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.defineFunctionProperties(stringArray0, class0, 208);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"|,v\" not found in \"com.google.javascript.rhino.head.NativeMath\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(0L, nativeArray0.getLength());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertNotNull(nativeArray0);
      
      nativeArray0.delete(1);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(0L, nativeArray0.getLength());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeArray0, 4);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(boolean0);
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(0L, nativeArray0.getLength());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      
      NativeArray nativeArray1 = new NativeArray((-473L));
      assertFalse(nativeArray1.equals((Object)nativeArray0));
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals((-473L), nativeArray1.getLength());
      assertTrue(nativeArray1.isEmpty());
      assertFalse(nativeArray1.hasPrototypeMap());
      assertEquals("object", nativeArray1.getTypeOf());
      assertTrue(nativeArray1.isExtensible());
      assertEquals("Array", nativeArray1.getClassName());
      assertEquals((-473L), nativeArray1.jsGet_length());
      assertFalse(nativeArray1.avoidObjectDetection());
      assertFalse(nativeArray1.isSealed());
      assertNotNull(nativeArray1);
      
      Context context0 = Context.enter();
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertNotNull(context0);
      
      Float float0 = new Float((float) 1);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        nativeArray0.defineOwnProperty(context0, (Object) nativeArray1, (ScriptableObject) nativeArray1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertNotNull(nativeIterator_StopIteration0);
      
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertNotNull(nativeCall0);
      
      nativeCall0.setAttributes("jsGet_", (Scriptable) nativeIterator_StopIteration0, 13);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      
      boolean boolean0 = nativeCall0.isGenericDescriptor(nativeIterator_StopIteration0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(boolean0);
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      
      UniqueTag uniqueTag0 = (UniqueTag)Scriptable.NOT_FOUND;
      assertNotNull(uniqueTag0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test099()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertNotNull(nativeCall0);
      
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("|9y");
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.isSealed());
      assertNotNull(nativeJavaPackage0);
      
      nativeJavaPackage0.setAttributes((String) null, (Scriptable) nativeCall0, 13);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.isSealed());
      
      NativeJavaPackage nativeJavaPackage1 = nativeJavaPackage0.forcePackage("|9y", nativeCall0);
      assertFalse(nativeJavaPackage1.equals((Object)nativeJavaPackage0));
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertNotSame(nativeJavaPackage1, nativeJavaPackage0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.isSealed());
      assertTrue(nativeJavaPackage1.isExtensible());
      assertEquals("object", nativeJavaPackage1.getTypeOf());
      assertTrue(nativeJavaPackage1.isEmpty());
      assertFalse(nativeJavaPackage1.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage1.getClassName());
      assertFalse(nativeJavaPackage1.avoidObjectDetection());
      assertNotNull(nativeJavaPackage1);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeJavaPackage0, "|9y");
      assertFalse(nativeJavaPackage0.equals((Object)nativeJavaPackage1));
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(boolean0);
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.isSealed());
      
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeJavaPackage0, (String) null, (String) null, false);
      assertFalse(nativeJavaPackage0.equals((Object)nativeJavaPackage1));
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.isSealed());
      assertNotNull(lazilyLoadedCtor0);
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertNotNull(nativeBoolean0);
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeBoolean0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, objectArray0.length);
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test100()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertNotNull(nativeCall0);
      
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("|9y");
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isSealed());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertNotNull(nativeJavaPackage0);
      
      NativeJavaPackage nativeJavaPackage1 = nativeJavaPackage0.forcePackage("|9y", nativeCall0);
      assertFalse(nativeJavaPackage1.equals((Object)nativeJavaPackage0));
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertNotSame(nativeJavaPackage1, nativeJavaPackage0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage1.avoidObjectDetection());
      assertTrue(nativeJavaPackage1.isEmpty());
      assertEquals("JavaPackage", nativeJavaPackage1.getClassName());
      assertFalse(nativeJavaPackage1.isSealed());
      assertEquals("object", nativeJavaPackage1.getTypeOf());
      assertTrue(nativeJavaPackage1.isExtensible());
      assertNotNull(nativeJavaPackage1);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeJavaPackage0, "|9y");
      assertFalse(nativeJavaPackage0.equals((Object)nativeJavaPackage1));
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(boolean0);
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isSealed());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      
      NativeObject nativeObject0 = new NativeObject();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertTrue(nativeObject0.isEmpty());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertTrue(nativeObject0.isExtensible());
      assertNotNull(nativeObject0);
      
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.getTypedProperty((Scriptable) nativeCall0, "|9y", class0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertNull(baseFunction0);
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeJavaPackage0);
      assertFalse(nativeJavaPackage0.equals((Object)nativeJavaPackage1));
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, objectArray0.length);
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isSealed());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test101()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.makeContext();
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertNotNull(nativeJavaTopPackage0);
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.isSealed());
      assertNotNull(nativeBoolean0);
      
      ScriptRuntime.NoSuchMethodShim scriptRuntime_NoSuchMethodShim0 = new ScriptRuntime.NoSuchMethodShim(nativeJavaTopPackage0, "language version");
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertNotNull(scriptRuntime_NoSuchMethodShim0);
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeJavaTopPackage0, scriptRuntime_NoSuchMethodShim0, 13, 2441);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertTrue(idFunctionObject0.isEmpty());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(13, idFunctionObject0.methodId());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("", idFunctionObject0.getFunctionName());
      assertEquals(2441, idFunctionObject0.getLength());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals(2441, idFunctionObject0.getArity());
      assertNotNull(idFunctionObject0);
      
      // Undeclared exception!
      try { 
        nativeBoolean0.getAttributes("language version", (Scriptable) nativeJavaTopPackage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property language version not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test102()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      assertNotNull(nativeCall0);
      
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("|9y");
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isSealed());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertNotNull(nativeJavaPackage0);
      
      nativeJavaPackage0.setAttributes((String) null, (Scriptable) nativeCall0, 13);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isSealed());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      
      NativeJavaPackage nativeJavaPackage1 = nativeJavaPackage0.forcePackage("|9y", nativeCall0);
      assertFalse(nativeJavaPackage1.equals((Object)nativeJavaPackage0));
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertNotSame(nativeJavaPackage1, nativeJavaPackage0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isSealed());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertTrue(nativeJavaPackage1.isExtensible());
      assertEquals("object", nativeJavaPackage1.getTypeOf());
      assertFalse(nativeJavaPackage1.isSealed());
      assertTrue(nativeJavaPackage1.isEmpty());
      assertFalse(nativeJavaPackage1.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaPackage1.getClassName());
      assertNotNull(nativeJavaPackage1);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeJavaPackage0, "|9y");
      assertFalse(nativeJavaPackage0.equals((Object)nativeJavaPackage1));
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(boolean0);
      assertFalse(nativeJavaPackage0.isEmpty());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isSealed());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertNotNull(nativeBoolean0);
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeBoolean0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, objectArray0.length);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test103()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isEmpty());
      assertNotNull(nativeCall0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertNotNull(nativeIterator_StopIteration0);
      
      int int0 = nativeCall0.applyDescriptorToAttributeBitset((-361), nativeIterator_StopIteration0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals((-361), int0);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("|9y");
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertNotNull(nativeJavaPackage0);
      
      NativeJavaPackage nativeJavaPackage1 = nativeJavaPackage0.forcePackage("|9y", nativeCall0);
      assertFalse(nativeJavaPackage1.equals((Object)nativeJavaPackage0));
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertNotSame(nativeJavaPackage1, nativeJavaPackage0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isEmpty());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertTrue(nativeJavaPackage1.isExtensible());
      assertFalse(nativeJavaPackage1.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaPackage1.getClassName());
      assertFalse(nativeJavaPackage1.isSealed());
      assertEquals("object", nativeJavaPackage1.getTypeOf());
      assertTrue(nativeJavaPackage1.isEmpty());
      assertNotNull(nativeJavaPackage1);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeJavaPackage0, "|9y");
      assertFalse(nativeJavaPackage0.equals((Object)nativeJavaPackage1));
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(boolean0);
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertNotNull(nativeIterator_StopIteration0);
      
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertNotNull(nativeCall0);
      
      boolean boolean0 = nativeCall0.isGenericDescriptor(nativeIterator_StopIteration0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(boolean0);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      
      Class<TopLevel> class0 = TopLevel.class;
      String string0 = ScriptableObject.defineClass((Scriptable) nativeIterator_StopIteration0, class0, true, true);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals("global", string0);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test105()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.makeContext();
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertNotNull(context0);
      
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertNotNull(nativeJavaTopPackage0);
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertNotNull(nativeBoolean0);
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeJavaTopPackage0, nativeBoolean0, 12, 160);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals(160, idFunctionObject0.getLength());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("", idFunctionObject0.getFunctionName());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals(160, idFunctionObject0.getArity());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(12, idFunctionObject0.methodId());
      assertNotNull(idFunctionObject0);
      
      Class<InterpretedFunction> class0 = InterpretedFunction.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) idFunctionObject0, class0, false, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.InterpretedFunction\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      String string0 = Long.toUnsignedString(0L);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      long long1 = Long.divideUnsigned(0L, (-2969L));
      assertEquals(0L, long1);
      
      long long2 = Long.sum((-2969L), 0L);
      assertFalse(long2 == long1);
      assertEquals((-2969L), long2);
      
      boolean boolean0 = ScriptableObject.isTrue(long0);
      assertTrue(long0.equals((Object)long1));
      assertFalse(long0.equals((Object)long2));
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertNotNull(nativeJavaTopPackage0);
      
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) long0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "0";
      objectArray0[3] = (Object) classLoader0;
      objectArray0[4] = (Object) classLoader0;
      objectArray0[5] = (Object) classLoader0;
      objectArray0[6] = (Object) "0";
      objectArray0[7] = (Object) null;
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, objectArray0.length);
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(8L, nativeArray0.getLength());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(8L, nativeArray0.jsGet_length());
      assertNotNull(nativeArray0);
      
      boolean boolean1 = nativeJavaTopPackage0.sameValue(float0, nativeArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, objectArray0.length);
      assertFalse(boolean1);
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(8L, nativeArray0.getLength());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(8L, nativeArray0.jsGet_length());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test107()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertNotNull(importerTopLevel0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertNotNull(nativeIterator_StopIteration0);
      
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(nativeCall0.isEmpty());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertNotNull(nativeCall0);
      
      NativeError nativeError0 = new NativeError();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertNotNull(nativeError0);
      
      boolean boolean0 = true;
      IdFunctionObject idFunctionObject0 = nativeCall0.exportAsJSClass(2, nativeError0, true);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeCall0.isEmpty());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isSealed());
      assertTrue(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals(1, idFunctionObject0.methodId());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals(1, idFunctionObject0.getLength());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertTrue(idFunctionObject0.isExtensible());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals("Call", idFunctionObject0.getFunctionName());
      assertTrue(idFunctionObject0.isEmpty());
      assertTrue(idFunctionObject0.isSealed());
      assertEquals(1, idFunctionObject0.getArity());
      assertNotNull(idFunctionObject0);
      
      // Undeclared exception!
      try { 
        idFunctionObject0.put((-1873), (Scriptable) nativeCall0, (Object) nativeError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: -1873.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertNotNull(nativeObject0);
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeObject0, nativeObject0, 208, 26);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("", idFunctionObject0.getFunctionName());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(26, idFunctionObject0.getLength());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals(208, idFunctionObject0.methodId());
      assertEquals(26, idFunctionObject0.getArity());
      assertNotNull(idFunctionObject0);
      
      boolean boolean0 = BaseFunction.isApplyOrCall(idFunctionObject0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(boolean0);
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("", idFunctionObject0.getFunctionName());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(26, idFunctionObject0.getLength());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals(208, idFunctionObject0.methodId());
      assertEquals(26, idFunctionObject0.getArity());
      
      NativeArray nativeArray0 = new NativeArray((-35L));
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals((-35L), nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertEquals((-35L), nativeArray0.getLength());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertFalse(nativeArray0.isSealed());
      assertEquals("object", nativeArray0.getTypeOf());
      assertNotNull(nativeArray0);
      
      Stream stream0 = nativeArray0.parallelStream();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals((-35L), nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertEquals((-35L), nativeArray0.getLength());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertFalse(nativeArray0.isSealed());
      assertEquals("object", nativeArray0.getTypeOf());
      assertNotNull(stream0);
      
      Delegator delegator0 = new Delegator(nativeObject0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertNotNull(delegator0);
      
      Delegator delegator1 = delegator0.newInstance();
      assertFalse(delegator1.equals((Object)delegator0));
      assertNotSame(delegator0, delegator1);
      assertNotSame(delegator1, delegator0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertNotNull(delegator1);
      
      Object object0 = ScriptableObject.getTopScopeValue(delegator0, (Object) null);
      assertFalse(delegator0.equals((Object)delegator1));
      assertNotSame(delegator0, delegator1);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertNull(object0);
      
      boolean boolean1 = nativeArray0.sameValue(idFunctionObject0, delegator1);
      assertFalse(delegator0.equals((Object)delegator1));
      assertFalse(delegator1.equals((Object)delegator0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(delegator0, delegator1);
      assertNotSame(delegator1, delegator0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(boolean1);
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("", idFunctionObject0.getFunctionName());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(26, idFunctionObject0.getLength());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals(208, idFunctionObject0.methodId());
      assertEquals(26, idFunctionObject0.getArity());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals((-35L), nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertEquals((-35L), nativeArray0.getLength());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertFalse(nativeArray0.isSealed());
      assertEquals("object", nativeArray0.getTypeOf());
      
      // Undeclared exception!
      try { 
        nativeArray0.getGetterOrSetter("jsStaticFunction_remove", 2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // jsStaticFunction_remove
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test109()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertNotNull(context0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertNotNull(nativeIterator_StopIteration0);
      
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertNotNull(nativeCall0);
      
      Scriptable scriptable0 = ScriptableObject.getClassPrototype(nativeCall0, "error reporter");
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertNull(scriptable0);
      
      NativeJSON.init(nativeIterator_StopIteration0, false);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertNotNull(nativeContinuation0);
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeIterator_StopIteration0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, objectArray0.length);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertNotNull(objectArray0);
      
      Object object0 = nativeContinuation0.getImplementation();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(classLoader0);
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertNotNull(nativeBoolean0);
      
      int int0 = nativeBoolean0.size();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, int0);
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      
      nativeBoolean0.delete(160);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeBoolean0, "string", "msg.change.enumerable.with.conflgurable.false", false);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertNotNull(lazilyLoadedCtor0);
      
      BoundFunction boundFunction0 = new BoundFunction(context0, nativeBoolean0, (Callable) null, nativeBoolean0, (Object[]) null);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertEquals("function", boundFunction0.getTypeOf());
      assertTrue(boundFunction0.isExtensible());
      assertEquals("Function", boundFunction0.getClassName());
      assertFalse(boundFunction0.isSealed());
      assertFalse(boundFunction0.avoidObjectDetection());
      assertFalse(boundFunction0.isEmpty());
      assertFalse(boundFunction0.hasPrototypeMap());
      assertEquals(0, boundFunction0.getLength());
      assertNotNull(boundFunction0);
      
      boolean boolean0 = nativeBoolean0.has(7, (Scriptable) boundFunction0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(boolean0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertEquals("function", boundFunction0.getTypeOf());
      assertTrue(boundFunction0.isExtensible());
      assertEquals("Function", boundFunction0.getClassName());
      assertFalse(boundFunction0.isSealed());
      assertFalse(boundFunction0.avoidObjectDetection());
      assertFalse(boundFunction0.isEmpty());
      assertFalse(boundFunction0.hasPrototypeMap());
      assertEquals(0, boundFunction0.getLength());
      
      Class<TopLevel> class0 = TopLevel.class;
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeBoolean0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, objectArray0.length);
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertNotNull(objectArray0);
      
      String string0 = ScriptableObject.defineClass((Scriptable) nativeBoolean0, class0, false, false);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("global", string0);
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertNotNull(string0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertNotNull(nativeIterator_StopIteration0);
      
      boolean boolean1 = nativeIterator_StopIteration0.hasInstance(boundFunction0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(boolean1);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertEquals("function", boundFunction0.getTypeOf());
      assertTrue(boundFunction0.isExtensible());
      assertEquals("Function", boundFunction0.getClassName());
      assertFalse(boundFunction0.isSealed());
      assertFalse(boundFunction0.avoidObjectDetection());
      assertFalse(boundFunction0.isEmpty());
      assertFalse(boundFunction0.hasPrototypeMap());
      assertEquals(0, boundFunction0.getLength());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertNotNull(nativeIterator_StopIteration0);
      
      String[] stringArray0 = new String[21];
      Context context0 = new Context();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertNotNull(context0);
      
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context0, (Scriptable) nativeIterator_StopIteration0, "error reporter", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000004 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertNotNull(nativeError0);
      
      String string0 = nativeError0.getClassName();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("Error", string0);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertNotNull(string0);
      
      String string1 = nativeError0.getClassName();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("Error", string1);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertNotNull(string1);
      
      NativeString nativeString0 = new NativeString("Error");
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeString0.isSealed());
      assertTrue(nativeString0.isEmpty());
      assertFalse(nativeString0.avoidObjectDetection());
      assertTrue(nativeString0.isExtensible());
      assertEquals("Error", nativeString0.toString());
      assertFalse(nativeString0.hasPrototypeMap());
      assertEquals("object", nativeString0.getTypeOf());
      assertEquals("String", nativeString0.getClassName());
      assertNotNull(nativeString0);
      
      nativeString0.checkPropertyChange("/yx8GLR>*9hu &J,Q\u0006", nativeError0, nativeError0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeString0.isSealed());
      assertTrue(nativeString0.isEmpty());
      assertFalse(nativeString0.avoidObjectDetection());
      assertTrue(nativeString0.isExtensible());
      assertEquals("Error", nativeString0.toString());
      assertFalse(nativeString0.hasPrototypeMap());
      assertEquals("object", nativeString0.getTypeOf());
      assertEquals("String", nativeString0.getClassName());
      
      Class<BoundFunction> class0 = BoundFunction.class;
      Class<NativeObject> class1 = NativeObject.class;
      JavaMembers javaMembers0 = new JavaMembers(nativeError0, class1, true);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertNotNull(javaMembers0);
      
      NativeJavaMethod nativeJavaMethod0 = javaMembers0.ctors;
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeJavaMethod0.isEmpty());
      assertEquals("Function", nativeJavaMethod0.getClassName());
      assertFalse(nativeJavaMethod0.isSealed());
      assertFalse(nativeJavaMethod0.avoidObjectDetection());
      assertEquals("function", nativeJavaMethod0.getTypeOf());
      assertTrue(nativeJavaMethod0.isExtensible());
      assertEquals("NativeObject", nativeJavaMethod0.getFunctionName());
      assertFalse(nativeJavaMethod0.hasPrototypeMap());
      assertNotNull(nativeJavaMethod0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertNotNull(nativeIterator_StopIteration0);
      
      Synchronizer synchronizer0 = new Synchronizer(nativeError0, class0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertNotNull(synchronizer0);
      
      nativeIterator_StopIteration0.put(8, (Scriptable) nativeString0, (Object) synchronizer0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeString0.isSealed());
      assertFalse(nativeString0.avoidObjectDetection());
      assertTrue(nativeString0.isExtensible());
      assertEquals("Error", nativeString0.toString());
      assertFalse(nativeString0.isEmpty());
      assertFalse(nativeString0.hasPrototypeMap());
      assertEquals("object", nativeString0.getTypeOf());
      assertEquals("String", nativeString0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      
      String[] stringArray0 = new String[0];
      Class<FieldAndMethods> class2 = FieldAndMethods.class;
      nativeIterator_StopIteration0.defineFunctionProperties(stringArray0, class2, 0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, stringArray0.length);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeContinuation0.isEmpty());
      assertNotNull(nativeContinuation0);
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeString0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, objectArray0.length);
      assertFalse(nativeString0.isSealed());
      assertFalse(nativeString0.avoidObjectDetection());
      assertTrue(nativeString0.isExtensible());
      assertEquals("Error", nativeString0.toString());
      assertFalse(nativeString0.isEmpty());
      assertFalse(nativeString0.hasPrototypeMap());
      assertEquals("object", nativeString0.getTypeOf());
      assertEquals("String", nativeString0.getClassName());
      assertNotNull(objectArray0);
      
      Object object0 = nativeContinuation0.getImplementation();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeContinuation0.isEmpty());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertNotNull(nativeIterator_StopIteration0);
      
      String[] stringArray0 = new String[21];
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeIterator_StopIteration0, stringArray0[0]);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(21, stringArray0.length);
      assertTrue(boolean0);
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      
      NativeObject nativeObject0 = new NativeObject();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isExtensible());
      assertNotNull(nativeObject0);
      
      boolean boolean1 = nativeObject0.containsKey(stringArray0[0]);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(21, stringArray0.length);
      assertFalse(boolean1);
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.makeContext();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertNotNull(context0);
      
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertNotNull(nativeJavaTopPackage0);
      
      NativeError nativeError0 = new NativeError();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertNotNull(nativeError0);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeContinuation0.isEmpty());
      assertNotNull(nativeContinuation0);
      
      nativeError0.setGetterOrSetter((String) null, 288, nativeJavaTopPackage0, true);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isExtensible());
      
      Context context1 = Context.getCurrentContext();
      assertNull(context1);
      
      // Undeclared exception!
      try { 
        Context.reportRuntimeError0((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PropertyResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertNotNull(nativeIterator_StopIteration0);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = Context.getCurrentContext();
      assertNull(context0);
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertNotNull(nativeBoolean0);
      
      int int0 = nativeBoolean0.size();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, int0);
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      
      Class<NativeContinuation> class0 = NativeContinuation.class;
      NativeContinuation nativeContinuation0 = ScriptableObject.getTypedProperty((Scriptable) nativeBoolean0, 6, class0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertNull(nativeContinuation0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test116()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeObject0.isExtensible());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertNotNull(nativeObject0);
      
      ScriptableObject.putConstProperty(nativeObject0, "|(}", nativeObject0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeObject0.isExtensible());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      assertEquals("Object", nativeObject0.getClassName());
      
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("|(}");
      nativeJavaPackage0.get(1, (Scriptable) nativeObject0);
      ScriptableObject.deleteProperty((Scriptable) nativeJavaPackage0, "|(}");
      NativeObject nativeObject1 = new NativeObject();
      Context context0 = new Context();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context1 = Context.enter(context0, contextFactory0);
      nativeObject1.defineOwnProperties(context1, nativeObject0);
      Class<NativeObject> class0 = NativeObject.class;
      ScriptableObject.buildClassCtor((Scriptable) nativeObject1, class0, false, false);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      BaseFunction baseFunction0 = new BaseFunction(nativeJavaObject0, nativeJavaObject0);
      Context context0 = contextFactory0.makeContext();
      context0.initStandardObjects();
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) nativeJavaObject0, "QCbYTp?:", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeJavaObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeCall nativeCall0 = new NativeCall();
      Class<BaseFunction> class0 = BaseFunction.class;
      ScriptableObject.getTypedProperty((Scriptable) nativeIterator_StopIteration0, "error reporter", class0);
      NativeArray nativeArray0 = new NativeArray(0L);
      nativeArray0.defineOwnProperty(context0, (Object) class0, (ScriptableObject) nativeCall0, false);
      assertTrue(nativeCall0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      context0.getApplicationClassLoader();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertFalse(nativeBoolean0.isSealed());
      
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeBoolean0, "string", "language version", false);
      BoundFunction boundFunction0 = new BoundFunction(context0, nativeBoolean0, (Callable) null, nativeBoolean0, (Object[]) null);
      boolean boolean0 = nativeBoolean0.has(7, (Scriptable) boundFunction0);
      assertFalse(boolean0);
  }
}

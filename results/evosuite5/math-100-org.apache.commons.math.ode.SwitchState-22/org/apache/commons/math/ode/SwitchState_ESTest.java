/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 12:02:33 GMT 2019
 */

package org.apache.commons.math.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.DummyStepInterpolator;
import org.apache.commons.math.ode.SwitchState;
import org.apache.commons.math.ode.SwitchingFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SwitchState_ESTest extends SwitchState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      double[] doubleArray1 = new double[0];
      dummyStepInterpolator0.storeTime(2268.664);
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn(1.0, 656.2124570837526, (-316.9477202513), 656.2124570837526, (-1102.222)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 50.666666666666664, (-1102.222), 99);
      switchState0.stepAccepted(1, doubleArray0);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.stepAccepted((-316.9477202513), doubleArray1);
      assertEquals(1153.6145333333334, switchState0.getEventTime(), 0.01);
      
      boolean boolean0 = switchState0.reset((-1.0), doubleArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, 294, 294, 294);
      boolean boolean0 = switchState0.reset(294, (double[]) null);
      assertFalse(boolean0);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertFalse(switchState0.stop());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn(1.0, 656.2124570837526, (-316.9477202513), 656.2124570837526, (-1102.222)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 50.666666666666664, (-1102.222), 99);
      switchState0.stepAccepted(21.9346997, doubleArray0);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.stepAccepted(1687.8, doubleArray0);
      boolean boolean0 = switchState0.stop();
      assertEquals(21.9346997, switchState0.getEventTime(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, (-2024.6), (-2024.6), (-4348));
      boolean boolean0 = switchState0.stop();
      assertFalse(boolean0);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3.0689499459498917), 50.66666666667, (-1883.1638), 0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 50.66666666667, 50.66666666667, (-1));
      switchState0.stepAccepted((-1), doubleArray0);
      // Undeclared exception!
      try { 
        switchState0.evaluateStep(dummyStepInterpolator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Function values at endpoints do not have different signs.  Endpoints: [-1.0,NaN]  Values: [-1883.1638,0.0]
         //
         verifyException("org.apache.commons.math.analysis.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, (-2024.6), (-2024.6), (-4348));
      double[] doubleArray0 = new double[0];
      switchState0.reinitializeBegin((-2024.6), doubleArray0);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertFalse(switchState0.stop());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3383.88)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, (-3383.88), (-3383.88), (-4348));
      double[] doubleArray0 = new double[0];
      switchState0.reinitializeBegin((-3383.88), doubleArray0);
      assertFalse(switchState0.stop());
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SwitchState switchState0 = new SwitchState((SwitchingFunction) null, 1108.4338911009143, 1108.4338911009143, 238);
      double double0 = switchState0.getEventTime();
      assertFalse(switchState0.stop());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      dummyStepInterpolator0.storeTime(50.666666666666664);
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(50.666666666666664, 50.666666666666664, (-1103.7273682949735), 50.666666666666664, (-1103.7273682949735)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 50.666666666666664, (-1103.7273682949735), 99);
      switchState0.stepAccepted((-1103.7273682949735), doubleArray0);
      switchState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(50.19104499833219, switchState0.getEventTime(), 0.01);
      
      boolean boolean0 = switchState0.reset(99, doubleArray0);
      assertFalse(boolean0);
  }
}

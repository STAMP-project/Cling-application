/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 20:01:41 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-3973));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3973, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)38);
      assertEquals(6, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 3767);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-534.5));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[7];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'e');
      assertEquals(7, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)97);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Integer integer0 = new Integer((short)2865);
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, 0, (double) 2724L);
      assertArrayEquals(new double[] {2724.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, (int) 1, integerArray0[0]);
      assertNotNull(integerArray1);
      assertEquals(4, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, (-1), (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        ArrayUtils.add(objectArray0, (-5393), objectArray0[2]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5393, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long[] longArray0 = new long[9];
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, 1473, (Object) longArray0[2]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1473, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) floatArray1, (Object) "java.lang.String");
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.String
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer integer0 = new Integer((short)0);
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertEquals(9, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(14, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(12, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[7];
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertEquals(7, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, String>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, String>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 12);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) 0.0;
      // Undeclared exception!
      try { 
        ArrayUtils.addAll((Object[]) abstractMap_SimpleImmutableEntryArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot store java.lang.Object in an array of java.util.AbstractMap$SimpleImmutableEntry
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float[] floatArray0 = new float[3];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long[] longArray0 = new long[6];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      boolean boolean0 = ArrayUtils.isNotEmpty((Object[]) doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(integerArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long[] longArray0 = new long[3];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf("");
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Boolean boolean0 = new Boolean("R80h>)Ig;A&!^1");
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = booleanArray0[0];
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[] floatArray0 = new float[8];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 2515.8064F);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-2564.0F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Float[] floatArray0 = new Float[6];
      floatArray0[4] = (Float) 0.0F;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[4]);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float float0 = new Float((float) (short)2865);
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {2865.0F, 2865.0F, 2865.0F, 2865.0F, 2865.0F, 2865.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertNotSame(floatArray0, floatArray2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 2148L);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 2148L);
      assertArrayEquals(new double[] {2148.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 2717.4);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 289.98);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Double double0 = new Double((-3187.0));
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-3187.0), (-3187.0), (-3187.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte byte0 = (byte) (-99);
      Byte byte1 = new Byte((byte) (-99));
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte) (-99), (byte) (-99)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-1));
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)6);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      short[] shortArray0 = new short[2];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Short short0 = new Short((short)8);
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)8, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)10);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-15587));
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)7);
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = shortArray0[1];
      shortArray0[3] = shortArray0[2];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)7, (short)7, (short)7}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2, 0);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 1473;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertArrayEquals(new int[] {1473, 1473, 1473}, intArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-49));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long[] longArray0 = new long[8];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1789L);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (byte)2);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-2024L));
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertArrayEquals(new long[] {(-2024L), (-2024L), (-2024L)}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(0);
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      longArray0[2] = longArray0[1];
      longArray0[3] = longArray0[0];
      longArray0[4] = longArray0[3];
      longArray0[5] = longArray0[2];
      longArray0[6] = longArray0[2];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(7, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(4, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Character character0 = Character.valueOf('4');
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '>');
      assertArrayEquals(new char[] {'4', '>'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'F');
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'H');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character(' ');
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {' ', ' ', ' '}, charArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-114));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-658));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      float[] floatArray0 = new float[9];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float[] floatArray0 = new float[5];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1068.0F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float[] floatArray0 = new float[3];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float[] floatArray0 = new float[8];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1457.2922F), (-318));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-733.15F), 73);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      float[] floatArray0 = new float[21];
      int int0 = ArrayUtils.indexOf(floatArray0, 1316.0792F, (int) (byte) (-55));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) '\"', 34.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '\"';
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) '\"');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = (double) (-4305.3237F);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-25.6374044072909), 1.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 1, 1.0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1354.35, (-2129), 2.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1853.1745171456273), (double) (short)613);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 3161.567;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3161.567, 2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3161.567, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3161.567, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2363.894));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)2865;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), (-1457), 289.98);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) '\"', (double) '\"');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-2846));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 34.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)94;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)94, 417);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-28), (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-11), (int) (byte) (-28));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-41), (-1635));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)10;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-17), (int) (byte) (-17));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-61), (-866));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'H');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[5];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\u0000', (int) 'D');
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '^', 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '!', (-2441));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'k', 1247);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = ArrayUtils.indexOf(charArray0, 'A', (-1538));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((char[]) null, ',', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      short[] shortArray0 = new short[18];
      shortArray0[0] = (short) (-1);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      short[] shortArray0 = new short[2];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (short)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      short[] shortArray0 = new short[5];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (-702));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)11, 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte)0);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      short[] shortArray0 = new short[8];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1038, (int) (short) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      short[] shortArray0 = new short[3];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)603);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 2145931941;
      boolean boolean0 = ArrayUtils.contains(intArray0, 2145931941);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 69, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-122), (-105));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 2189, 2189);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = ArrayUtils.indexOf(intArray0, 2145128951, (-1824));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((int[]) null, (int) (byte)100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[4] = (long) (byte)2;
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (byte)2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      long[] longArray0 = new long[5];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      long[] longArray0 = new long[2];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 2060320097, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-978L), 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.indexOf(longArray0, 967L, (-6671));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (-978L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) '4';
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 1867);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 1372);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) "org.apache.commons.lang3.ArrayUtils", (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 855.4691F;
      objectArray0[1] = (Object) (-1591.0687F);
      objectArray0[2] = (Object) (-1591.0687F);
      objectArray0[3] = (Object) 855.4691F;
      objectArray0[4] = (Object) (-1591.0687F);
      objectArray0[5] = (Object) 855.4691F;
      objectArray0[6] = (Object) 855.4691F;
      objectArray0[7] = (Object) (-1591.0687F);
      objectArray0[8] = (Object) 855.4691F;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 1372);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 5);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[4], (-2146784596));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Short short0 = new Short((short)2865);
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) short0, 36);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.indexOf((Object[]) doubleArray1, (Object) null, (int) (byte) (-106));
      assertEquals((-1), int0);
      assertEquals(13, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      int int0 = ArrayUtils.indexOf(objectArray0, object0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Object object0 = new Object();
      int int0 = ArrayUtils.indexOf((Object[]) null, object0, (-2935));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      float[] floatArray0 = new float[9];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.reverse(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      char[] charArray0 = new char[6];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      short[] shortArray0 = new short[18];
      ArrayUtils.reverse(shortArray0);
      assertEquals(18, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int[] intArray0 = new int[18];
      ArrayUtils.reverse(intArray0);
      assertEquals(18, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayUtils.reverse(longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      ArrayUtils.reverse(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType("java.lang.Boolean", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameType(0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short[] shortArray1 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      short[] shortArray0 = new short[18];
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[3];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtils.add(longArray0, (-1L));
      boolean boolean0 = ArrayUtils.isSameLength(longArray1, longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, (-1L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      long[] longArray0 = new long[3];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) shortArray1, (Object[]) shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) shortArray0, (Object[]) shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray1, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray1, (Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 100);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 0, 0);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1254), 0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-212), (-212));
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 1511, (int) '6');
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 2);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-31), (-3166));
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 734, 734);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-2146626847), (-2146626847));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-697), (int) (short)1303);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-109), (int) (byte)10);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2479), (-1365));
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 1482, (int) (byte)0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)10, (int) (byte)10);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      char[] charArray0 = new char[6];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-74), 1390);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 0, 733);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 64, 0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-470), 640);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (int) (short)11, (-4643));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2236, 0);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 2, (-4264));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1165), 1473);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1209), 115);
      assertEquals(9, longArray1.length);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-2147483630), 2941);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 2156, (int) (short)0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (int) 1, 302);
      assertEquals(6, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, (-1386), (-1386));
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) null, 3831, 3831);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(6, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(6, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(7, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      boolean boolean0 = ArrayUtils.contains(booleanArray1, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(7, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) booleanArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, String>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, String>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) abstractMap_SimpleImmutableEntryArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 113L);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertEquals(13, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, String>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, String>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) abstractMap_SimpleImmutableEntryArray0, (Object[]) null);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>("os.version", "os.version");
      AbstractMap.SimpleEntry<Object, Object>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 4);
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(abstractMap_SimpleEntryArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 1, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-766), '=');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -766, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '_';
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 95L);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {95L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-5601.12367373));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 2, (float) '_');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)28);
      assertArrayEquals(new byte[] {(byte)0, (byte)28}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[3] = 'Q';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'Q');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      short[] shortArray0 = new short[2];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)10);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      char[] charArray0 = new char[10];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'v');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, (-1.0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, (int) (byte)83, (short) (byte) (-20));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 83, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-607.5081F);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-607.5081F));
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) int0);
      assertEquals(3, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (-2958.5263827101));
      assertArrayEquals(new double[] {(-2958.5263827101)}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEquals((-925), (-925));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 1024, (byte)42);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1024, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-2131608662), (-712));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2131608662, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)613);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)613}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = ArrayUtils.contains(charArray0, 'w');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)23);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)603);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      long[] longArray0 = new long[10];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 64);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      float[] floatArray0 = new float[7];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short) (-1102));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      boolean boolean0 = ArrayUtils.contains((Object[]) integerArray0, (Object) "bbbX-7+KH}/ak(6]n4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.add(intArray0, 100);
      assertArrayEquals(new int[] {0, 0, 0, 0, 100}, intArray1);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) '\"');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      long[] longArray0 = new long[5];
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 296, 116L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 296, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = ArrayUtils.add(charArray0, 'u');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'u'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertEquals(3, int0);
  }
}

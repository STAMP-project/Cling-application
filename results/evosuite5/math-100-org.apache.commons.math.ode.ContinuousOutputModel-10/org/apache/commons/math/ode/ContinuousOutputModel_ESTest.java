/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 11:43:29 GMT 2019
 */

package org.apache.commons.math.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import org.apache.commons.math.ode.ContinuousOutputModel;
import org.apache.commons.math.ode.DummyStepInterpolator;
import org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator;
import org.apache.commons.math.ode.MidpointStepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ContinuousOutputModel_ESTest extends ContinuousOutputModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[4][4];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, false);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(graggBulirschStoerStepInterpolator0);
      
      graggBulirschStoerStepInterpolator0.storeTime((-0.19316434850839564));
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-0.19316434850839564), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-0.19316434850839564), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, false);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals((-0.19316434850839564), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-0.19316434850839564), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-0.19316434850839564), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.setInterpolatedTime((-1481.6018868296867));
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-1481.6018868296867), continuousOutputModel0.getInterpolatedTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[4][4];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, false);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(graggBulirschStoerStepInterpolator0);
      
      graggBulirschStoerStepInterpolator0.storeTime((-3299.194387967));
      assertEquals((-3299.194387967), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-3299.194387967), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      graggBulirschStoerStepInterpolator0.shift();
      assertEquals((-3299.194387967), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-3299.194387967), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-3299.194387967), graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, false);
      assertEquals((-3299.194387967), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-3299.194387967), continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals((-3299.194387967), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-3299.194387967), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-3299.194387967), graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.setInterpolatedTime((-1481.6018868296867));
      assertEquals((-1481.6018868296867), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-3299.194387967), continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[4][4];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, true);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(graggBulirschStoerStepInterpolator0);
      
      graggBulirschStoerStepInterpolator0.previousTime = (-1494.6080621);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      
      graggBulirschStoerStepInterpolator0.storeTime((-1494.6080621));
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals((-1494.6080621), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals((-1494.6080621), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      graggBulirschStoerStepInterpolator0.storeTime(0.0);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      graggBulirschStoerStepInterpolator0.shift();
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(0.0, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, false);
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(0.0, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      graggBulirschStoerStepInterpolator0.previousTime = (-0.04432804463693693);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-0.04432804463693693), graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(0.0, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-0.04432804463693693), graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(0.0, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-0.04432804463693693), graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(0.0, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-0.04432804463693693), graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.setInterpolatedTime((-437.12607631));
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-437.12607631), continuousOutputModel0.getInterpolatedTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[4][4];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, true);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(graggBulirschStoerStepInterpolator0);
      
      graggBulirschStoerStepInterpolator0.storeTime((-1494.6080621));
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-1494.6080621), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-1494.6080621), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-1494.6080621), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, false);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-1494.6080621), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      graggBulirschStoerStepInterpolator0.shift();
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-1494.6080621), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-1494.6080621), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      graggBulirschStoerStepInterpolator0.storeTime(1388.5);
      assertEquals(1388.5, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(1388.5, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      graggBulirschStoerStepInterpolator0.shift();
      assertEquals(1388.5, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(1388.5, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(1388.5, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, false);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-1494.6080621), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(1388.5, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(1388.5, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(1388.5, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.setInterpolatedTime(0.06950872652973017);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(0.06950872652973017, continuousOutputModel0.getInterpolatedTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[4][4];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, true);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(graggBulirschStoerStepInterpolator0);
      
      graggBulirschStoerStepInterpolator0.storeTime((-1494.6080621));
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals((-1494.6080621), continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals((-1494.6080621), continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      graggBulirschStoerStepInterpolator0.storeTime(0.0);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(0.0, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, false);
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(0.0, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(0.0, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(0.0, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      graggBulirschStoerStepInterpolator0.shift();
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(0.0, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.setInterpolatedTime((-477.0360760279468));
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-477.0360760279468), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      
      continuousOutputModel0.setInterpolatedTime((-477.0360760279468));
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-477.0360760279468), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[10][4];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, true);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertNotNull(graggBulirschStoerStepInterpolator0);
      
      graggBulirschStoerStepInterpolator0.storeTime((-1494.6080621));
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals((-1494.6080621), continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals((-1494.6080621), continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals((-1494.6080621), continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals((-1494.6080621), graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      graggBulirschStoerStepInterpolator0.storeTime(0.0);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      graggBulirschStoerStepInterpolator0.shift();
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(0.0, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(0.0, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(0.0, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(0.0, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(0.0, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      continuousOutputModel0.setInterpolatedTime((-1494.6080621));
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1494.6080621), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
      
      continuousOutputModel0.setInterpolatedTime((-1164.0033412));
      assertEquals((-1164.0033412), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[5][1];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray0, doubleArray0, (double[]) null, doubleArray1, false);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(graggBulirschStoerStepInterpolator0);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      continuousOutputModel0.setInterpolatedTime((-1375.5178622));
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals((-1375.5178622), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[7][1];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, true);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(graggBulirschStoerStepInterpolator0);
      
      graggBulirschStoerStepInterpolator0.previousTime = (-509.2);
      assertEquals((-509.2), graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      
      graggBulirschStoerStepInterpolator0.storeTime(2401.84331698);
      assertEquals((-509.2), graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(2401.84331698, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(2401.84331698, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(2401.84331698, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(2401.84331698, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals((-509.2), continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-509.2), graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(2401.84331698, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(2401.84331698, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hole between time ranges
         //
         verifyException("org.apache.commons.math.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[5][1];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray0, doubleArray0, (double[]) null, doubleArray1, false);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(graggBulirschStoerStepInterpolator0);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotNull(continuousOutputModel1);
      
      MidpointStepInterpolator midpointStepInterpolator0 = new MidpointStepInterpolator();
      assertTrue(midpointStepInterpolator0.isForward());
      assertEquals(Double.NaN, midpointStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, midpointStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, midpointStepInterpolator0.getCurrentTime(), 0.01);
      assertNotNull(midpointStepInterpolator0);
      
      continuousOutputModel1.handleStep(midpointStepInterpolator0, false);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(midpointStepInterpolator0.isForward());
      assertEquals(Double.NaN, midpointStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, midpointStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, midpointStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      
      continuousOutputModel1.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(0, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // propagation direction mismatch
         //
         verifyException("org.apache.commons.math.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[5][1];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray0, doubleArray0, (double[]) null, doubleArray1, false);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(graggBulirschStoerStepInterpolator0);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotNull(continuousOutputModel1);
      
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator1 = new GraggBulirschStoerStepInterpolator(doubleArray1[4], (double[]) null, doubleArray1[3], doubleArray0, doubleArray1, false);
      assertFalse(graggBulirschStoerStepInterpolator1.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(graggBulirschStoerStepInterpolator1.equals((Object)graggBulirschStoerStepInterpolator0));
      assertEquals(0, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(graggBulirschStoerStepInterpolator1);
      
      continuousOutputModel1.handleStep(graggBulirschStoerStepInterpolator1, true);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertFalse(graggBulirschStoerStepInterpolator1.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertFalse(graggBulirschStoerStepInterpolator1.equals((Object)graggBulirschStoerStepInterpolator0));
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertNotSame(graggBulirschStoerStepInterpolator1, graggBulirschStoerStepInterpolator0);
      assertEquals(0, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        continuousOutputModel1.append(continuousOutputModel0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // state vector dimension mismatch
         //
         verifyException("org.apache.commons.math.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator();
      assertTrue(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertNotNull(dummyStepInterpolator0);
      
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotNull(continuousOutputModel1);
      
      continuousOutputModel1.handleStep(dummyStepInterpolator0, true);
      assertTrue(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      
      continuousOutputModel0.append(continuousOutputModel1);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      continuousOutputModel0.append(continuousOutputModel0);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[7][1];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, true);
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedTime();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double double0 = continuousOutputModel0.getFinalTime();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      boolean boolean0 = continuousOutputModel0.requiresDenseOutput();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(boolean0);
  }
}

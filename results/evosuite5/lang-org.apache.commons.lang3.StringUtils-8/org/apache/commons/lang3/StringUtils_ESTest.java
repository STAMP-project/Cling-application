/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 00:49:50 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Stack;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("J]0KWrl}nx(7^g");
      StringUtils.endsWithAny("h", stringArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringUtils.endsWithAny(":)T5xDN", (String[]) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("the character must not be null");
      StringUtils.endsWithAny("the character must not be null", stringArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("J]0KWrl}nx(7^g");
      StringUtils.endsWithAny((String) null, stringArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringUtils.normalizeSpace((String) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringUtils.endsWithIgnoreCase((String) null, "Array and element cannot both be null");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringUtils.endsWithIgnoreCase("f8", (String) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"oT4I 7ID";
      StringUtils.startsWithAny("\"oT4I 7ID", stringArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[0];
      StringUtils.startsWithAny(";~*%QnF", stringArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Array and element cannot both be null");
      String[] stringArray0 = StringUtils.split(string0, "v-*!m,ML", 0);
      StringUtils.startsWithAny("rL1~Ynb?fmf", stringArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[9];
      StringUtils.startsWithAny((String) null, stringArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringUtils.startsWithIgnoreCase("+C}xhUh:", "p{InCombiningDiacriticalMarks}+");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringUtils.startsWithIgnoreCase((String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringUtils.startsWithIgnoreCase("", (String) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringUtils.getLevenshteinDistance("Array and element cannot both be null", "m_-Qd");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringUtils.getLevenshteinDistance("gMp?2&O2", "");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringUtils.getLevenshteinDistance("", "");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringUtils.getLevenshteinDistance("F\u0000", "F\u0000");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[0];
      StringUtils.getCommonPrefix(stringArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringUtils.getCommonPrefix((String[]) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "...";
      stringArray0[1] = "...";
      stringArray0[2] = "...";
      stringArray0[3] = "...";
      StringUtils.getCommonPrefix(stringArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "XyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXy";
      stringArray0[1] = "Xy";
      stringArray0[2] = "XyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXy";
      StringUtils.getCommonPrefix(stringArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("`/)JG.`xg7G", "`/)JG.`xg7G", (-1));
      StringUtils.getCommonPrefix(stringArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      charSequenceArray0[1] = (CharSequence) charBuffer0;
      StringUtils.indexOfDifference(charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[3];
      StringUtils.getCommonPrefix(stringArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[1];
      StringUtils.getCommonPrefix(stringArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringUtils.indexOfDifference((CharSequence[]) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringUtils.indexOfDifference((CharSequence) "C3S!C6NDd|/T", (CharSequence) "");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringUtils.indexOfDifference((CharSequence) "zG<;jzRaZymkR:Y5", (CharSequence) "zG<;jzRaZymkR:Y5D");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringUtils.indexOfDifference((CharSequence) "zG<;jzRaZymkR:Y5D", (CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "org.apache.commons.langsun.text.n[>malizer");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringUtils.difference("u ", "u ");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "j";
      StringUtils.difference(stringArray0[0], "The character must not be null");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringUtils.difference((String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringUtils.difference("o", (String) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringUtils.abbreviateMiddle("org.apache.commons.lang3.ObjectUtils$Null", "hv ab", 35);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringUtils.abbreviateMiddle("v/JG.`xg7G", "v/JG.`xg7G", 3546);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringUtils.abbreviateMiddle("", (String) null, 97);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringUtils.abbreviateMiddle("sT", "minimum abbreviation winfd is 4", (-1));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringUtils.abbreviateMiddle((String) null, (String) null, 98);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringUtils.abbreviate("D4U]UAZoDD/&wd", 10, 10);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("G7NmC+6+,cz`m}VVSA%", 2198, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringUtils.abbreviate("", 8192);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("-aS!_XBoG", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringUtils.abbreviate((String) null, 35);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringUtils.reverseDelimited((String) null, '6');
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringUtils.reverse((String) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringUtils.reverse("Tey charactr ");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringUtils.defaultIfEmpty((CharSequence) "v", (CharSequence) "v");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringUtils.defaultString((String) null, "eYoV]Rk\"7o\"8d~)\"_");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringUtils.defaultString("", "");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringUtils.defaultString((String) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringUtils.defaultString("Strings must not be null");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringUtils.isAllUpperCase("NEFAILEDEXCEP");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringUtils.isAllUpperCase("");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringUtils.isAllUpperCase("Wz^k&v");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringUtils.isAllUpperCase((CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringUtils.isAllLowerCase(".\"z;p]!");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringUtils.isAllLowerCase("");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringUtils.isAllLowerCase("f");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringUtils.isAllLowerCase((CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringUtils.isWhitespace(" is not in the range '0' - '9'");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringUtils.isWhitespace("");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringUtils.isWhitespace((CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = StringUtils.leftPad("8Au|t#@ZBdG%W.9", 1244, (String) null);
      StringUtils.isNumericSpace(string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringUtils.isNumericSpace((CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringUtils.isNumericSpace("");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringUtils.isNumeric("");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringUtils.isNumeric((CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringUtils.isNumeric("5w[l,vryutils$?-.~n");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringUtils.isAsciiPrintable("zG<;jzRaZymkR:Y5D");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringUtils.isAsciiPrintable(">(4q{");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringUtils.isAsciiPrintable((CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringUtils.isAlphanumericSpace("TimeToLive of ");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringUtils.isAlphanumericSpace((CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringUtils.isAlphanumericSpace("mu,go+v abbreviation width with offset is 7");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringUtils.isAlphanumeric("NLgTYd NH|]<t");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringUtils.isAlphanumeric((CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringUtils.isAlphanumeric("v3");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringUtils.isAlphaSpace("j");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringUtils.isAlphaSpace(" ");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringUtils.isAlphaSpace((CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringUtils.isAlphaSpace("+C}[x.Fh:");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringUtils.isAlpha("");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringUtils.isAlpha((CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringUtils.isAlpha("sun.text.Normalizer");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringUtils.countMatches("-As!_xbOg", "");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringUtils.countMatches("SeF~HG++c%@w", "SeF~HG++c%@w");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringUtils.countMatches((String) null, "RI)Y>");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      StringUtils.indexOfDifference((CharSequence) "", (CharSequence) string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringUtils.swapCase("SEnj]0/p`&+");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringUtils.swapCase((String) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringUtils.uncapitalize("");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringUtils.uncapitalize((CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringUtils.uncapitalize("r=*q,ykwyK");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringUtils.capitalize("Index: ");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringUtils.capitalize((CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringUtils.capitalize("");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      StringUtils.lowerCase((String) null, locale0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      StringUtils.lowerCase("\":v<gu", locale0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringUtils.lowerCase((String) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringUtils.lowerCase("sun.text.Normalizer is not available");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      StringUtils.upperCase((String) null, locale0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      StringUtils.upperCase("a", locale0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringUtils.upperCase((String) null);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "\\u0";
      StringUtils.upperCase(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringUtils.center("(3zgj%\"%a8z<svftb", 10, "%s`3vm],");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringUtils.center("java.text.ormalizer isnot available", (-1), "mghvum abbreviation width with offset is 7");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringUtils.center((String) null, 13, (String) null);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringUtils.center("clone", 5);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringUtils.center("'B_ddP>9b", 0, 'G');
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringUtils.length((CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringUtils.length("m#/?[Wb(_PKP@");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringUtils.leftPad("v/JG.`xg7G", 13, "v/JG.`xg7G");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringUtils.leftPad(",z", 4, ",z");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringUtils.leftPad(" is less than 0: ", (-115), " is less than 0: ");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringUtils.leftPad((String) null, 3956, (String) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringUtils.center("a", 8187, (String) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringUtils.center("zdc=(Z`", 8);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringUtils.leftPad((String) null, 8192);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringUtils.rightPad("38,!%dgi=,9Jk=", 27, "hGU+xh%=spd(D/}Nh");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringUtils.rightPad("F\u0000", 19, "VkY/8E'rN;Zkh{`n");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringUtils.center("`", 128, "3v8ziG(<1m");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "\\u0";
      StringUtils.rightPad(string0, (-2046), string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringUtils.rightPad("", 8192, "");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringUtils.rightPad((String) null, 2, (String) null);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringUtils.rightPad("]sX", 8210);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringUtils.rightPad((String) null, 8192);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringUtils.repeat("Xy", 32);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringUtils.repeat("j", (String) null, 121);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.repeat("G", 8194);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.repeat("", 122);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.repeat("InvocationTargetException occurred", 1);
      assertNotNull(string0);
      assertEquals("InvocationTargetException occurred", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = StringUtils.repeat(" ", (-2621));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, (String) null, 115);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.chop("Xy");
      assertNotNull(string0);
      assertEquals("X", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.chomp("`/)JG.`xg7G", "`/)JG.`xg7G");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.chomp(" ", "The String must not be empty");
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.chomp("RK5xNM_m1fmeh;", (String) null);
      assertNotNull(string0);
      assertEquals("RK5xNM_m1fmeh;", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.chomp("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.chomp(" ");
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.chomp("seNJ]0/P`&+");
      assertNotNull(string0);
      assertEquals("seNJ]0/P`&+", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.overlay("", "", 8192, 8192);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.overlay("f%%B2", "f%%B2", (-2541), (-2541));
      assertNotNull(string0);
      assertEquals("f%%B2f%%B2", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, (String) null, (-1987), (-2966));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.overlay("org.apache.commons.lang3.CharUtils", (String) null, 8192, 15);
      assertNotNull(string0);
      assertEquals("org.apache.comm", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.replaceChars("{nqSBsiLXsI", "{nqSBsiLXsI", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.replaceChars("The character ", "The character ", "The character ");
      assertNotNull(string0);
      assertEquals("The character ", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.replaceChars("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefgh)jklmnopqrstuvwxyz{|}~", "i", (String) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefgh)jklmnopqrstuvwxyz{|}~", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.replaceChars("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", "", (String) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'S', 'S');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.replaceChars("]V ", 'z', 'z');
      assertNotNull(string0);
      assertEquals("]V ", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "+om RB~Va%v[";
      String string0 = StringUtils.replaceEach("+om RB~Va%v[", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("+om RB~Va%v[", string0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("~0jWB@j7T*v%\"pPF0");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("~0jWB@j7T*v%\"pPF0", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: ~0jWB@j7T*v%\"pPF0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("n'8~[=");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "n'8~[=";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("n'8~[=", stringArray0, stringArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: n'8~[='8~[='8~[='8~[='8~[='8~[='8~[='8~[=
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("u65o'1 ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("u65o'1 ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: u65o'1 
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("]gR};_");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("o 1o?B7#MF", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM");
      assertNotNull(stringArray0);
      assertEquals(12, stringArray0.length);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.replaceEachRepeatedly("The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM", stringArray0, stringArray1);
      assertNotNull(string0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM", string0);
      assertEquals(12, stringArray0.length);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("A\"#;");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceEachRepeatedly("A\"#;", stringArray0, (String[]) null);
      assertNotNull(string0);
      assertEquals("A\"#;", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("\"ksE(}}^|$DdHxjVI``", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("\"ksE(}}^|$DdHxjVI``", string0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("G,2sJ9n`qLIj[eo", (String[]) null, (String[]) null);
      assertNotNull(string0);
      assertEquals("G,2sJ9n`qLIj[eo", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.replace("Ar(2lYs6cd>\"B ", "Ar(2lYs6cd>\"B ", "Ar(2lYs6cd>\"B ", 122);
      assertNotNull(string0);
      assertEquals("Ar(2lYs6cd>\"B ", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.replaceOnce(" ", " ", " ");
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.rightPad(string0, 13);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\u0          ", string1);
      
      String string2 = StringUtils.remove(string1, "NFD");
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\\u0          ", string2);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The character must not be null";
      String string0 = StringUtils.replace("8!'x*T2_Iw'0D@UOi", "OGy i,{O%s", stringArray0[0], 0);
      assertNotNull(string0);
      assertEquals("8!'x*T2_Iw'0D@UOi", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("\u0003VZ2w1C[`", "\u0003VZ2w1C[`", (String) null);
      assertNotNull(string0);
      assertEquals("\u0003VZ2w1C[`", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.remove("]V ", 'q');
      assertNotNull(string0);
      assertEquals("]V ", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.remove("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", 'Q');
      assertNotNull(string0);
      assertEquals("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, '5');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.remove("j", (String) null);
      assertNotNull(string0);
      assertEquals("j", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.remove(" ", " ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM", "The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase(")", (String) null);
      assertNotNull(string0);
      assertEquals(")", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.repeat("|v/JG.`xg7G", "|v/JG.`xg7G", 14);
      assertNotNull(string0);
      assertEquals("|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G|v/JG.`xg7G", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.removeEnd("org.apache.commons.langsun.text.n[>malizer", (String) null);
      assertNotNull(string0);
      assertEquals("org.apache.commons.langsun.text.n[>malizer", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.removeEnd("||", "v.");
      assertNotNull(string0);
      assertEquals("||", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("SecurityException occurred", "E]jCC");
      assertNotNull(string0);
      assertEquals("SecurityException occurred", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("array acy,^? 4q)k+/d\be%wboth be null", "");
      assertNotNull(string0);
      assertEquals("array acy,^? 4q)k+/d\be%wboth be null", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("9lAEtR8h:ls#z5EX`s", "9lAEtR8h:ls#z5EX`s");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = StringUtils.removeStart("CaUnnot store ", "CaUnnot store ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = StringUtils.removeStart("Strings must not be null", "[{\"!=e=T");
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("The characte must not be null");
      assertNotNull(string0);
      assertEquals("Thecharactemustnotbenull", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNotNull(string1);
      assertEquals("\\u0", string1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "*R{}R");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, '*');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Integer integer0 = new Integer(8188);
      assertNotNull(integer0);
      assertEquals(8188, (int)integer0);
      
      Integer integer1 = new Integer(23);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(23, (int)integer1);
      
      boolean boolean0 = linkedHashSet0.add(integer1);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(linkedHashSet0.contains(integer0));
      assertTrue(linkedHashSet0.contains(23));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedHashSet0.add(integer0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(boolean1);
      
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, (String) null);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertNotNull(string0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertEquals("238188", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Integer integer0 = new Integer((-9));
      assertNotNull(integer0);
      assertEquals((-9), (int)integer0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains((-9)));
      
      boolean boolean0 = hashSet0.add(integer0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains((-9)));
      assertTrue(boolean0);
      
      boolean boolean1 = hashSet0.add((Integer) null);
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(hashSet0.contains((-9)));
      assertTrue(boolean1);
      
      String string0 = StringUtils.join((Iterable<?>) hashSet0, "");
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertNotNull(string0);
      assertTrue(hashSet0.contains((-9)));
      assertEquals("-9", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(integer0));
      
      boolean boolean0 = hashSet0.add(integer0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(hashSet0.contains(integer0));
      assertTrue(boolean0);
      
      boolean boolean1 = hashSet0.add((Integer) null);
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(hashSet0.contains(integer0));
      assertTrue(boolean1);
      
      String string0 = StringUtils.join((Iterable<?>) hashSet0, "G");
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertNotNull(string0);
      assertTrue(hashSet0.contains(integer0));
      assertEquals("16G", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(integer0));
      
      boolean boolean0 = hashSet0.add(integer0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(hashSet0.contains(integer0));
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((Iterable<?>) hashSet0, "G");
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertNotNull(string0);
      assertTrue(hashSet0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "I;bG&Rf&e!A)b}lW^t");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      String string0 = StringUtils.join((Iterable<?>) hashSet0, "G");
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      stack0.setSize(32);
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(32, stack0.size());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", stack0.toString());
      assertEquals(32, stack0.capacity());
      
      String string0 = StringUtils.join((Iterable<?>) stack0, 'u');
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(32, stack0.size());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", stack0.toString());
      assertEquals(32, stack0.capacity());
      assertNotNull(string0);
      assertEquals("uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode1);
      assertEquals(2, enumSet0.size());
      assertNotNull(enumSet0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'W');
      assertEquals(2, enumSet0.size());
      assertNotNull(string0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals("EXTENDED_FILTERINGWMAP_EXTENDED_RANGES", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      String string0 = StringUtils.join((Iterable<?>) stack0, 'N');
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '/');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'W');
      assertEquals(1, enumSet0.size());
      assertNotNull(string0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "IRYZ??-*L1qa~B:W>p", 9, (-1081));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "{}");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String string0 = StringUtils.join(objectArray0, '`');
      assertNotNull(string0);
      assertEquals("```````", string0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'N', 3045, 16);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("+C}xhUh:");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("4}HS", "4}HS");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("_", "_");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("h", "h");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("arrpse0p9>\";5ment cannot both xe null", (String) null, 4);
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The character must not be Dull", 'l');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The character must not be Dull", 'l');
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", 'w');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '+');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("arrpse0p9>\";5ment cannot both bx null", "arrpse0p9>\";5ment cannot both bx null", 1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("q<4iCQH1gu9y~|a9q<4iCQH\"gu9y~|as", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("The character must not be Dull", (String) null);
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("timetolive of ", "timetolive of ", "CaJ5YRD3YN~");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("The character must not be Dull", "timetoliv", "timetoliv");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width is 4", " ", " ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "CSO#}", "CSO#}");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("bbc(Gd2%a#yOX9", "bbc(Gd2%a#yOX9", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.substringBetween("`/)JG.`xg7G", "`/)JG.`xg7G");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.substringBetween("/'1~n|7xftfnf", " ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.substringBetween("5 ", (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.substringBetween("+8xNM3+:", "+8xNM3+:", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("{nqSBsiLXsI", "{nqSB");
      assertNotNull(string0);
      assertEquals("siLXsI", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("P+,m", "mhi)bgw1dihq)f^0#f");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("{nqSBsiLXsI", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("}Y3%3(tSq62kBBja8\"", "}Y3%3(tSq62kBBja8\"");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast(", '", ", '");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("/'1~n|7xftfnf", "");
      assertNotNull(string0);
      assertEquals("/'1~n|7xftfnf", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast(" ", "cO}L`d>/:/r.t");
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.substringAfter("search and replace array lengths don't match: ", ",`W`Y!<|a,'X$e");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.substringAfter("vq}\"", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.substringAfter(":g", ":g");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.substringBefore("The Character must not be null", "The Character must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.substringBefore(string0, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.substringBefore("8E:~~H~;<B", (String) null);
      assertNotNull(string0);
      assertEquals("8E:~~H~;<B", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.substringBefore("y", "I61-");
      assertNotNull(string0);
      assertEquals("y", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.mid("E", (-2069), 256);
      assertNotNull(string0);
      assertEquals("E", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.mid("", 8221, 8221);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.mid("SecurityException occurred", 1809, (-1));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 9, 9);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.mid("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", 8, 8);
      assertNotNull(string0);
      assertEquals("HHHHHHHH", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.right("^.+^SM!BU|rD$):", 3);
      assertNotNull(string0);
      assertEquals("$):", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.right("Xy", (-13));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 2877);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.left("{nqSBsiLXsI", 5);
      assertNotNull(string0);
      assertEquals("{nqSB", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.left(">r", 3);
      assertNotNull(string0);
      assertEquals(">r", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 7);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.left("#k3rhZYN$p", (-2));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.substring("H", 2, 2);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.substring("                                                               Array and element cannot both be null", 100, 127);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.substring("e7>Fg>-QA<w", (-746), (-746));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 1, 1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.substring("o", 124);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.substring("The Array must not be null", (-2695));
      assertNotNull(string0);
      assertEquals("The Array must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 10);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      int int0 = StringUtils.lastIndexOfAny("th be null", stringArray0);
      assertEquals(10, int0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("IRYZ??-*L1qa~B:W>p", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Array and element cannot both be null");
      assertNotNull(string0);
      assertEquals("Array and element cannot both be null", string0);
      
      String[] stringArray0 = StringUtils.split(string0, "v-*!m,ML", 0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("*pGs#r_Wz$JC$5C@U&", stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String[] stringArray0 = new String[9];
      int int0 = StringUtils.lastIndexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The Character must not be null");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny("E(", stringArray0);
      assertEquals((-1), int0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String[] stringArray0 = new String[8];
      int int0 = StringUtils.indexOfAny("A]Sjk;[Vg!S9s", stringArray0);
      assertEquals((-1), int0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("E(", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The String must nt be empty", "The String must nt be empty");
      assertNotNull(stringArray0);
      assertEquals(28, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny("5Fj=", stringArray0);
      assertEquals(0, int0);
      assertEquals(28, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((String) null, (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "^z/E_T+^t8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "A\"#;", "'Ft");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "QK%U|0{L|q$\be", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) ":N#;", ":N#;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'X');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "', IS NEITHER OF TYPE mAP.eNTRY NOR AN aRRAY", string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "zG<;jzRaZymkR:Y5D", "!\"CiU97xN,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'o';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "o", charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'o', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "a", charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "?$!b0F10l 5*h ", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("', is neither of type Map.Entry nor an Array", "SecurityException occurred");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut(" ", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("The character ", "The character ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("", "Exeption cloning Cloneable fype ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[5] = '+';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "+C}xhUh:", charArray0);
      assertFalse(boolean0);
      assertEquals(12, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "+8xNM3/t:", charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'+'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "U*c&=gfBy26UYM5&x#", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("CyaaY^AW/PCQ@YC0f", "w<*4Tm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny("dsz ", charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("v", "v");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "java.lang.Integer@0000000001", "java.lang.Integer@0000000001");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Array and element cannot both be null", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      int int0 = StringUtils.indexOfAny((CharSequence) "+C}xhUh:", charArray0);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'+'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[5] = '+';
      int int0 = StringUtils.indexOfAny((CharSequence) "+C}xhUh:", charArray0);
      assertEquals(0, int0);
      assertEquals(10, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '+', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      int int0 = StringUtils.indexOfAny((CharSequence) "RK5xNM_m1fmeh;", charArray0);
      assertEquals(13, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {';'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "38,!%dgi=,9Jk=hGU+xh%=spd(D", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = StringUtils.indexOfAny((CharSequence) " ", charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Array element ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("zG<;jzRaZymkR:Y5D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("n", "n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase(",w>n(4q{", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("}dR|S$Vht", "o");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("^/51D", "org.apache.comon.lang3.CharSeqenceUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = "k\\u0xe#<*i;%c9g_p";
      boolean boolean0 = StringUtils.contains(string0, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("RK5xNM_m1fmeh;", "RK5xNM_m1fmeh;");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("L~x--tV76zOz4Y(hw", 116);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("NFD", 64);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("zG<;jzRaZymkR:Y5D", ">(4q{");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("xw'/I", "", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("{", "{");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("7l", "7l", (-2935));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("xw'/I", (String) null, 388);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, "sT", 34);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("Wz^k&v", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", (String) null, (-2059));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("=yc|}YGIm", "=yc|}YGIm", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, (String) null, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("jy`fz>n8>87>", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("+8]xy3f]:", "+8]xy3f]:");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "Up\" =jv@rR\",SX-B:Rz");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", 0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("F\u0000", (-1), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", 32);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("2i#iGoXsY M^R5gJY`F", 22);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("search and replace array lengths don't match: ", "", (-2941));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", 1267);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("Search and Replace array lengths don't match: ", "/'1~n|7xftfnf", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("XyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXy", (String) null, 32);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((String) null, "", 13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("f8", "f8", 17);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("eY='I.F^", "eY='I.F^", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("D`4l`<H;Z)", "KX.", 1090);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("dsz d4", "dsz d4", (-12));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf(" ", (String) null, (-834));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf((String) null, (String) null, 63);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      int int0 = StringUtils.indexOf("dsz d4", "dsz d4", 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      int int0 = StringUtils.indexOf("7MSks[|c,T[O1", (String) null, 8172);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String[] stringArray0 = new String[3];
      int int0 = StringUtils.indexOf(stringArray0[2], stringArray0[2], 103);
      assertEquals((-1), int0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      int int0 = StringUtils.indexOf("XX|zYY*ZRL>", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      int int0 = StringUtils.indexOf("Q]%{0{L|q\be", "Q]%{0{L|q\be");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, 106, 6);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      int int0 = StringUtils.indexOf("nV`HIXk", 3995, 3995);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      int int0 = StringUtils.indexOf("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", (-1310));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String[] stringArray0 = new String[5];
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, stringArray0[0]);
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("Array element ", "Array element ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "U,Go+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "i?4LE", (CharSequence) "Minimum abbreviation width is 4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.stripAccents((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = StringUtils.stripAccents("+om RB~Va%v[");
      assertNotNull(string0);
      assertEquals("+om RB~Va%v[", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "Q");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", " ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Cannot get the toString of a null identity", "");
      assertNotNull(string0);
      assertEquals("Cannot get the toString of a null identity", string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = StringUtils.stripEnd("The Array must not be null", "XyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXyXy");
      assertNotNull(string0);
      assertEquals("The Array must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String string0 = StringUtils.stripStart(":#]%(f*Wn]KyTD7", ":#]%(f*Wn]KyTD7");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = StringUtils.stripStart(" ", "");
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = StringUtils.stripStart("nfd4maot+m'2", "gM");
      assertNotNull(string0);
      assertEquals("nfd4maot+m'2", string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("v/jg.`xg7");
      assertNotNull(string0);
      assertEquals("v/jg.`xg7", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("The character ");
      assertNotNull(string0);
      assertEquals("The character", string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = StringUtils.trimToNull("TimeToLive of ");
      assertNotNull(string0);
      assertEquals("TimeToLive of", string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.right(string0, 2877);
      assertNotNull(string1);
      assertEquals("\\u", string1);
      
      boolean boolean0 = StringUtils.isNotBlank(string1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "?$!b0F10l 5*h ", (CharSequence) "?$!b0F10l 5*h ");
      assertNotNull(charSequence0);
      assertEquals("?$!b0F10l 5*h ", charSequence0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) " ", (CharSequence) " ");
      assertNotNull(charSequence0);
      assertEquals(" ", charSequence0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("F\u0000");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = StringUtils.removeStart("k[0\"=vm %", (String) null);
      assertNotNull(string0);
      assertEquals("k[0\"=vm %", string0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Array an element cannot both be null", "o");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Minimum abbreviation width is 4", " ");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String string0 = StringUtils.replace("a", "a", "a");
      assertNotNull(string0);
      assertEquals("a", string0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 1566);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited(" ", 'L');
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, "+xNM3/:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("J]0KWrl}nx(7^g");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("jt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jqjt+jq", "java.text.Normalizer", 1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", ':');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.concat(objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8205);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      String string0 = StringUtils.rightPad("U4JR%p", 5);
      assertNotNull(string0);
      assertEquals("U4JR%p", string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Exeption cloning Cloneable fype ", "", "");
      assertEquals("Exeption cloning Cloneable fype ", string0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("dz d");
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("dz d", string0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("n+S/}@oHUdX\"_FFr");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Xy'V g4h^/", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: Xy'V g4h^/
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("?aSA", "', has a length less than 2");
      assertEquals("?aSA", string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("X>y", "X>y", 32);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      String string0 = StringUtils.join((Object[]) stringArray0, ',');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is 7", 10, 10);
      assertNotNull(string0);
      assertEquals("...brev...", string0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.replaceEach("+om RB~Va%v[", stringArray0, stringArray0);
      assertEquals("+om RB~Va%v[", string0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("<", "<");
      String string0 = StringUtils.concatWith("<", stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(", Length: ");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM", "The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM");
      assertEquals(0, int0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 04:42:41 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Callable;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.IdScriptableObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.InterpretedFunction;
import com.google.javascript.rhino.head.InterpreterData;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeGenerator;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.TopLevel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class IdScriptableObject_ESTest extends IdScriptableObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeNumber nativeNumber0 = new NativeNumber(100);
      ScriptableObject scriptableObject0 = nativeNumber0.getOwnPropertyDescriptor(context0, "error reporter");
      assertNull(scriptableObject0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Context context0 = new Context();
      NativeNumber nativeNumber0 = new NativeNumber(100);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeNumber0.exportAsJSClass(3, nativeIterator_StopIteration0, true);
      ScriptableObject scriptableObject0 = nativeNumber0.getOwnPropertyDescriptor(context0, "=I|H)(-cNqgu0Jc");
      assertNull(scriptableObject0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeNumber nativeNumber0 = new NativeNumber((-1));
      ScriptableObject scriptableObject0 = nativeNumber0.getOwnPropertyDescriptor(context0, importerTopLevel0);
      assertNull(scriptableObject0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Context context0 = new Context();
      NativeNumber nativeNumber0 = new NativeNumber(8);
      nativeNumber0.setAttributes("5x~q", 5);
      ScriptableObject scriptableObject0 = nativeNumber0.getOwnPropertyDescriptor(context0, "5x~q");
      assertEquals("Object", scriptableObject0.getClassName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Context context0 = new Context();
      NativeNumber nativeNumber0 = new NativeNumber(3);
      IdFunctionObject idFunctionObject0 = nativeNumber0.exportAsJSClass(7, nativeNumber0, false);
      nativeNumber0.defineOwnProperty(context0, "error reporter", idFunctionObject0);
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(1, idFunctionObject0.getArity());
      assertEquals(1, idFunctionObject0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeNumber nativeNumber0 = new NativeNumber(0.0);
      nativeNumber0.defineOwnProperty(context0, "error reporter", importerTopLevel0);
      assertFalse(context0.isGeneratingDebugChanged());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeNumber nativeNumber0 = new NativeNumber(1);
      IdFunctionObject idFunctionObject0 = nativeNumber0.exportAsJSClass(2, nativeError0, true);
      nativeNumber0.initPrototypeConstructor(idFunctionObject0);
      assertEquals(1, idFunctionObject0.getArity());
      assertEquals(1, idFunctionObject0.getLength());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Context context0 = Context.enter();
      NativeNumber nativeNumber0 = new NativeNumber(130);
      IdFunctionObject idFunctionObject0 = nativeNumber0.exportAsJSClass(7, nativeNumber0, false);
      IdFunctionObject idFunctionObject1 = new IdFunctionObject(idFunctionObject0, context0, 2, 3284);
      // Undeclared exception!
      try { 
        nativeNumber0.initPrototypeConstructor(idFunctionObject1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(3);
      IdFunctionObject idFunctionObject0 = nativeNumber0.exportAsJSClass(7, nativeNumber0, false);
      assertEquals(1, idFunctionObject0.methodId());
      
      nativeNumber0.initPrototypeConstructor(idFunctionObject0);
      assertEquals(1, idFunctionObject0.getLength());
      assertFalse(idFunctionObject0.isSealed());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      // Undeclared exception!
      try { 
        importerTopLevel0.initStandardObjects(context0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      boolean boolean0 = importerTopLevel0.hasPrototypeMap();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      boolean boolean0 = importerTopLevel0.hasPrototypeMap();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BaseFunction.init((Scriptable) null, false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(3);
      IdFunctionObject idFunctionObject0 = nativeNumber0.exportAsJSClass(7, nativeNumber0, false);
      Object[] objectArray0 = idFunctionObject0.getAllIds();
      assertEquals(1, idFunctionObject0.methodId());
      assertEquals(1, idFunctionObject0.getArity());
      assertEquals(10, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = new Context();
      NativeNumber nativeNumber0 = new NativeNumber(3);
      BoundFunction boundFunction0 = new BoundFunction(context0, nativeNumber0, (Callable) null, nativeNumber0, context0.emptyArgs);
      nativeNumber0.defineOwnProperties(context0, boundFunction0);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      Object[] objectArray0 = nativeArray0.getAllIds();
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test16()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(100);
      nativeNumber0.exportAsJSClass(7, nativeNumber0, false);
      // Undeclared exception!
      try { 
        nativeNumber0.getAttributes("language version", (Scriptable) nativeNumber0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property language version not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(100);
      IdFunctionObject idFunctionObject0 = nativeNumber0.exportAsJSClass(7, nativeNumber0, false);
      int int0 = nativeNumber0.getAttributes("constructor", (Scriptable) idFunctionObject0);
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(1, idFunctionObject0.methodId());
      assertEquals(2, int0);
      assertEquals(1, idFunctionObject0.getArity());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test18()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      importerTopLevel0.delete("error reporter");
      assertEquals("global", importerTopLevel0.getClassName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      nativeArray0.delete("language version");
      assertFalse(nativeArray0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeObject nativeObject0 = (NativeObject)context0.newObject((Scriptable) importerTopLevel0, "constructor");
      assertFalse(nativeObject0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeNumber nativeNumber0 = new NativeNumber(4);
      nativeNumber0.defineOwnProperty(context0, importerTopLevel0, importerTopLevel0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(100);
      NativeObject nativeObject0 = new NativeObject();
      nativeNumber0.exportAsJSClass(3, nativeObject0, true);
      nativeNumber0.getIds(true);
      assertTrue(nativeNumber0.isSealed());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test23()  throws Throwable  {
      Context context0 = new Context();
      NativeNumber nativeNumber0 = new NativeNumber(11);
      NativeObject nativeObject0 = new NativeObject();
      InterpreterData interpreterData0 = new InterpreterData(1, "error reporter", "error reporter", true);
      // Undeclared exception!
      try { 
        InterpretedFunction.createFunction(context0, nativeNumber0, interpreterData0, interpreterData0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.InterpretedFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(100);
      IdFunctionObject idFunctionObject0 = nativeNumber0.exportAsJSClass(7, nativeNumber0, false);
      NativeGenerator nativeGenerator0 = NativeGenerator.init(idFunctionObject0, false);
      // Undeclared exception!
      try { 
        nativeGenerator0.initPrototypeId(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject$PrototypeValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(3);
      nativeNumber0.exportAsJSClass(7, nativeNumber0, false);
      // Undeclared exception!
      try { 
        nativeNumber0.initPrototypeId(8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject$PrototypeValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(100);
      // Undeclared exception!
      try { 
        nativeNumber0.exportAsJSClass((-1), nativeNumber0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject$PrototypeValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      Object[] objectArray0 = importerTopLevel0.getIds(false);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Object object0 = nativeError0.defaultGet("Ty");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      // Undeclared exception!
      try { 
        importerTopLevel0.getInstanceIdValue(150);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 150
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Context context0 = new Context();
      NativeNumber nativeNumber0 = new NativeNumber(3);
      IdFunctionObject idFunctionObject0 = nativeNumber0.exportAsJSClass(7, nativeNumber0, false);
      NativeString nativeString0 = new NativeString("error reporter");
      // Undeclared exception!
      try { 
        nativeString0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=1 MASTER=3
         //
         verifyException("com.google.javascript.rhino.head.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(170);
      TopLevel topLevel0 = new TopLevel();
      // Undeclared exception!
      try { 
        topLevel0.exportAsJSClass(120, nativeNumber0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // constructor
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeArray nativeArray0 = new NativeArray(13);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeIterator_StopIteration0, nativeArray0, 4, 0);
      // Undeclared exception!
      try { 
        IdScriptableObject.incompatibleCallError(idFunctionObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      // Undeclared exception!
      try { 
        nativeError0.setInstanceIdAttributes(13, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 13
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Context context0 = new Context();
      NativeNumber nativeNumber0 = new NativeNumber(100);
      IdFunctionObject idFunctionObject0 = nativeNumber0.exportAsJSClass(7, nativeNumber0, false);
      nativeNumber0.defineOwnProperty(context0, "constructor", idFunctionObject0);
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(1, idFunctionObject0.methodId());
      assertEquals(1, idFunctionObject0.getArity());
  }
}

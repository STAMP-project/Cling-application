/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 15:57:20 GMT 2019
 */

package org.apache.commons.math.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Vector3D_ESTest extends Vector3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = Vector3D.minusJ;
      double double0 = Vector3D.angle(vector3D1, vector3D0);
      assertEquals(1.5707963267948966, double0, 0.01);
      assertEquals(1.0, vector3D0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      Vector3D vector3D1 = new Vector3D(1.0, (-3224.07), 3.141592653589793);
      double double0 = Vector3D.angle(vector3D0, vector3D1);
      assertEquals(3.1405700619090013, double0, 0.01);
      assertEquals((-1.5704861598419668), vector3D1.getAlpha(), 0.01);
      assertEquals(3224.071685695652, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusJ;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        Vector3D.angle(vector3D0, vector3D1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // null norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.9999, 1.0, 0.0);
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertEquals(1.0, vector3D1.getNorm(), 0.01);
      assertEquals(0.7071421374094461, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.4141428534628318, vector3D0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = Vector3D.minusJ;
      Vector3D vector3D2 = vector3D0.subtract(0.0, vector3D1);
      Vector3D vector3D3 = vector3D1.add(0.9999, vector3D2);
      Vector3D vector3D4 = vector3D3.orthogonal();
      assertEquals(1.4141428534628318, vector3D3.getNorm(), 0.01);
      assertEquals(0.0, vector3D2.getY(), 0.01);
      assertEquals(0.0, vector3D2.getDelta(), 0.01);
      assertEquals((-2.3562444926924284), vector3D4.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.zero;
      // Undeclared exception!
      try { 
        vector3D0.normalize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = vector3D0.normalize();
      assertEquals(0.0, vector3D1.getAlpha(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1.0, vector3D1.getNorm(), 0.01);
      assertEquals(0.0, vector3D0.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusK;
      Vector3D vector3D1 = new Vector3D((-1207.6157425722758), vector3D0, 0.9999, vector3D0, 1.0, vector3D0, 1.0, vector3D0);
      assertEquals(1204.6158425722758, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      double double0 = vector3D0.getY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusJ;
      double double0 = vector3D0.getX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      // Undeclared exception!
      try { 
        vector3D0.orthogonal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // null norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusJ;
      double double0 = vector3D0.getDelta();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = vector3D0.zero.add(vector3D0);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01);
      assertEquals(1.0, vector3D1.getNorm(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      double double0 = vector3D0.getZ();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = new Vector3D(441.42447026, vector3D0, 1.0, vector3D0);
      assertEquals(442.42447026, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      double double0 = vector3D0.getAlpha();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = vector3D0.plusI.negate();
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = vector3D0.subtract(vector3D0);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01);
      assertEquals(0.0, vector3D1.getNorm(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 0.0, vector3D0, 3200.93993130327, vector3D0);
      assertEquals(3200.93993130327, vector3D1.getX(), 0.01);
      assertEquals(3200.93993130327, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(65.569, 65.569);
      assertEquals((-0.40444572538565543), vector3D0.getAlpha(), 0.01);
      assertEquals(0.39350926474484416, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(0.0, vector3D0.getDelta(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = new Vector3D((-678578.0734489461), vector3D0);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01);
      assertEquals(678578.0734489461, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = vector3D0.minusK.orthogonal();
      assertEquals(1.0, vector3D0.getNorm(), 0.01);
      assertEquals((-1.0), vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01);
  }
}

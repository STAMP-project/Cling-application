/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 13:46:29 GMT 2019
 */

package org.mockito.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.Attribute;
import org.mockito.asm.ClassReader;
import org.mockito.asm.ClassVisitor;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.FieldVisitor;
import org.mockito.asm.Item;
import org.mockito.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      String string0 = classWriter0.getCommonSuperClass("org.mockito.asm.Item", "java/lang/Object");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.mockito.asm.Attribute");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 26);
      String string0 = classWriter0.getCommonSuperClass("org.mockito.asm.Frame", "org.mockito.asm.Frame");
      assertEquals("org.mockito.asm.Frame", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      String string0 = classWriter0.getCommonSuperClass("org.mockito.asm.ClassWriter", "org.mockito.asm.Item");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4790));
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(22, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4796));
      classWriter0.addType("!@PnIjBg3Q{H=Z1;[x");
      Item[] itemArray0 = new Item[2];
      classWriter0.typeTable = itemArray0;
      int int0 = classWriter0.addType("h2i8KNRIMa#");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(33);
      int int0 = classWriter0.addUninitializedType("{W2NQ<p{vOj", 1);
      assertEquals(1, int0);
      
      int int1 = classWriter0.addUninitializedType("{W2NQ<p{vOj", 1);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(6);
      int int0 = classWriter0.addType("M-bod");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("M-bod");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4749));
      Item item0 = classWriter0.newMethodItem("N`PjYUy}'%W&eKMpE", "N`PjYUy}'%W&eKMpE", "N`PjYUy}'%W&eKMpE", false);
      Item item1 = classWriter0.newMethodItem("N`PjYUy}'%W&eKMpE", "N`PjYUy}'%W&eKMpE", "N`PjYUy}'%W&eKMpE", true);
      assertNotSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777220);
      Item item0 = classWriter0.newConstItem("Lorg/mockito/asm/Type;");
      Item item1 = classWriter0.newConstItem("Lorg/mockito/asm/Type;");
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(21);
      Item item0 = classWriter0.newLong(16777220);
      Item item1 = classWriter0.newLong(16777220);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.mockito.asm.Attribute");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 26);
      Item item0 = classWriter0.newInteger(12);
      Item item1 = classWriter0.newInteger(12);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4749));
      Item item0 = classWriter0.newMethodItem("N`PjYUy}'%W&eKMpE", "N`PjYUy}'%W&eKMpE", "N`PjYUy}'%W&eKMpE", false);
      Item item1 = classWriter0.newMethodItem("N`PjYUy}'%W&eKMpE", "N`PjYUy}'%W&eKMpE", "N`PjYUy}'%W&eKMpE", false);
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4796));
      classWriter0.newFieldItem("", "", "");
      int int0 = classWriter0.newField("", "", "");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Type type0 = Type.LONG_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4749));
      Item item0 = classWriter0.newInteger(1);
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.Item@6
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Class<InputStream> class0 = InputStream.class;
      Type type0 = Type.getType(class0);
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4755));
      FieldVisitor fieldVisitor0 = classWriter0.visitField(976, "", "", "", "");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4796));
      Long long0 = new Long((-4796));
      Item item0 = classWriter0.newConstItem(long0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3433));
      Float float0 = new Float((float) (-3433));
      classWriter0.newConstItem(float0);
      int int0 = classWriter0.newConst(float0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4796));
      Boolean boolean0 = new Boolean("?\"SHLs]");
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4796));
      Double double0 = new Double(2);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(1, "!@PnIjBg3Q{H=Z1;[x", "!@PnIjBg3Q{H=Z1;[x", "!@PnIjBg3Q{H=Z1;[x", double0);
      FieldVisitor fieldVisitor1 = classWriter0.visitField((-4796), "h2i8KNRIMa#", "org.mockito.asm.Frame", "!@PnIjBg3Q{H=Z1;[x", double0);
      assertFalse(fieldVisitor1.equals((Object)fieldVisitor0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4985);
      Short short0 = new Short((short)23);
      Item item0 = classWriter0.newConstItem(short0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4796));
      Character character0 = Character.valueOf('c');
      Item item0 = classWriter0.newConstItem(character0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1638);
      Byte byte0 = new Byte((byte)31);
      Item item0 = classWriter0.newConstItem(byte0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(406);
      int int0 = classWriter0.newConst(classWriter0.COMPUTE_MAXS);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4790));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "`r.JJ{~$n*P#[9(9i?";
      stringArray0[1] = "do.|E~P:";
      stringArray0[2] = "do.|E~P:";
      stringArray0[3] = "";
      stringArray0[4] = "k67VNSJ5Ky";
      stringArray0[5] = "do.|E~P:";
      classWriter0.visit(1, (-314), "do.|E~P:", "`r.JJ{~$n*P#[9(9i?", "do.|E~P:", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(153, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      classWriter0.visitInnerClass("java/lang/Object", "java/lang/Object", (String) null, 3);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-271));
      classWriter0.visitInnerClass((String) null, (String) null, "org.mockito.asm.Item", 20);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(78, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-15));
      classWriter0.visitInnerClass("Jv{.,f^ZL", "Jv{.,f^ZL", "Jv{.,f^ZL", (-15));
      classWriter0.visitInnerClass("", "q1}^", "[ih|T.f` tSW B%-@I", 220);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(6);
      classWriter0.visitAnnotation("", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(67, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4755));
      classWriter0.visitAnnotation("value ", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(75, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4796));
      classWriter0.visitOuterClass("", "", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777220);
      classWriter0.visitOuterClass("}'FL4-YCm.", (String) null, "XlB");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5231));
      classWriter0.visitSource("", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(77, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(375);
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.mockito.asm.Item";
      classWriter0.visit((-284), (-1), "org.mockito.asm.Item", "org.mockito.asm.ClassWriter", "D}q$d", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(132, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(31);
      classWriter0.visit(131072, 131072, "char", "ConstantValue", "", (String[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2876));
      String[] stringArray0 = new String[0];
      classWriter0.visit(1, 19, "-:]0", (String) null, (String) null, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(760);
      Boolean boolean0 = new Boolean(true);
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1506));
      int int0 = classWriter0.newMethod("", "", "", false);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5231));
      Attribute attribute0 = new Attribute("<.W7_-");
      classWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(760);
      classWriter0.visitOuterClass("org.mockito.asm.FieldWriter", "org.mockito.asm.FieldWriter", "org.mockito.asm.FieldWriter");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(90, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.mockito.asm.Attribute");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 26);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2576, byteArray0.length);
  }
}

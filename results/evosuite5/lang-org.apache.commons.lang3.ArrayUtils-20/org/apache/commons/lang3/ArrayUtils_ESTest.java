/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 16:42:15 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-8);
      shortArray0[1] = (short)0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-8);
      floatArray0[1] = (float) (short) (-8);
      floatArray0[2] = (float) (short) (-8);
      floatArray0[3] = (float) (short) (-8);
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-8.0F), (-8.0F), (-8.0F), (-8.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (-8.0F);
      doubleArray0[2] = (double) (-8.0F);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-8.0), (-8.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, (-8.0F), 0);
      assertEquals(0, int0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-8.0F), (-8.0F), (-8.0F), (-8.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertTrue(boolean1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '\\');
      assertNull(charArray0);
      
      float[] floatArray2 = ArrayUtils.toPrimitive((Float[]) null, (float) 0);
      assertNull(floatArray2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, object0);
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray2 = new boolean[9];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = false;
      booleanArray2[4] = true;
      booleanArray2[5] = true;
      booleanArray2[6] = true;
      booleanArray2[7] = true;
      booleanArray2[8] = true;
      boolean boolean2 = ArrayUtils.contains(booleanArray2, true);
      assertTrue(boolean2);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(9, booleanArray2.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true, true, true}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)510;
      shortArray0[1] = (short)9;
      shortArray0[2] = (short)1105;
      shortArray0[3] = (short)7;
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)510, (short)9, (short)1105, (short)7}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 271.00235F;
      Float[] floatArray1 = new Float[1];
      floatArray1[0] = (Float) 271.00235F;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      double[] doubleArray0 = new double[1];
      floatArray1[0] = (Float) 441.1F;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(46);
      assertEquals(46, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Short[] shortArray0 = new Short[5];
      Double double0 = new Double((-521.1103070696277));
      assertEquals((-521.1103070696277), (double)double0, 0.01);
      assertNotNull(double0);
      
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = ArrayUtils.addAll((Object[]) shortArray0, objectArray0);
      assertNotNull(objectArray1);
      assertNotSame(shortArray0, objectArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(2, objectArray0.length);
      assertEquals(7, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      boolean boolean0 = ArrayUtils.isEquals(double0, double0);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Character character0 = Character.valueOf('}');
      assertEquals('}', (char)character0);
      assertNotNull(character0);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertTrue(boolean2);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = '4';
      charArray0[2] = 'E';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-39);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-1), (byte) (-39), (byte) (-39), (byte) (-1), (byte) (-39), (byte) (-39)}, byteArray0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {',', '4', 'E', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {',', '4', 'E', '\u0000', '\u0000'}, charArray1);
      
      char[] charArray2 = ArrayUtils.addAll(charArray0, charArray1);
      assertNotNull(charArray2);
      assertSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertEquals(10, charArray2.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {',', '4', 'E', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {',', '4', 'E', '\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {',', '4', 'E', '\u0000', '\u0000', ',', '4', 'E', '\u0000', '\u0000'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Character character0 = new Character('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isSurrogate('^');
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 6, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short)19);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)19}, shortArray2);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (-1308);
      longArray0[5] = (long) (short)19;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1, (int) (short)0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1308L), 19L}, longArray0);
      
      Integer integer0 = new Integer((short)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = ArrayUtils.isEmpty(longArray1);
      assertTrue(boolean1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1308L), 19L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = Character.isSurrogate('N');
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = '`';
      charArray0[2] = 'P';
      charArray0[3] = 'O';
      charArray0[4] = '9';
      charArray0[5] = '.';
      charArray0[6] = 'C';
      charArray0[7] = '.';
      charArray0[8] = 'v';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, characterArray0.length);
      assertArrayEquals(new char[] {'O', '`', 'P', 'O', '9', '.', 'C', '.', 'v'}, charArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)4080;
      shortArray0[1] = (short)100;
      shortArray0[2] = (short)10;
      shortArray0[3] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertEquals(3, int0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)4080, (short)100, (short)10, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      double[] doubleArray1 = ArrayUtils.add((double[]) null, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 983, (-2289));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1158);
      intArray0[1] = (-1158);
      intArray0[2] = 983;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1158), (-1158), 983}, intArray0);
      assertArrayEquals(new int[] {(-1158), (-1158), 983}, intArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = Character.isSurrogate('^');
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean1);
      assertEquals(1, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeElement((long[]) null, (long) '^');
      assertNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(8, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'java.lang.Object@1d30de35', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (byte) (-7);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) (byte) (-7);
      doubleArray1[2] = 0.0;
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, (double) (byte) (-7));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-7.0), 0.0, 0.0, (-7.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-7.0), 0.0, 0.0, (-7.0), 0.0, (-7.0)}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-72);
      byteArray0[8] = (byte) (-72);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-72));
      assertTrue(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-72), (byte)57, (byte)125, (byte)64, (byte)125, (byte) (-72), (byte)0, (byte)0, (byte) (-72)}, byteArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-72), (int) (byte)125);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-72), (byte)57, (byte)125, (byte)64, (byte)125, (byte) (-72), (byte)0, (byte)0, (byte) (-72)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-72), (byte)57, (byte)125, (byte)64, (byte)125, (byte) (-72), (byte)0, (byte)0, (byte) (-72)}, byteArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Integer integer0 = new Integer((byte)125);
      assertEquals(125, (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray2, byteArray0);
      assertFalse(boolean2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-72), (byte)57, (byte)125, (byte)64, (byte)125, (byte) (-72), (byte)0, (byte)0, (byte) (-72)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (byte)2;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) (byte)2;
      doubleArray1[4] = 0.0;
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, (double) (byte)2);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 2.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 2.0, 0.0, 2.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = ArrayUtils.subarray(doubleArray2, (-1158), 0);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(5, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 2.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 2.0, 0.0, 2.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-15);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-15)}, byteArray0);
      
      Integer integer0 = new Integer((byte) (-20));
      assertEquals((-20), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((AbstractMap.SimpleEntry<Object, String>[]) null, 3880, (AbstractMap.SimpleEntry<Object, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 632;
      intArray0[1] = 2426;
      intArray0[2] = 1458;
      intArray0[3] = 0;
      intArray0[4] = 298;
      intArray0[5] = (-3302);
      intArray0[6] = (-622);
      intArray0[7] = (-3492);
      ArrayUtils.reverse(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-3492), (-622), (-3302), 298, 0, 1458, 2426, 632}, intArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Character character0 = Character.valueOf('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      char char0 = Character.lowSurrogate(48);
      assertEquals('\uDC30', char0);
      
      String string0 = Character.getName(0);
      assertEquals("NULL", string0);
      assertNotNull(string0);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(101);
      assertEquals(101L, (long)long0);
      assertNotNull(long0);
      
      long long1 = Long.divideUnsigned(48, (-677L));
      assertEquals(0L, long1);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {101L}, longArray1);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 333.0F;
      floatArray0[1] = 333.0F;
      floatArray0[2] = 333.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {333.0F, 333.0F, 333.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {333.0F, 333.0F, 333.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {333.0F, 333.0F, 333.0F, 333.0F, 333.0F, 333.0F}, floatArray1, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) stringArray0);
      assertTrue(boolean1);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Byte byte0 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte) (-1);
      Byte[] byteArray0 = new Byte[3];
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[0] = byte2;
      byteArray0[2] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)35}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = '4';
      charArray0[2] = 'E';
      ArrayUtils.reverse((char[]) null);
      Integer integer0 = new Integer(21);
      assertEquals(21, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "");
      assertEquals("21", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '\\';
      doubleArray0[1] = (double) ',';
      doubleArray0[2] = (double) '1';
      doubleArray0[3] = (double) '3';
      doubleArray0[4] = (double) 'f';
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 51.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {92.0, 44.0, 49.0, 51.0, 102.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {92.0, 44.0, 49.0, 102.0}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 21;
      doubleArray2[1] = (double) 21;
      double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray2);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {21.0, 21.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {21.0, 21.0}, doubleArray3, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertTrue(boolean0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)57;
      shortArray0[1] = (short)48;
      shortArray0[2] = (short)4630;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)35, (-1989));
      assertEquals((-1), int0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)57, (short)48, (short)4630}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-300);
      intArray0[1] = (-757);
      intArray0[2] = 46;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1673), 46);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-300), (-757), 46}, intArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Character character0 = Character.valueOf('N');
      assertEquals('N', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)5;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)5}, shortArray0);
      assertArrayEquals(new short[] {(short)5}, shortArray1);
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray1, shortArray1);
      assertTrue(boolean2);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)5}, shortArray0);
      assertArrayEquals(new short[] {(short)5}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 953L;
      longArray0[1] = 1L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {953L, 1L}, longArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)57);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57}, byteArray1);
      
      Character character0 = new Character('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('l');
      assertEquals('l', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = new Character('d');
      assertEquals('d', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Integer integer0 = new Integer(1814);
      assertEquals(1814, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 953L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {953L, 1L}, longArray0);
      assertArrayEquals(new long[] {1L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Integer[] integerArray0 = new Integer[6];
      char char0 = Character.lowSurrogate((byte)0);
      assertEquals('\uDC00', char0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\uDC00';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      charArray0[3] = '\uDC00';
      charArray0[4] = ')';
      charArray0[5] = 'i';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean1);
      assertEquals(6, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\uDC00', 'i', 'i', '\uDC00', ')', 'i'}, charArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) integerArray0);
      assertFalse(boolean2);
      assertEquals(6, integerArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      ArrayUtils.reverse((boolean[]) null);
      short[] shortArray0 = new short[0];
      boolean boolean3 = ArrayUtils.isNotEmpty(shortArray0);
      assertFalse(boolean3);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-75.0F));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short)512);
      assertEquals((short)512, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-2804));
      assertEquals((short) (-2804), (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[1]);
      assertEquals((short) (-2804), (short)short2);
      assertNotNull(short2);
      assertEquals(7, shortArray0.length);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-2804));
      assertEquals((short) (-2804), (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)1850);
      assertEquals((short)1850, (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      
      shortArray0[4] = short4;
      Short short5 = new Short((short)11494);
      assertEquals((short)11494, (short)short5);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)1185);
      assertEquals((short)1185, (short)short6);
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short3));
      
      long long0 = Short.toUnsignedLong((short) (-554));
      assertEquals(64982L, long0);
      
      long long1 = Short.toUnsignedLong((short)512);
      assertEquals(512L, long1);
      assertFalse(long1 == long0);
      
      shortArray0[6] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[3]);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)512, (short) (-2804), (short) (-2804), (short) (-2804), (short)1850, (short)11494, (short)1185}, shortArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-73);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte) (-73)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-73), (byte)1, (byte) (-73)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L, (-2145919781));
      assertEquals(0, int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2145919781);
      intArray0[1] = (-2145919781);
      intArray0[2] = (-2145919781);
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'v'}, charArray0);
      assertArrayEquals(new char[] {'v', 'v'}, charArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 'v';
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertSame(charArray2, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'v'}, charArray0);
      assertArrayEquals(new char[] {'v'}, charArray2);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 3, 1);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray2);
      assertFalse(boolean0);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertSame(charArray2, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'v'}, charArray0);
      assertArrayEquals(new char[] {'v'}, charArray2);
      
      Integer integer0 = new Integer((-2145919781));
      assertEquals((-2145919781), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      
      Boolean boolean1 = new Boolean("/mQ8_Jglio] -n RW");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean[] booleanArray1 = new Boolean[1];
      boolean boolean2 = Boolean.logicalOr(true, true);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      
      booleanArray1[0] = boolean1;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      boolean boolean3 = Boolean.logicalOr((boolean) boolean1, (boolean) boolean1);
      assertFalse(boolean3);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) null, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertEquals(1, booleanArray1.length);
      
      Boolean[] booleanArray3 = ArrayUtils.toObject(booleanArray2);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray3.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      
      Boolean[] booleanArray4 = ArrayUtils.nullToEmpty(booleanArray3);
      assertNotNull(booleanArray4);
      assertSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray4);
      assertNotSame(booleanArray2, booleanArray0);
      assertSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray3, booleanArray1);
      assertEquals(1, booleanArray4.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray3.length);
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 6;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(boolean0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {6}, intArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1818.853897820745), (-664));
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-664);
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-664.0), 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0}, byteArray0);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray2);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-88);
      longArray0[1] = (long) (byte) (-88);
      longArray0[2] = (long) (byte) (-15);
      longArray0[3] = (long) (byte) (-88);
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (-291L);
      longArray0[6] = (long) (byte) (-88);
      longArray0[7] = (-291L);
      longArray0[8] = (long) (byte) (-88);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-88L), (-88L), (-15L), (-88L), 0L, (-291L), (-88L), (-291L), (-88L)}, longArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) longArray1);
      assertNotNull(objectArray0);
      assertSame(longArray1, objectArray0);
      assertEquals(9, longArray1.length);
      assertEquals(9, objectArray0.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-88L), (-88L), (-15L), (-88L), 0L, (-291L), (-88L), (-291L), (-88L)}, longArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, objectArray0);
      assertEquals(9, longArray2.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)objectArray0));
      assertArrayEquals(new long[] {(-88L), (-88L), (-15L), (-88L), 0L, (-291L), (-88L), (-291L), (-88L)}, longArray0);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean2);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte) (-88), 1);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-88);
      intArray0[1] = (int) (byte) (-88);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 2138;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(14, intArray1.length);
      assertEquals(7, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-88), (-88), 0, 2138, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[5] = object0;
      objectArray0[6] = object1;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(7, objectArray0.length);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = Character.isSurrogate('^');
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[1];
      boolean boolean1 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object3));
      
      Object object7 = new Object();
      assertNotNull(object7);
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object1));
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object4);
      assertEquals((-1), int0);
      assertNotSame(object4, object2);
      assertNotSame(object4, object3);
      assertNotSame(object4, object5);
      assertNotSame(object4, object0);
      assertNotSame(object4, object1);
      assertNotSame(object4, object6);
      assertNotSame(object4, object7);
      assertEquals(8, objectArray0.length);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object5));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object6));
      assertFalse(object4.equals((Object)object7));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Short short0 = new Short((short)496);
      assertEquals((short)496, (short)short0);
      assertNotNull(short0);
      
      Integer integer0 = new Integer((short)496);
      assertEquals(496, (int)integer0);
      assertNotNull(integer0);
      
      Character character0 = Character.valueOf('8');
      assertEquals('8', (char)character0);
      assertNotNull(character0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2143175757;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2, (int) (short)496);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2143175757}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, (-1), 2142252262);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(7, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {2143175757}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object0;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[3] = object2;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      
      objectArray0[3] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object0));
      
      objectArray0[6] = object6;
      objectArray0[7] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object4);
      assertEquals(3, int0);
      assertNotSame(object4, object5);
      assertNotSame(object4, object2);
      assertNotSame(object4, object0);
      assertNotSame(object4, object6);
      assertNotSame(object4, object1);
      assertNotSame(object4, object3);
      assertEquals(8, objectArray0.length);
      assertFalse(object4.equals((Object)object5));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object6));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, 3, 3);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(8, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 0L;
      Character character0 = Character.valueOf('I');
      assertEquals('I', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('I');
      assertEquals('I', (char)character1);
      assertNotNull(character1);
      
      Character character2 = new Character('I');
      assertEquals('I', (char)character2);
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      
      Character character3 = Character.valueOf('C');
      assertEquals('C', (char)character3);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      
      Character character4 = new Character('~');
      assertEquals('~', (char)character4);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      
      Character character5 = new Character('I');
      assertEquals('I', (char)character5);
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character0));
      assertTrue(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'I'}, charArray0);
      
      byte[] byteArray0 = new byte[5];
      longArray0[0] = (long) (byte) (-98);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)100);
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)57, (byte)57, (byte)0}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-98));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)57, (byte)57, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)57, (byte)57, (byte)0}, byteArray0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      booleanArray0[1] = boolean2;
      booleanArray0[2] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      
      Integer integer0 = new Integer((-1658));
      assertEquals((-1658), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.indexOf((Object[]) booleanArray0, (Object) integer0, (-1185));
      assertEquals((-1), int0);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertArrayEquals(new char[] {'y', 'y'}, charArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'y';
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) 'y';
      intArray0[4] = (int) 'y';
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) 'y';
      intArray0[7] = (int) 'y';
      intArray0[8] = (int) 'y';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertEquals(5, int0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {121, 0, 0, 121, 121, 0, 121, 121, 121}, intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)0, 2124701120);
      assertEquals((-1), int1);
      assertEquals(3, shortArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = new float[4];
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) shortArray1, (Object[]) shortArray1);
      assertNotNull(objectArray0);
      assertNotSame(shortArray1, objectArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, objectArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Character character0 = Character.valueOf('N');
      assertEquals('N', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray1, byteArray0);
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      Character character0 = Character.valueOf('N');
      assertEquals('N', (char)character0);
      assertNotNull(character0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object1));
      
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, (Object) "=+)BcxG{VWL{//-df");
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(7, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertEquals(0, int0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\\');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      
      char[] charArray2 = ArrayUtils.add(charArray0, 'C');
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'C'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object[] objectArray1 = ArrayUtils.toArray(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-0.29829717F);
      floatArray0[1] = (-253.6257F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1130.2538F);
      floatArray0[4] = 448.92117F;
      floatArray0[5] = 743.2237F;
      floatArray0[6] = 2061.0F;
      floatArray0[7] = 2727.2F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-581.1818F), 815);
      assertEquals((-1), int0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-0.29829717F), (-253.6257F), 1.0F, (-1130.2538F), 448.92117F, 743.2237F, 2061.0F, 2727.2F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-0.29829717F), (-253.6257F), 1.0F, (-1130.2538F), 448.92117F, 743.2237F, 2061.0F, 2727.2F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-0.29829717F), (-253.6257F), 1.0F, (-1130.2538F), 448.92117F, 743.2237F, 2061.0F, 2727.2F}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = 'o';
      charArray0[2] = 'N';
      charArray0[3] = ',';
      charArray0[4] = 'R';
      ArrayUtils.reverse(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'R', ',', 'N', 'o', 'h'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-1447);
      shortArray0[3] = (short)2;
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      ArrayUtils.reverse(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'%'}, charArray0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short) (-1447);
      intArray0[2] = (int) '%';
      intArray0[3] = (int) (short) (-1);
      intArray0[4] = (int) (short) (-1);
      intArray0[5] = 0;
      intArray0[6] = (-1);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(14, intArray1.length);
      assertEquals(7, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, (-1447), 37, (-1), (-1), 0, (-1)}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) stringArray1, (Object[]) stringArray1);
      assertTrue(boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray1, intArray1);
      assertTrue(boolean1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(14, intArray1.length);
      assertEquals(7, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {1, (-1447), 37, (-1), (-1), 0, (-1)}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null, (-436));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-586.4096181);
      doubleArray0[1] = (-586.4096181);
      doubleArray0[2] = 771.4201704394524;
      doubleArray0[3] = (-586.4096181);
      Integer integer0 = new Integer(10);
      assertEquals(10, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1834);
      assertEquals(1834, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-609));
      assertEquals((-609), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertTrue(boolean1);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 46;
      doubleArray0[2] = (double) 564;
      doubleArray0[3] = (double) (short)496;
      doubleArray0[4] = (double) 564;
      doubleArray0[5] = (double) (short)496;
      doubleArray0[6] = (double) 46;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 564, 564);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 46.0, 564.0, 496.0, 564.0, 496.0, 46.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 0, 46);
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addAll((long[]) null, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray2, longArray0);
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray2);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 520.269919;
      long[] longArray0 = new long[6];
      longArray0[0] = 2224L;
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = 'K';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'I');
      assertFalse(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'d', 'K'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[5];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) shortArray1, (Object[]) shortArray1);
      assertNotNull(objectArray0);
      assertNotSame(shortArray1, objectArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertEquals(10, objectArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1527.4722F);
      floatArray0[1] = 343.4F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1527.4722F), 343.4F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1527.4722F), 343.4F}, floatArray1, 0.01F);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "yc]kC*i^Qj";
      stringArray0[1] = "{}";
      stringArray0[2] = "org.apache.commons.lang3.builder.ToStringStyle";
      stringArray0[3] = "java.lang.String";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = Character.isSurrogate('^');
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-2929);
      longArray0[1] = (long) (-2929);
      longArray0[2] = 0L;
      longArray0[3] = (long) '^';
      longArray0[4] = (long) (-328);
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean2);
      assertEquals(6, longArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new long[] {(-2929L), (-2929L), 0L, 94L, (-328L), 0L}, longArray0);
      
      boolean boolean3 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean3);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Double double0 = new Double((-92.26011629));
      assertEquals((-92.26011629), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-71.229));
      assertEquals((-71.229), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '@', (-1380));
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '@';
      floatArray0[1] = (float) '@';
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1380);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1380);
      floatArray0[6] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {64.0F, 64.0F, (-1.0F), (-1380.0F), (-1.0F), (-1380.0F), (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long[] longArray0 = new long[1];
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.add((short[]) null, (short) (-1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(1, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1)}, shortArray2);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 48, (int) (short) (-1));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) 48;
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) Integer.MAX_VALUE;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 48.0F, (-1.0F), 2.14748365E9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {48.0F, (-1.0F), 2.14748365E9F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      AbstractMap.SimpleEntry<Integer, Object>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Integer, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 3);
      Integer integer0 = new Integer((-1665));
      assertEquals((-1665), (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      Integer integer1 = Integer.getInteger("1.3", integer0);
      assertEquals((-1665), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(14);
      assertEquals(14, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, integer2);
      assertNotNull(abstractMap_SimpleEntry1);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry2);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<Integer, Object>[] abstractMap_SimpleEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray0);
      assertNotNull(abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertEquals(3, abstractMap_SimpleEntryArray0.length);
      assertEquals(6, abstractMap_SimpleEntryArray1.length);
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      
      Integer integer3 = Integer.getInteger("', is neither of type Map.Entry nor an Array", integer0);
      assertEquals((-1665), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer2));
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(abstractMap_SimpleEntryArray1);
      assertNotNull(map0);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertEquals(3, abstractMap_SimpleEntryArray0.length);
      assertEquals(6, abstractMap_SimpleEntryArray1.length);
      assertFalse(abstractMap_SimpleEntryArray0.equals((Object)abstractMap_SimpleEntryArray1));
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      Map<Object, Object> map1 = ArrayUtils.toMap(abstractMap_SimpleEntryArray1);
      assertNotNull(map1);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertNotSame(map1, map0);
      assertEquals(3, abstractMap_SimpleEntryArray0.length);
      assertEquals(6, abstractMap_SimpleEntryArray1.length);
      assertFalse(abstractMap_SimpleEntryArray0.equals((Object)abstractMap_SimpleEntryArray1));
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertTrue(map1.equals((Object)map0));
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-15);
      Integer integer0 = new Integer((byte) (-20));
      assertEquals((-20), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) integerArray0, (Object) null);
      assertNotNull(objectArray0);
      assertNotSame(integerArray0, objectArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Short short0 = new Short((short)496);
      assertEquals((short)496, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)496);
      assertEquals((short)496, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      int int0 = Short.compare((short)496, (short)6);
      assertEquals(490, int0);
      
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short1;
      int int1 = Short.compare((short)1820, (short) shortArray0[0]);
      assertEquals(1324, int1);
      assertEquals(5, shortArray0.length);
      assertFalse(int1 == int0);
      
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      shortArray0[3] = short1;
      shortArray0[4] = short0;
      int int2 = Short.toUnsignedInt((short) shortArray0[2]);
      assertEquals(496, int2);
      assertEquals(5, shortArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      short[] shortArray2 = new short[0];
      boolean boolean0 = ArrayUtils.contains(shortArray2, (short) shortArray0[0]);
      assertFalse(boolean0);
      assertSame(shortArray0, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray2);
      
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) null, (int) shortArray0[2], 117);
      assertNull(objectArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(5, shortArray0.length);
      
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray1, (short)6);
      assertNotNull(shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(5, shortArray3.length);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)496, (short)496, (short)496, (short)496, (short)496}, shortArray3);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      char char0 = Character.lowSurrogate(48);
      assertEquals('\uDC30', char0);
      
      String string0 = Character.getName(0);
      assertEquals("NULL", string0);
      assertNotNull(string0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(101);
      assertEquals(101, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compareUnsigned(Integer.MAX_VALUE, 101);
      assertEquals(1, int0);
      
      int int1 = Integer.compareUnsigned(0, 0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {101}, intArray0);
      
      int int2 = ArrayUtils.lastIndexOf((int[]) null, Integer.MAX_VALUE);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(921);
      assertEquals(921, (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-15), (byte)0, (byte)0}, byteArray0);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = (Byte) (byte)0;
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Character character0 = new Character('{');
      assertEquals('{', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('%');
      assertEquals('%', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '0');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Float float0 = Float.valueOf(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Double double0 = new Double((-927.206187674));
      assertEquals((-927.206187674), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((byte)88);
      assertEquals(88.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = Double.valueOf((-520.0739));
      assertEquals((-520.0739), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = Character.isSurrogate('`');
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean boolean2 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-1);
      float float0 = Float.max((-4613.0F), (short)0);
      assertEquals(0.0F, float0, 0.01F);
      
      Float float1 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      doubleArray0[1] = (double) (float)float1;
      Float float2 = new Float((-3203.6502164217045));
      assertEquals((-3203.6501F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Integer integer0 = new Integer((short) (-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean1);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)124;
      ArrayUtils.reverse(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)124, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      Integer integer0 = Integer.valueOf((-98));
      assertEquals((-98), (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (byte)14;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) (byte)14;
      doubleArray1[4] = 0.0;
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, (-1978.758236949));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {14.0, 0.0, 0.0, 14.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {14.0, 0.0, 0.0, 14.0, 0.0, (-1978.758236949)}, doubleArray2, 0.01);
      
      short[] shortArray0 = new short[3];
      doubleArray1[4] = (double) (byte)14;
      shortArray0[2] = (short) (byte)14;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte)14, (-1378));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)14}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (byte)2;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) (byte)2;
      doubleArray1[4] = 0.0;
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, (-1978.758236949));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 2.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 2.0, 0.0, (-1978.758236949)}, doubleArray2, 0.01);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte)2, (-1378));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      float[] floatArray1 = ArrayUtils.subarray((float[]) null, (int) (short)2, (int) (short)2);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[5];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 0.0, 0.0);
      assertEquals(0, int1);
      assertEquals(1, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, (-3672));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 953L;
      longArray0[1] = 1L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {953L, 1L}, longArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)57);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57}, byteArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(569);
      assertEquals(569, (int)integer0);
      assertNotNull(integer0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Double double0 = new Double(3012.7734);
      assertEquals(3012.7734, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-92.26011629));
      assertEquals((-92.26011629), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-1084.0));
      assertEquals((-1084.0), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double((-4645.30890527876));
      assertEquals((-4645.30890527876), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double3;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      long[] longArray0 = new long[2];
      double double4 = Double.min(1.5, (-1084.0));
      assertEquals((-1084.0), double4, 0.01);
      
      longArray0[0] = (-15L);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {(-15L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-15L), 0L}, longArray1);
      
      ArrayUtils.reverse((Object[]) doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)4930;
      shortArray0[1] = (short) (-199);
      shortArray0[4] = (short) (-940);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)4930, (short) (-199), (short)0, (short)0, (short) (-940)}, shortArray0);
      assertArrayEquals(new short[] {(short)4930, (short) (-199), (short)0, (short)0, (short) (-940), (short)4930, (short) (-199), (short)0, (short)0, (short) (-940)}, shortArray1);
      
      Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '+');
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'y'}, charArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-199);
      doubleArray0[1] = (-3702.32876);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-1822), (-1), (-3702.32876));
      assertEquals((-1), int1);
      assertEquals(3, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-199.0), (-3702.32876), 0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)4930, (short) (-199), (short)0, (short)0, (short) (-940)}, shortArray0);
      assertArrayEquals(new short[] {(short)4930, (short) (-199), (short)0, (short)0, (short) (-940), (short)4930, (short) (-199), (short)0, (short)0, (short) (-940)}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      int[] intArray0 = new int[10];
      intArray0[7] = 1;
      charArray0[3] = '9';
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, 739);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(10, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-15), (byte)0, (byte)0}, byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      int int0 = 2801;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-611.06793F), 2801);
      assertEquals((-1), int1);
      assertEquals(3, floatArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-925);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (int) (byte) (-15));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -15, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-82), (byte)0}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((byte) (-82));
      assertEquals((-82), (int)integer0);
      assertNotNull(integer0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-82);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[4] = (float) '\\';
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) 0.0F;
      boolean boolean1 = ArrayUtils.contains(objectArray0, objectArray0[2]);
      assertTrue(boolean1);
      assertEquals(3, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(objectArray0, (int)  (-82));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -82, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.reverse(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[1];
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-97);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-97)}, byteArray0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[3] = (byte) (-97);
      byteArray1[4] = (byte) (-97);
      boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (int) (byte) (-97), 479);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-97), (byte) (-97)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-97), (byte) (-97)}, byteArray2);
      
      boolean boolean2 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean2);
      assertSame(charArray0, charArray1);
      assertEquals(1, charArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      Integer integer0 = new Integer((byte) (-64));
      assertEquals((-64), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean3 = ArrayUtils.isSameLength(byteArray1, byteArray1);
      assertTrue(boolean3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-97), (byte) (-97)}, byteArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-97);
      longArray0[1] = (long) (byte) (-97);
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte) (-97);
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (byte)0;
      longArray0[7] = (long) (byte)0;
      boolean boolean4 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean4);
      assertEquals(8, longArray0.length);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertArrayEquals(new long[] {(-97L), (-97L), 0L, (-97L), 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = new char[1];
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1866.1), 3054, (-4645.30890527876));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-3452);
      shortArray0[1] = (short)7;
      shortArray0[2] = (short) (-8);
      shortArray0[3] = (short)4947;
      shortArray0[4] = (short) (-1777);
      shortArray0[5] = (short)1550;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-3452), (short)7, (short) (-8), (short)4947, (short) (-1777), (short)1550}, shortArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-8);
      floatArray0[1] = (float) (short)4947;
      floatArray0[2] = (float) (short)7;
      floatArray0[3] = (float) (short)7;
      floatArray0[4] = (float) (short) (-8);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-219.36122F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-8.0F), 4947.0F, 7.0F, 7.0F, (-8.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-8.0F), 4947.0F, 7.0F, 7.0F, (-8.0F)}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertFalse(boolean0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3452), (short)7, (short) (-8), (short)4947, (short) (-1777), (short)1550}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 48;
      doubleArray1[1] = (double) 4947.0F;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {48.0, 4947.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double double0 = new Double(3012.7734);
      assertEquals(3012.7734, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-92.26011629));
      assertEquals((-92.26011629), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-92.26011629));
      assertEquals((-92.26011629), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) double2;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Character character0 = Character.valueOf('N');
      assertEquals('N', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-7);
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(978.6720554);
      assertEquals(978.6720554, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(978.6720554);
      assertEquals(978.6720554, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      double double3 = Double.min(760.6042, (double) doubleArray0[1]);
      assertEquals((-1.0), double3, 0.01);
      assertEquals(4, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double4 = new Double((-497.5));
      assertEquals((-497.5), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[3] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {978.6720554, (-1.0), 978.6720554, (-497.5)}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2812, 2812);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertNotSame(shortArray0, objectArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 4090;
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(1211.0);
      assertEquals(1211.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1.0);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      float float2 = Float.max(0.0F, (-2608.9F));
      assertEquals(0.0F, float2, 0.01F);
      
      float float3 = Float.max((float) floatArray0[1], (short) (-1));
      assertEquals(1.0F, float3, 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotEquals(float3, float2, 0.01F);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Integer integer0 = Integer.valueOf(4090);
      assertEquals(4090, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null, (int) (short) (-1));
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 520.269919;
      doubleArray0[3] = (-2083.5062);
      doubleArray0[4] = 625.682604813097;
      doubleArray0[5] = 1975.0;
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 2132944643, 'd');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2132944643, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-15);
      Integer integer0 = new Integer((byte) (-15));
      assertEquals((-15), (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("ec9_YSZ^l?*%cB", (String) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)49;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)49;
      intArray0[1] = (int) (short)49;
      intArray0[2] = (int) (short)49;
      intArray0[1] = (int) (short)49;
      intArray0[6] = 1625;
      intArray0[7] = (int) (short)49;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals((-1), int0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {49, 49, 49, 0, 0, 0, 1625, 49, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-1806), (-1806));
      assertNull(doubleArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Character character0 = Character.valueOf('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isSurrogate('^');
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(10);
      assertEquals(10, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(10);
      assertEquals(10, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (int) '^';
      intArray0[2] = (int) '^';
      intArray0[3] = (int) '<';
      intArray0[4] = 10;
      intArray0[5] = (-609);
      intArray0[6] = 10;
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean1);
      assertEquals(7, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 94, 94, 60, 10, (-609), 10}, intArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)0, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)0, (byte)2}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2038.6;
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      charArray0[4] = '%';
      charArray0[5] = '%';
      ArrayUtils.reverse(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'%', '%', '%', '%', '%', '%'}, charArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.lang.Object";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      
      String[] stringArray0 = new String[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(stringArray0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Float float0 = new Float((-927.206187674));
      assertEquals((-927.2062F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[2];
      float float1 = Float.max((-1.0F), 1.0F);
      assertEquals(1.0F, float1, 0.01F);
      
      float float2 = Float.min((byte) (-51), (byte) (-51));
      assertEquals((-51.0F), float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      floatArray0[0] = float0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-51);
      shortArray0[1] = (short) (byte) (-51);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-51), (short) (-51)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-51), (short) (-51)}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3292.0622027);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2902.400034);
      doubleArray0[3] = 1666.8047927805;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3292.0622027), 1.0, (-2902.400034), 1666.8047927805}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3292.0622027), 1.0, (-2902.400034), 1666.8047927805, (-3292.0622027), 1.0, (-2902.400034), 1666.8047927805}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, (-411.0), 1.5);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3292.0622027), 1.0, (-2902.400034), 1666.8047927805}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3292.0622027), 1.0, (-2902.400034), 1666.8047927805, (-3292.0622027), 1.0, (-2902.400034), 1666.8047927805}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 1455.78540752, (-2609));
      assertEquals((-1), int0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3292.0622027), 1.0, (-2902.400034), 1666.8047927805}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3292.0622027), 1.0, (-2902.400034), 1666.8047927805, (-3292.0622027), 1.0, (-2902.400034), 1666.8047927805}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1164;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)1164}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-15);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-15)}, byteArray0);
      
      Integer integer0 = new Integer((byte) (-20));
      assertEquals((-20), (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-15);
      longArray0[1] = (-677L);
      longArray0[2] = (-677L);
      longArray0[3] = (long) (byte) (-20);
      longArray0[4] = (long) (byte) (-20);
      longArray0[5] = (-677L);
      longArray0[6] = (long) (byte) (-15);
      longArray0[7] = (-677L);
      longArray0[8] = (long) (byte) (-15);
      long[] longArray1 = ArrayUtils.add(longArray0, (-15L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-15L), (-677L), (-677L), (-20L), (-20L), (-677L), (-15L), (-677L), (-15L)}, longArray0);
      assertArrayEquals(new long[] {(-15L), (-677L), (-677L), (-20L), (-20L), (-677L), (-15L), (-677L), (-15L), (-15L)}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-15), (int) (byte) (-51));
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-15)}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-15L);
      objectArray0[1] = (Object) (-677L);
      objectArray0[2] = (Object) (-677L);
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, (-372));
      assertEquals((-1), int1);
      assertEquals(3, objectArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[6] = (-4504L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertFalse(boolean0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, (-4504L)}, longArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1);
      assertEquals(7, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, (-4504L)}, longArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean2);
      assertEquals(7, longArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, (-4504L)}, longArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(doubleArray0);
      assertNotNull(map0);
      assertEquals(0, doubleArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertNotNull(objectArray0);
      assertNotSame(doubleArray0, objectArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-8);
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-8), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-8), (short)0}, shortArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-8);
      floatArray0[1] = (float) (short) (-8);
      floatArray0[2] = (float) (short) (-8);
      floatArray0[3] = (float) (short) (-8);
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-8.0F), (-8.0F), (-8.0F), (-8.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (-8.0F);
      doubleArray0[2] = (double) (-8.0F);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-8.0), (-8.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, (-8.0F), 0);
      assertEquals(0, int0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-8.0F), (-8.0F), (-8.0F), (-8.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertTrue(boolean1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '\\');
      assertNull(charArray0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, (Object) "dEN'|>zDT", 9);
      assertEquals((-1), int1);
      assertEquals(0, booleanArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean2 = ArrayUtils.isSameType("dEN'|>zDT", "3YZ");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1697L);
      longArray0[3] = (-677L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals(0, int0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L), (-1697L), (-677L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(2304.9435166996);
      assertEquals(2304.9435166996, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2304.9435166996);
      assertEquals(2304.9435166996, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {2304.9435166996, 2304.9435166996}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) doubleArray0[1];
      doubleArray2[2] = (double) (-404);
      doubleArray2[3] = (double) (-404);
      doubleArray2[4] = 2058.132;
      doubleArray2[5] = (double) doubleArray0[0];
      doubleArray2[6] = (double) doubleArray0[1];
      doubleArray2[7] = (double) doubleArray0[1];
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2502);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2502)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      
      String[] stringArray0 = new String[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(stringArray0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Boolean boolean2 = new Boolean("/mQ8_Jglio] -n RW");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      Boolean boolean3 = Boolean.valueOf(false);
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      
      Boolean[] booleanArray1 = new Boolean[1];
      booleanArray1[0] = boolean2;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)1);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '/';
      charArray0[2] = '~';
      charArray0[3] = '4';
      charArray0[4] = 'y';
      charArray0[5] = '$';
      charArray0[6] = 'T';
      charArray0[7] = '#';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '4');
      assertEquals(3, int1);
      assertEquals(8, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'<', '/', '~', '4', 'y', '$', 'T', '#'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 1L);
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null, 1L);
      assertNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 4090;
      intArray0[1] = 6;
      intArray0[2] = 16;
      intArray0[3] = 10;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 4090, (-2289));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {4090, 6, 16, 10}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-1626));
      assertEquals((short) (-1626), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1626)}, shortArray1);
      
      Double double0 = new Double(984.4);
      assertEquals(984.4, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-520.0739));
      assertEquals((-520.0739), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double double2 = Double.sum((-1.0), (-520.0739));
      assertEquals((-521.0739), double2, 0.01);
      
      double double3 = Double.max((-2208.1521506579097), 1.0);
      assertEquals(1.0, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      double double4 = Double.min((-520.0739), 1.0);
      assertEquals((-520.0739), double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) shortArray0, (Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertNotSame(shortArray0, objectArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-4628);
      shortArray0[1] = (short) (-4628);
      shortArray0[2] = (short) (-4628);
      shortArray0[3] = (short) (-4628);
      shortArray0[4] = (short) (-4628);
      shortArray0[5] = (short) (-4628);
      shortArray0[6] = (short) (-4628);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1), (-1529));
      assertEquals((-1), int0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4628), (short) (-4628), (short) (-4628), (short) (-4628), (short) (-4628), (short) (-4628), (short) (-4628)}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)322);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-4628), (short) (-4628), (short) (-4628), (short) (-4628), (short) (-4628), (short) (-4628), (short) (-4628)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4628), (short) (-4628), (short) (-4628), (short) (-4628), (short) (-4628), (short) (-4628), (short) (-4628), (short)322}, shortArray1);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (-321.5), 1.5);
      assertEquals((-1), int1);
      assertEquals(1, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-2313);
      intArray0[2] = (-3792);
      intArray0[3] = (-4319);
      intArray0[4] = 46;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, (-2313), (-3792), (-4319), 46}, intArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 953L;
      longArray0[1] = 1L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {953L, 1L}, longArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)57);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)57}, byteArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(569);
      assertEquals(569, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) doubleArray1, (Object) null);
      assertNotNull(objectArray0);
      assertNotSame(doubleArray1, objectArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, objectArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = (-384);
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, (-384), (-384));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -384, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object0;
      objectArray0[3] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      
      objectArray0[6] = object5;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object3);
      assertEquals(3, int0);
      assertNotSame(object3, object4);
      assertNotSame(object3, object0);
      assertNotSame(object3, object1);
      assertNotSame(object3, object2);
      assertNotSame(object3, object5);
      assertEquals(8, objectArray0.length);
      assertFalse(object3.equals((Object)object4));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object5));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      long[] longArray0 = new long[1];
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) '\\', (int) '\\');
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = byte0;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) (byte)125;
      longArray0[3] = (long) byte0;
      longArray0[5] = (long) (byte) (-39);
      long long0 = Byte.toUnsignedLong((byte)125);
      assertEquals(125L, long0);
      
      longArray0[6] = (long) byte0;
      longArray0[7] = (long) (byte)125;
      long[] longArray1 = ArrayUtils.subarray((long[]) null, (-848), (int) (byte)0);
      assertNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[5] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) byte0);
      assertEquals(0, int0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      
      int int1 = ArrayUtils.lastIndexOf((long[]) null, 512L, (-1062));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      boolean boolean0 = Character.isSurrogate(';');
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-23));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23)}, byteArray0);
      
      double[] doubleArray1 = ArrayUtils.removeElement((double[]) null, (double) (byte) (-23));
      assertNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-23);
      longArray0[1] = (long) ';';
      longArray0[2] = (long) (byte) (-23);
      longArray0[3] = (long) (byte) (-23);
      longArray0[4] = (long) ';';
      longArray0[5] = (long) '^';
      longArray0[6] = (long) (byte) (-23);
      longArray0[7] = (long) (byte) (-23);
      longArray0[8] = (long) '^';
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) '^';
      longArray1[1] = (long) ';';
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {94L, 59L}, longArray1);
      assertArrayEquals(new long[] {(-23L), 59L, (-23L), (-23L), 59L, 94L, (-23L), (-23L), 94L}, longArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1);
      
      Integer integer0 = new Integer((-209));
      assertEquals((-209), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean2);
      assertSame(booleanArray0, booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      
      Byte byte0 = new Byte((byte)107);
      assertEquals((byte)107, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = Byte.toUnsignedInt((byte)107);
      assertEquals(107, int0);
      
      Byte byte1 = new Byte((byte)111);
      assertEquals((byte)111, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)111);
      assertEquals((byte)111, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      int int1 = Byte.compare((byte) (-45), (byte)100);
      assertEquals((-145), int1);
      assertFalse(int1 == int0);
      
      Byte byte4 = new Byte((byte) (-43));
      assertEquals((byte) (-43), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      
      Byte byte5 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      
      boolean boolean0 = ArrayUtils.isEquals(object5, object2);
      assertFalse(boolean0);
      assertNotSame(object5, object4);
      assertNotSame(object5, object1);
      assertNotSame(object5, object0);
      assertNotSame(object5, object2);
      assertNotSame(object5, object3);
      assertNotSame(object2, object3);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertNotSame(object2, object5);
      assertNotSame(object2, object4);
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object2.equals((Object)object3));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object5));
      assertFalse(object2.equals((Object)object4));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0}, byteArray0);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray2);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.reverse((boolean[]) null);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-88);
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (short) (-88);
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (short) (-88);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-88), (int) (byte)0, 1.0);
      assertEquals(2, int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-88.0), 0.0, 0.0, (-88.0)}, doubleArray0, 0.01);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray2, byteArray2);
      assertTrue(boolean2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray2);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean3 = ArrayUtils.contains(doubleArray0, (double) (byte)0, (-88.0));
      assertFalse(boolean3);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, (-88.0), 0.0, 0.0, (-88.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-1798L));
      assertNull(longArray0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
      
      boolean boolean4 = ArrayUtils.isSameLength((Object[]) byteArray1, (Object[]) null);
      assertTrue(boolean4);
      assertEquals(0, byteArray1.length);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Float float0 = new Float(2274.1);
      assertEquals(2274.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min((-3198.0F), (-3198.0F));
      assertEquals((-3198.0F), float1, 0.01F);
      
      Short short0 = new Short((short)1050);
      assertEquals((short)1050, (short)short0);
      assertNotNull(short0);
      
      int int0 = Short.toUnsignedInt((short)1050);
      assertEquals(1050, int0);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray0, (short)1050);
      assertNotNull(shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray1, shortArray1);
      assertTrue(boolean0);
      assertSame(shortArray1, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-921L);
      ArrayUtils.reverse(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-921L)}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-921L)}, longArray0);
      
      Character[] characterArray0 = new Character[6];
      char char0 = '0';
      Character character0 = Character.valueOf('0');
      assertEquals('0', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('0');
      assertEquals('0', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'L';
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 3503.9F, (int) char0);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {76.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'L';
      doubleArray0[1] = (double) char0;
      longArray0[0] = (long) (-925);
      doubleArray0[3] = (double) (-925L);
      doubleArray0[4] = (double) 'L';
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {48.0, 0.0, (-925.0), 76.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {76.0, 48.0, 0.0, (-925.0), 76.0}, doubleArray0, 0.01);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[15];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(15, booleanArray0.length);
      assertEquals(15, booleanArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[2] = (byte) (-24);
      byteArray0[2] = (byte)2;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)0, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)0, (byte)2}, byteArray1);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (byte) (-24));
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Character character0 = Character.valueOf('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isSurrogate('^');
      assertFalse(boolean0);
      
      char char0 = Character.lowSurrogate(48);
      assertEquals('\uDC30', char0);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      boolean boolean2 = Boolean.logicalAnd(false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      
      String string0 = Character.getName(8);
      assertEquals("BACKSPACE", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '\uDC30';
      doubleArray0[1] = (double) (-337);
      doubleArray0[2] = (double) '^';
      boolean boolean3 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean3);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertArrayEquals(new double[] {56368.0, (-337.0), 94.0}, doubleArray0, 0.01);
      
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      Boolean boolean4 = new Boolean(false);
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      
      booleanArray0[2] = boolean4;
      booleanArray0[3] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      boolean boolean5 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertTrue(boolean5);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (int) ';', (-337));
      assertNull(charArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {94.0, (-337.0), 56368.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      long[] longArray0 = new long[1];
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '\\';
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (-3296), (-3296));
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {92.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Short short0 = new Short((short)496);
      assertEquals((short)496, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)496);
      assertEquals((short)496, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short1;
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Short short2 = new Short((short) (-2812));
      assertEquals((short) (-2812), (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      float float0 = Float.max((short)496, (-0.29829717F));
      assertEquals(496.0F, float0, 0.01F);
      
      float float1 = Float.max((float) shortArray0[0], (-1737.7F));
      assertEquals(496.0F, float1, 0.01F);
      assertEquals(5, shortArray0.length);
      assertEquals(float1, float0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)shortArray0[0];
      longArray0[1] = (-1861L);
      longArray0[2] = (long) (short)1820;
      longArray0[3] = (long) (short) (-2812);
      longArray0[4] = (long) (short) (-1);
      longArray0[5] = (long) (short) (-2812);
      longArray0[6] = (long) (short) (-2812);
      longArray0[7] = (long) (short) (-1);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(16, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {496L, (-1861L), 1820L, (-2812L), (-1L), (-2812L), (-2812L), (-1L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) shortArray0, (Object[]) shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Integer integer0 = new Integer(46);
      assertEquals(46, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) null, (Object) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long[] longArray0 = new long[1];
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.add((short[]) null, (short) (-1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(1, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1)}, shortArray2);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, 1669L, (-1));
      assertEquals((-1), int1);
      assertEquals(1, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 48;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (-806.44632);
      doubleArray0[3] = (double) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {48.0, (-1.0), (-806.44632), (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.indexOf(longArray0, 0L, (-2145919740));
      assertEquals(0, int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2145919740);
      intArray0[0] = (-2145919740);
      Character character0 = new Character('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf(' ');
      assertEquals(' ', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2452.5144F;
      floatArray0[1] = (float) (-2145919740);
      intArray0[0] = (int) '-';
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {45, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (-2502);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean1);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0, (short) (-2502), (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = Character.isSurrogate('^');
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean1);
      assertEquals(2, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '^';
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean2);
      assertEquals(1, intArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {94}, intArray0);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-15), (byte)0, (byte)0}, byteArray0);
      
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = (Byte) (byte)0;
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-15), (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1372.188657;
      doubleArray0[1] = 1372.188657;
      doubleArray0[2] = 1.5;
      doubleArray0[3] = 1372.188657;
      doubleArray0[4] = 1372.188657;
      doubleArray0[5] = 1372.188657;
      doubleArray0[6] = 1372.188657;
      doubleArray0[7] = 1372.188657;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 1.0);
      assertEquals((-1), int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1372.188657, 1372.188657, 1.5, 1372.188657, 1372.188657, 1372.188657, 1372.188657, 1372.188657}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-15445);
      shortArray0[1] = (short) (-5719);
      shortArray0[2] = (short) (-1679);
      shortArray0[3] = (short)1546;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-15445), (short) (-5719), (short) (-1679), (short)1546}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short) (-15445));
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertEquals(5, shortArray2.length);
      assertEquals(4, shortArray0.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-15445), (short) (-5719), (short) (-1679), (short)1546, (short) (-15445)}, shortArray2);
      assertArrayEquals(new short[] {(short) (-15445), (short) (-5719), (short) (-1679), (short)1546}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 233.0, (-1129.3));
      assertEquals((-1), int1);
      assertEquals(8, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {1372.188657, 1372.188657, 1.5, 1372.188657, 1372.188657, 1372.188657, 1372.188657, 1372.188657}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (-337.0F);
      floatArray0[2] = (float) (short) (-5719);
      floatArray0[3] = (float) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-337.0F), (-5719.0F), (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(10, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0}, byteArray0);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray2);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.reverse((boolean[]) null);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-88);
      shortArray0[1] = (short) (byte) (-88);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte) (-15);
      shortArray0[4] = (short) (byte) (-88);
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean1);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-88), (short) (-88), (short)0, (short) (-15), (short) (-88)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = Double.sum((-520.0739), (-520.0739));
      assertEquals((-1040.1478), double0, 0.01);
      
      double double1 = Double.min((-1.0), 0.0);
      assertEquals((-1.0), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) (-1.0);
      objectArray0[2] = (Object) (-1.0);
      objectArray0[3] = (Object) (-1.0);
      objectArray0[5] = (Object) (-1.0);
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(12, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-1.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = Character.isSurrogate('^');
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean1);
      assertEquals(2, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Object[] objectArray1 = new Object[1];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) false;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray1, objectArray0);
      assertFalse(boolean0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = 798L;
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean1);
      assertEquals(1, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {798L}, longArray0);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      
      Boolean[] booleanArray3 = new Boolean[9];
      booleanArray3[0] = (Boolean) false;
      booleanArray3[1] = (Boolean) false;
      booleanArray3[2] = (Boolean) false;
      booleanArray3[3] = (Boolean) false;
      booleanArray3[4] = (Boolean) false;
      booleanArray3[5] = (Boolean) false;
      booleanArray3[6] = (Boolean) false;
      booleanArray3[7] = (Boolean) false;
      booleanArray3[8] = (Boolean) false;
      boolean[] booleanArray4 = ArrayUtils.toPrimitive(booleanArray3, (boolean) booleanArray3[8]);
      assertNotNull(booleanArray4);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray4, booleanArray0);
      assertNotSame(booleanArray4, booleanArray2);
      assertEquals(9, booleanArray4.length);
      assertEquals(9, booleanArray3.length);
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray4));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Character character0 = Character.valueOf('N');
      assertEquals('N', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-7);
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-7));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Integer integer0 = Integer.getInteger("a:O5w|jpEQSANlu?Gf~", 1467);
      assertEquals(1467, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer integer1 = Integer.valueOf((int) integerArray0[1]);
      assertEquals(1467, (int)integer1);
      assertNotNull(integer1);
      assertEquals(5, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1467, 1467, 1467, 1467, 1467}, intArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(2304.9435166996);
      assertEquals(2304.9435166996, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2304.9435166996);
      assertEquals(2304.9435166996, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {2304.9435166996, 2304.9435166996}, doubleArray1, 0.01);
      
      boolean boolean0 = Double.isFinite((double) doubleArray0[1]);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) doubleArray0[1];
      doubleArray2[1] = 2304.9435166996;
      doubleArray2[2] = (double) (-404);
      doubleArray2[3] = (double) (-404);
      doubleArray2[4] = 2058.132;
      doubleArray2[5] = (double) doubleArray0[0];
      doubleArray2[6] = (double) doubleArray0[1];
      doubleArray2[7] = (double) doubleArray0[1];
      doubleArray2[8] = (double) (-404);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray2);
      assertFalse(boolean1);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(9, doubleArray2.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2304.9435166996, 2304.9435166996, (-404.0), (-404.0), 2058.132, 2304.9435166996, 2304.9435166996, 2304.9435166996, (-404.0)}, doubleArray2, 0.01);
      
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-452.86804F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)125;
      Byte byte2 = new Byte((byte)125);
      assertEquals((byte)125, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte1);
      assertEquals((byte)125, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte1);
      assertEquals((byte)125, (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      
      byteArray0[6] = byte7;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 333.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {333.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.vm.specification.name";
      stringArray0[1] = "{}";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {333.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {333.0F}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray1, floatArray1);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {333.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {333.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {333.0F, 333.0F}, floatArray2, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)2;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)2);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 333.0F;
      doubleArray0[1] = (double) 333.0F;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = (double) (short)2;
      doubleArray0[6] = (double) (short)1;
      doubleArray0[7] = (double) 333.0F;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {333.0, 333.0, 1.0, 2.0, 2.0, 0.0, 1.0, 333.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[8];
      longArray0[2] = (-291L);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (byte)0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, (-291L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty((Object[]) longArray1);
      assertNotNull(objectArray1);
      assertSame(longArray1, objectArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertEquals(8, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertArrayEquals(new long[] {0L, 0L, (-291L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, objectArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)objectArray1));
      assertArrayEquals(new long[] {0L, 0L, (-291L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertTrue(boolean2);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      int int1 = ArrayUtils.indexOf(booleanArray1, false, (-456));
      assertEquals(0, int1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.addAll((long[]) null, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      Object[] objectArray0 = new Object[0];
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      String[] stringArray0 = new String[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(stringArray0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 46;
      intArray0[1] = (-1101);
      intArray0[2] = 100;
      intArray0[3] = (-328);
      intArray0[4] = (-2929);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {46, (-1101), 100, (-328), (-2929)}, intArray0);
      assertArrayEquals(new int[] {46, (-1101), 100, (-328), (-2929), 46, (-1101), 100, (-328), (-2929)}, intArray1);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) stringArray0, (Object[]) stringArray0);
      assertTrue(boolean2);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      char char0 = 'h';
      Character character0 = Character.valueOf('h');
      assertEquals('h', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isSurrogate('h');
      assertFalse(boolean0);
      
      char char1 = Character.lowSurrogate((-870));
      assertEquals('\uDC9A', char1);
      assertFalse(char1 == char0);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      String string0 = Character.getName(8);
      assertEquals("BACKSPACE", string0);
      assertNotNull(string0);
      
      char char2 = Character.highSurrogate((-1666));
      assertEquals('\uD7BE', char2);
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      
      Integer integer0 = new Integer((-870));
      assertEquals((-870), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compareUnsigned(char0, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertFalse(char0 == char1);
      assertFalse(char0 == char2);
      
      int int1 = Integer.compareUnsigned(48, (-2611));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-8);
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-8), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-8), (short)0}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short) (-1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-8), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-8), (short)0, (short) (-1)}, shortArray2);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 570, (-1308));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 570);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      int int1 = ArrayUtils.lastIndexOf(longArray1, (long) (short) (-8), (-8));
      assertEquals((-1), int1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4276.099;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 4276.099);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4276.099}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 0L;
      Character character0 = new Character('B');
      assertEquals('B', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('B');
      assertEquals('B', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = new Character('-');
      assertEquals('-', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      Character character3 = Character.valueOf('C');
      assertEquals('C', (char)character3);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      
      Character character4 = new Character('~');
      assertEquals('~', (char)character4);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      
      Character character5 = new Character('B');
      assertEquals('B', (char)character5);
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character2));
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'B'}, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)100);
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)118, (byte)57, (byte)57, (byte)57, (byte)0}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)118);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)57, (byte)57, (byte)57, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)118, (byte)57, (byte)57, (byte)57, (byte)0}, byteArray0);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3574.0F);
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 606, 0.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 606, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(984.4);
      assertEquals(984.4, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-520.0739));
      assertEquals((-520.0739), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = Double.valueOf((double) doubleArray0[0]);
      assertEquals(984.4, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Double double0 = new Double(1163.182114078072);
      assertEquals(1163.182114078072, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1163.182114078072);
      assertEquals(1163.182114078072, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[8];
      doubleArray0[3] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double1;
      doubleArray0[7] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 2234.4008239259597);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {2234.4008239259597, 1163.182114078072, 1163.182114078072, 1163.182114078072, 1163.182114078072, 1163.182114078072, 1163.182114078072, 1163.182114078072}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)3904;
      shortArray0[1] = (short) (-4349);
      shortArray0[2] = (short) (-1878);
      shortArray0[3] = (short) (-1878);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1878);
      shortArray0[6] = (short) (-1878);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)3904, (short) (-4349), (short) (-1878), (short) (-1878), (short) (-1), (short) (-1878), (short) (-1878)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[9];
      longArray0[1] = (long) (-2929);
      longArray0[2] = (long) (-2929);
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)798;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)798;
      intArray0[1] = (int) (short)798;
      intArray0[2] = (int) (short)798;
      intArray0[3] = 358;
      int int0 = ArrayUtils.indexOf(intArray0, (int) (short)798);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {798, 798, 798, 358}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 798, (-762));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (-2870), 2399L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2870, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1590.4652056667);
      doubleArray0[1] = 46.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-447.1360900924402);
      doubleArray0[4] = 2460.932;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1590.4652056667), 46.0, (-1.0), (-447.1360900924402), 2460.932}, doubleArray0, 0.01);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 2145708134, 512);
      assertNull(shortArray0);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short)391);
      assertEquals((short)391, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short)391, (short)short1);
      assertNotNull(short1);
      assertEquals(6, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      short short2 = (short)9;
      Short short3 = new Short((short)9);
      assertEquals((short)9, (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      
      shortArray0[2] = short3;
      Short short4 = new Short((short)1414);
      assertEquals((short)1414, (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      
      shortArray0[3] = short4;
      Short short5 = new Short((short)1414);
      assertEquals((short)1414, (short)short5);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short2));
      assertTrue(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      
      shortArray0[4] = shortArray0[0];
      Short short6 = new Short((short)1809);
      assertEquals((short)1809, (short)short6);
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short0));
      
      shortArray0[5] = short6;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      short[] shortArray2 = new short[2];
      shortArray2[0] = short2;
      shortArray2[1] = (short) shortArray0[4];
      boolean boolean0 = ArrayUtils.contains(shortArray2, (short)9);
      assertTrue(boolean0);
      assertEquals(2, shortArray2.length);
      assertArrayEquals(new short[] {(short)9, (short)391}, shortArray2);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Integer integer0 = new Integer(2141148887);
      assertEquals(2141148887, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[9];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[4] = boolean0;
      booleanArray0[6] = boolean0;
      boolean boolean1 = Boolean.logicalXor((boolean) boolean0, false);
      assertTrue(boolean1);
      
      booleanArray0[7] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-4628);
      shortArray0[1] = (short) (-4628);
      shortArray0[2] = (short) (-4628);
      shortArray0[3] = (short) (-4628);
      shortArray0[3] = (short) (-4628);
      shortArray0[5] = (short) (-4628);
      shortArray0[6] = (short) (-4628);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1), (-1529));
      assertEquals((-1), int0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4628), (short) (-4628), (short) (-4628), (short) (-4628), (short)0, (short) (-4628), (short) (-4628)}, shortArray0);
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Object, String>[] abstractMap_SimpleEntryArray0 = ArrayUtils.add((AbstractMap.SimpleEntry<Object, String>[]) null, (int) 0, abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntryArray0);
      assertEquals(1, abstractMap_SimpleEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      long[] longArray0 = new long[1];
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '\\';
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (-3296), (-3296));
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {92.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (int) '\\';
      intArray0[2] = (int) '\\';
      intArray0[3] = (-1);
      intArray0[4] = (-3296);
      intArray0[5] = 101;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1), 92, 92, (-1), (-3296), 101}, intArray1);
      assertArrayEquals(new int[] {(-1), 92, 92, (-1), (-3296), 101}, intArray0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte) (-88);
      byteArray0[8] = (byte) (-88);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0, (byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88)}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-88);
      doubleArray0[1] = (double) 'g';
      doubleArray0[2] = (double) (byte) (-88);
      doubleArray0[3] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-88.0), 103.0, (-88.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-88.0), 103.0, (-88.0), 0.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      int int0 = ArrayUtils.indexOf(objectArray0, object1, 4293);
      assertEquals((-1), int0);
      assertNotSame(object1, object0);
      assertEquals(2, objectArray0.length);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 333.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {333.0F}, floatArray0, 0.01F);
      
      Short[] shortArray0 = new Short[9];
      Short short0 = Short.valueOf((short) (-2395));
      assertEquals((short) (-2395), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = '2';
      charArray0[2] = '?';
      charArray0[3] = 'I';
      charArray0[4] = 'Y';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'I');
      assertEquals(3, int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'#', '2', '?', 'I', 'Y'}, charArray0);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {333.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {333.0F, 333.0F}, floatArray1, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = Character.isSurrogate('^');
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean2);
      assertEquals(0, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 953L;
      longArray0[1] = 1L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {953L, 1L}, longArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)57);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)57}, byteArray1);
      
      Character character0 = Character.valueOf(' ');
      assertEquals(' ', (char)character0);
      assertNotNull(character0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer((byte)21);
      assertEquals(21, (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)57}, byteArray1);
      
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 4090;
      intArray0[1] = 6;
      intArray0[2] = 16;
      intArray0[3] = 10;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0}, byteArray0);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-88));
      assertTrue(boolean1);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0}, byteArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean boolean2 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      boolean boolean3 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short) (-1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short) (-1);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) (-1), (-1.0));
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Character character0 = Character.valueOf('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      Double double0 = new Double(1076.447746);
      assertEquals(1076.447746, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 2304.9435166996);
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Double double0 = new Double(984.4);
      assertEquals(984.4, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-520.0739));
      assertEquals((-520.0739), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[2] = (float) 0L;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'v'}, charArray0);
      assertArrayEquals(new char[] {'v', 'v'}, charArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) stringArray0, (Object[]) stringArray0);
      assertTrue(boolean0);
      assertEquals(0, stringArray0.length);
      
      Byte byte0 = new Byte((byte) (-51));
      assertEquals((byte) (-51), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-1));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(46);
      assertEquals(46, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(46);
      assertEquals(46, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = new Integer(46);
      assertEquals(46, (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 46;
      doubleArray0[1] = (double) 46;
      doubleArray0[2] = (double) 46;
      doubleArray0[3] = (double) 0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 46.0, 46.0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {46.0, 46.0, 46.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) 0);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short)1689, (-762));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object2));
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertNotNull(object7);
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object4));
      
      objectArray0[7] = object7;
      Object object8 = new Object();
      assertNotNull(object8);
      assertFalse(object8.equals((Object)object4));
      assertFalse(object8.equals((Object)object7));
      assertFalse(object8.equals((Object)object3));
      assertFalse(object8.equals((Object)object6));
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object5));
      assertFalse(object8.equals((Object)object2));
      assertFalse(object8.equals((Object)object1));
      
      objectArray0[8] = object8;
      Object object9 = new Object();
      assertNotNull(object9);
      assertFalse(object9.equals((Object)object8));
      assertFalse(object9.equals((Object)object2));
      assertFalse(object9.equals((Object)object6));
      assertFalse(object9.equals((Object)object4));
      assertFalse(object9.equals((Object)object5));
      assertFalse(object9.equals((Object)object0));
      assertFalse(object9.equals((Object)object7));
      assertFalse(object9.equals((Object)object3));
      assertFalse(object9.equals((Object)object1));
      
      int int1 = ArrayUtils.indexOf(objectArray0, object9, (int) (short)1689);
      assertEquals((-1), int1);
      assertNotSame(object9, object8);
      assertNotSame(object9, object2);
      assertNotSame(object9, object6);
      assertNotSame(object9, object4);
      assertNotSame(object9, object5);
      assertNotSame(object9, object0);
      assertNotSame(object9, object7);
      assertNotSame(object9, object3);
      assertNotSame(object9, object1);
      assertEquals(9, objectArray0.length);
      assertFalse(object9.equals((Object)object8));
      assertFalse(object9.equals((Object)object2));
      assertFalse(object9.equals((Object)object6));
      assertFalse(object9.equals((Object)object4));
      assertFalse(object9.equals((Object)object5));
      assertFalse(object9.equals((Object)object0));
      assertFalse(object9.equals((Object)object7));
      assertFalse(object9.equals((Object)object3));
      assertFalse(object9.equals((Object)object1));
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-762);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-762);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (short)1689;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-762.0F), (-1.0F), (-762.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), 1689.0F}, floatArray0, 0.01F);
      
      int int2 = ArrayUtils.indexOf((short[]) null, (short) (-1), 488);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (int) (short) (-1);
      intArray0[4] = (-3131);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = 488;
      intArray0[8] = (int) (short) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-3131), (-1), (-1), 488, (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 333.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {333.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.vm.spec#fication.name";
      stringArray0[1] = "{}";
      String[] stringArray1 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {333.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {333.0F, 333.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = 'v';
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'U', (-762));
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'z', 'v', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.reverse(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-664), 800);
      assertEquals((-1), int0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-82), 1647);
      assertEquals((-1), int1);
      assertEquals(1, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Short short0 = new Short((short)496);
      assertEquals((short)496, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)496);
      assertEquals((short)496, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      short[] shortArray2 = new short[0];
      boolean boolean0 = ArrayUtils.contains(shortArray2, (short)292);
      assertFalse(boolean0);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray2);
      
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      Integer integer0 = new Integer((int) shortArray0[0]);
      assertEquals(496, (int)integer0);
      assertNotNull(integer0);
      assertEquals(6, shortArray0.length);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)258;
      shortArray0[1] = (short)1671;
      shortArray0[3] = (short)1671;
      int int0 = Short.toUnsignedInt((short) (-3814));
      assertEquals(61722, int0);
      
      Short[] shortArray1 = new Short[5];
      shortArray1[0] = (Short) (short)1671;
      shortArray1[1] = (Short) (short)1671;
      Short short0 = new Short((short) (-1435));
      assertEquals((short) (-1435), (short)short0);
      assertNotNull(short0);
      
      shortArray1[3] = short0;
      Short short1 = new Short((short) shortArray1[3]);
      assertEquals((short) (-1435), (short)short1);
      assertNotNull(short1);
      assertEquals(5, shortArray1.length);
      assertTrue(short1.equals((Object)short0));
      
      shortArray1[4] = short1;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)2);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1671, (short)1671, (short)2, (short) (-1435), (short) (-1435)}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-27);
      byteArray0[5] = (byte)46;
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'T');
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\\');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = (float) (byte) (-16);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertFalse(boolean1);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)64}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 698, 512);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)64}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Integer integer0 = new Integer((byte) (-16));
      assertEquals((-16), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)64}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      short[] shortArray0 = new short[1];
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'v'}, charArray0);
      assertArrayEquals(new char[] {'v', 'v'}, charArray1);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'v'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Float float0 = new Float((-927.206187674));
      assertEquals((-927.2062F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)52, (-2147086579));
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)52;
      shortArray0[1] = (short) (byte)52;
      shortArray0[2] = (short) (byte)52;
      shortArray0[3] = (short) (byte)52;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)52, (short)52, (short)52, (short)52}, shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 1);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse((Object[]) null);
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      charArray0[3] = '9';
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 1}, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'g';
      floatArray0[1] = (-627.6286F);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) '9';
      floatArray0[5] = (float) '9';
      floatArray0[6] = (float) 'g';
      floatArray0[7] = (float) 1;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {103.0F, (-627.6286F), 1.0F, 1.0F, 57.0F, 57.0F, 103.0F, 1.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1704.853);
      doubleArray0[1] = (double) (-627.6286F);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 1362.39;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 103.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-627.6286F), 1, 1.0);
      assertEquals(1, int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1704.853), (-627.6286010742188), 1.0, 1.0, 1362.39, 1.0, 103.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean2 = ArrayUtils.isEmpty(objectArray0);
      assertTrue(boolean2);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 1);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {103.0F, (-627.6286F), 1.0F, 1.0F, 57.0F, 57.0F, 103.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)125;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-1777);
      shortArray0[3] = (short) (-2442);
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-2442), (-4845));
      assertEquals(3, int1);
      assertEquals(4, shortArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short)125, (short)1, (short) (-1777), (short) (-2442)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Boolean boolean0 = new Boolean("/mQ8_Jglio] -n RW");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = 0.0F;
      boolean boolean1 = Boolean.logicalXor((boolean) boolean0, true);
      assertTrue(boolean1);
      
      floatArray0[2] = (float) Integer.MAX_VALUE;
      floatArray0[3] = 0.0F;
      boolean boolean2 = ArrayUtils.contains(floatArray0, (float) Integer.MAX_VALUE);
      assertTrue(boolean2);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {2.14748365E9F, 0.0F, 2.14748365E9F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) booleanArray0, (Object[]) booleanArray0);
      assertNotNull(objectArray0);
      assertNotSame(booleanArray0, objectArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Double double0 = new Double(3012.7734);
      assertEquals(3012.7734, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-92.26011629));
      assertEquals((-92.26011629), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-71.229));
      assertEquals((-71.229), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-17L);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean1);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-568.72943296), 205);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, 242);
      assertEquals(0, int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) null, 0);
      assertEquals((-1), int1);
      assertEquals(6, integerArray0.length);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Character character0 = new Character('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isSurrogate('^');
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-23));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23)}, byteArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 0.0);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1924;
      shortArray0[1] = (short) (-496);
      shortArray0[2] = (short)570;
      shortArray0[3] = (short)10;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1924, (short) (-496), (short)570, (short)10}, shortArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) (short)1924;
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertFalse(boolean1);
      assertEquals(3, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 744.6643F;
      floatArray0[1] = (-954.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1570.81F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-3750.5F);
      floatArray0[6] = (-365.7F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {744.6643F, (-954.0F), 0.0F, (-1570.81F), 0.0F, (-3750.5F), (-365.7F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {744.6643F, (-954.0F), 0.0F, (-1570.81F), 0.0F, (-3750.5F), (-365.7F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      String[] stringArray0 = new String[0];
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      boolean boolean0 = ArrayUtils.contains(byteArray1, (byte)64);
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray2 = ArrayUtils.subarray((byte[]) null, Integer.MAX_VALUE, 704);
      assertNull(byteArray2);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertTrue(boolean1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Integer integer0 = new Integer(656);
      assertEquals(656, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertTrue(boolean2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 1.5);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-169.69989F);
      floatArray0[1] = 958.8234F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-8.0F);
      floatArray0[4] = (-3644.3088F);
      floatArray0[5] = (-1130.2538F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2417), (-2417));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-169.69989F), 958.8234F, 0.0F, (-8.0F), (-3644.3088F), (-1130.2538F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0}, byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 48;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte) (-15), (int) (byte) (-88));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {48L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, 3680);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray1, (-330L), (-2581));
      assertEquals((-1), int1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {48L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      boolean[] booleanArray0 = new boolean[5];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1361;
      shortArray0[1] = (short)1361;
      shortArray0[2] = (short)1361;
      shortArray0[3] = (short)2916;
      shortArray0[4] = (short)1361;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-4628), (int) (short)1361);
      assertEquals((-1), int0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1361, (short)1361, (short)1361, (short)2916, (short)1361}, shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-80);
      intArray0[1] = (int) (short)1361;
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (int) (short)1361, (int) (short)2916);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.reverse(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-732));
      assertEquals((-1), int0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      int int1 = ArrayUtils.lastIndexOf((long[]) null, (long) (-1), 1);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Float float0 = new Float((-4791.2163F));
      assertEquals((-4791.2163F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Short short0 = new Short((short)496);
      assertEquals((short)496, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = new short[1];
      shortArray2[0] = (short) (-41);
      boolean boolean0 = ArrayUtils.contains(shortArray2, (short)0);
      assertFalse(boolean0);
      assertEquals(1, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-41)}, shortArray2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "+@D46,iY!3M+h";
      stringArray0[1] = "RWhby\"{^>47.q/<bT";
      stringArray0[2] = "Windows";
      stringArray0[3] = "Windows";
      stringArray0[4] = "RWhby\"{^>47.q/<bT";
      stringArray0[5] = "Windows";
      stringArray0[6] = "RWhby\"{^>47.q/<bT";
      stringArray0[7] = "Windows";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(16, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Integer integer0 = new Integer((short) (-41));
      assertEquals((-41), (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Short[] shortArray3 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray3);
      assertSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray3.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 520.269919;
      long[] longArray0 = new long[6];
      longArray0[0] = 2224L;
      longArray0[1] = 2224L;
      longArray0[2] = 493L;
      longArray0[3] = (-677L);
      longArray0[4] = 493L;
      longArray0[5] = 493L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2224L, 2224L, 493L, (-677L), 493L, 493L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      long long0 = Long.divideUnsigned((-1961L), 493L);
      assertEquals(37417330778315516L, long0);
      
      long[] longArray2 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      char[] charArray1 = ArrayUtils.addAll((char[]) null, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'v'}, charArray0);
      assertArrayEquals(new char[] {'v'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-88);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-15), (byte)0, (byte) (-88)}, byteArray0);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = (Byte) (byte) (-88);
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-88)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = (-1L);
      longArray0[0] = (-1L);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2145919781);
      intArray0[3] = (-2145919781);
      intArray0[2] = (-2145919781);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-2145919781));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2145919781, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 9;
      intArray0[1] = (-613);
      intArray0[2] = 1;
      intArray0[3] = (-425);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertFalse(boolean0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {9, (-613), 1, (-425)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1380);
      intArray0[1] = (-6369);
      intArray0[2] = 57;
      intArray0[7] = 654;
      intArray0[4] = 1939;
      intArray0[5] = 2626;
      intArray0[6] = 1175;
      intArray0[7] = 2770;
      intArray0[8] = 422;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1380), (-6369), 57, 0, 1939, 2626, 1175, 2770, 422}, intArray0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Short[] shortArray0 = new Short[7];
      Double double0 = Double.valueOf(1023.033);
      assertEquals(1023.033, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) double0;
      // Undeclared exception!
      try { 
        ArrayUtils.addAll((Object[]) shortArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot store java.lang.Object in an array of java.lang.Short
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-31));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Object, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Object, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-947);
      intArray1[1] = (-2146509069);
      intArray1[2] = 48;
      intArray1[3] = (-1401);
      intArray1[4] = (-943);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(boolean0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-947), (-2146509069), 48, (-1401), (-943)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1233;
      boolean boolean0 = ArrayUtils.contains(intArray0, 21);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1233}, intArray0);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-1354L));
      assertEquals((-1354L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-1354L)}, longArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = '4';
      charArray0[2] = 'u';
      charArray0[3] = '0';
      charArray0[4] = '~';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'S', '4', 'u', '0', '~'}, charArray0);
      assertArrayEquals(new char[] {'S', '4', 'u', '0', '~', 'S', '4', 'u', '0', '~'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 333.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {333.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.vm.spec#fication.name";
      Float[] floatArray1 = new Float[1];
      floatArray1[0] = (Float) 333.0F;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 118, 122);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      float[] floatArray3 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray3);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray3, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray3.length);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertArrayEquals(new float[] {333.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {333.0F}, floatArray3, 0.01F);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)1);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '/';
      charArray0[2] = '~';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)1;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-1), (int) (byte) (-1));
      assertEquals((-1), int1);
      assertEquals(5, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)84, (byte)84, (byte) (-126), (byte)1}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[5] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      
      objectArray0[3] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      
      objectArray0[5] = object4;
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = '$';
      charArray0[6] = '$';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2513, (-5760));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'$', '$', '$', '$', '$', '$', '$'}, charArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2144.47);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) (-5760);
      doubleArray0[3] = (-520.0739);
      doubleArray0[4] = (-2970.828594);
      doubleArray0[5] = (double) '$';
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, (-1362.39));
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-2144.47), 1.5, (-5760.0), (-520.0739), (-2970.828594), 36.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-15);
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-8);
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-8), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-8), (short)0}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short) (-1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-8), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-8), (short)0, (short) (-1)}, shortArray2);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 570, (-1308));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      Integer integer0 = new Integer((short) (-8));
      assertEquals((-8), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[3] = (-2146923964);
      intArray0[0] = (-153);
      intArray0[3] = (-411);
      int int0 = ArrayUtils.indexOf(intArray0, 2, (-2146923964));
      assertEquals((-1), int0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-153), 0, 0, (-411)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1978.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1978.0F), 1.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) (-2929);
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray1, (float[]) null);
      assertTrue(boolean1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Integer integer0 = new Integer((-328));
      assertEquals((-328), (int)integer0);
      assertNotNull(integer0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean2);
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray2);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '*');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '4';
      floatArray0[1] = (float) (-925);
      floatArray0[2] = (float) '*';
      floatArray0[3] = (float) (-925);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 42.0F, 1523);
      assertEquals(2, int0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {52.0F, (-925.0F), 42.0F, (-925.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-925.0F), 42.0F, (-925.0F), 52.0F}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf((byte[]) null, (byte)64, 1523);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Float[] floatArray1 = new Float[3];
      floatArray1[0] = (Float) (-925.0F);
      floatArray1[1] = (Float) (-925.0F);
      floatArray1[2] = (Float) (-925.0F);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) (byte)64);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-925.0F), (-925.0F), (-925.0F)}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Float float0 = Float.valueOf(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-927.206187674));
      assertEquals((-927.2062F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[2];
      float float2 = Float.min((byte) (-51), (byte) (-51));
      assertEquals((-51.0F), float2, 0.01F);
      
      floatArray0[0] = float1;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-927.2062F), 1.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[18];
      byteArray1[0] = byte1;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, byte0);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(18, byteArray1.length);
      assertEquals(18, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(doubleArray0);
      assertNotNull(map0);
      assertEquals(0, doubleArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte) (-7);
      floatArray0[1] = 5207.61F;
      floatArray0[2] = (float) (byte) (-7);
      floatArray0[7] = (float) (byte) (-10);
      floatArray0[4] = (float) (byte) (-7);
      floatArray0[5] = (float) (byte) (-10);
      floatArray0[6] = (float) (byte) (-10);
      floatArray0[7] = (float) (byte) (-10);
      floatArray0[8] = (float) (byte) (-7);
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-7.0F), 5207.61F, (-7.0F), 0.0F, (-7.0F), (-10.0F), (-10.0F), (-10.0F), (-7.0F)}, floatArray0, 0.01F);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.addAll((boolean[]) null, booleanArray0);
      assertNotNull(booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      boolean[] booleanArray0 = new boolean[11];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(11, booleanArray0.length);
      assertEquals(11, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short) (byte)0;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short)6;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)1254, (int) (short)0);
      assertEquals((-1), int1);
      assertEquals(6, shortArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)2, (short)6}, shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte) (-75);
      intArray0[2] = (int) (short)0;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(2, intArray1.length);
      assertEquals(3, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), (-75)}, intArray1);
      assertArrayEquals(new int[] {(-1), (-75), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Double double0 = new Double(3012.7734);
      assertEquals(3012.7734, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-92.26011629));
      assertEquals((-92.26011629), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-1084.0));
      assertEquals((-1084.0), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double((-4645.30890527876));
      assertEquals((-4645.30890527876), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      double double4 = Double.min((-4645.30890527876), (-1084.0));
      assertEquals((-4645.30890527876), double4, 0.01);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = Character.valueOf('.');
      assertEquals('.', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char char0 = 'i';
      Character character1 = Character.valueOf('i');
      assertEquals('i', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertEquals('i', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('i');
      assertEquals('i', (char)character3);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, characterArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)517, (int) char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertTrue(boolean1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1812.594304652);
      doubleArray0[1] = (-1812.594304652);
      boolean boolean2 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(boolean2);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {(-1812.594304652), (-1812.594304652)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Character character0 = Character.valueOf('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isSurrogate('^');
      assertFalse(boolean0);
      
      char char0 = Character.lowSurrogate(44);
      assertEquals('\uDC2C', char0);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      String string0 = Character.getName(0);
      assertEquals("NULL", string0);
      assertNotNull(string0);
      
      char char1 = Character.highSurrogate((-337));
      assertEquals('\uD7BF', char1);
      assertFalse(char1 == char0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 101;
      floatArray0[1] = (float) (-337);
      int int0 = new Integer(44);
      assertEquals(44, int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2179;
      shortArray0[1] = (short)3206;
      shortArray0[2] = (short)2179;
      shortArray0[3] = (short)2179;
      shortArray0[4] = (short)2746;
      shortArray0[6] = (short)2179;
      shortArray0[7] = (short)3206;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2179, (short)3206, (short)2179, (short)2179, (short)2746, (short)0, (short)2179, (short)3206}, shortArray1);
      assertArrayEquals(new short[] {(short)2179, (short)3206, (short)2179, (short)2179, (short)2746, (short)0, (short)2179, (short)3206}, shortArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) (short)3206;
      objectArray0[2] = (Object) (short)2179;
      objectArray0[3] = (Object) 101.0F;
      objectArray0[4] = (Object) character0;
      boolean boolean2 = ArrayUtils.contains(objectArray0, (Object) "NULL");
      assertFalse(boolean2);
      assertEquals(5, objectArray0.length);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean3);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertArrayEquals(new float[] {101.0F, (-337.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      Short short3 = new Short((short)496);
      assertEquals((short)496, (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      
      shortArray0[2] = short3;
      Short short4 = new Short((short)0);
      assertEquals((short)0, (short)short4);
      assertNotNull(short4);
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short1));
      
      shortArray0[3] = short4;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      short[] shortArray2 = new short[3];
      shortArray2[0] = (short)0;
      shortArray2[1] = (short) shortArray0[2];
      shortArray2[2] = short0;
      boolean boolean0 = ArrayUtils.contains(shortArray2, (short)496);
      assertTrue(boolean0);
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short)496, (short)0}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Short short0 = new Short((short)496);
      assertEquals((short)496, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)496);
      assertEquals((short)496, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short1;
      int int0 = Short.compare((short)1820, (short) shortArray0[0]);
      assertEquals(1324, int0);
      assertEquals(5, shortArray0.length);
      
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      shortArray0[3] = short1;
      shortArray0[4] = short0;
      int int1 = Short.toUnsignedInt((short) shortArray0[2]);
      assertEquals(496, int1);
      assertEquals(5, shortArray0.length);
      assertFalse(int1 == int0);
      
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      short[] shortArray2 = new short[0];
      boolean boolean0 = ArrayUtils.contains(shortArray2, (short) shortArray0[0]);
      assertFalse(boolean0);
      assertSame(shortArray0, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray2);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short)496);
      assertEquals((-1), int2);
      assertEquals(1, booleanArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      long[] longArray0 = new long[0];
      int int3 = ArrayUtils.lastIndexOf(longArray0, 1L, (int) shortArray0[2]);
      assertEquals((-1), int3);
      assertSame(shortArray0, shortArray1);
      assertEquals(0, longArray0.length);
      assertEquals(5, shortArray0.length);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean1);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean2);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1372.188657, 0.0);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)2135);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)2135}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-15);
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Integer integer0 = new Integer((byte) (-15));
      assertEquals((-15), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Long long0 = new Long((-1));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(800L);
      assertEquals(800L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long1;
      Long long2 = new Long((-921L));
      assertEquals((-921L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      longArray0[1] = long2;
      longArray0[2] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {800L, (-921L), 800L}, longArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = '}';
      charArray0[2] = 'Q';
      charArray0[3] = '$';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-5760), 2513);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'o', '}', 'Q', '$'}, charArray0);
      assertArrayEquals(new char[] {'o', '}', 'Q', '$'}, charArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'o';
      doubleArray0[1] = (double) 'o';
      doubleArray0[2] = (double) '}';
      doubleArray0[3] = (double) '$';
      doubleArray0[4] = (double) 2513;
      doubleArray0[5] = (double) (-5760);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-520.0739), (-520.0739));
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {111.0, 111.0, 125.0, 36.0, 2513.0, (-5760.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)0;
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'M';
      charArray0[5] = 'h';
      charArray0[6] = 'h';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'6', 'd', 'd', 'M', '\u0000', 'h', 'h', '\u0000', '\u0000'}, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'h';
      floatArray0[1] = (float) '6';
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-3316.0F));
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {104.0F, 54.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {104.0F, 54.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)23);
      assertTrue(boolean0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)23, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-3504), (-2147449956));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)23, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Integer integer0 = new Integer((byte)23);
      assertEquals(23, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)23, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (-2929);
      boolean boolean2 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertFalse(boolean2);
      assertEquals(2, intArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {0, (-2929)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-95);
      Byte byte1 = new Byte((byte) (-95));
      assertEquals((byte) (-95), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      int int0 = Byte.compare(byte0, (byte)34);
      assertEquals((-129), int0);
      
      byte byte2 = (byte) (-39);
      Byte byte3 = new Byte((byte) (-39));
      assertEquals((byte) (-39), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte2);
      assertEquals((byte) (-39), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte2 == byte0);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)96);
      assertEquals((byte)96, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      
      byteArray0[3] = byte5;
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, (int) byte2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -39, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0}, byteArray0);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~";
      stringArray0[1] = "pp:u[)";
      boolean boolean1 = ArrayUtils.isNotEmpty(stringArray0);
      assertTrue(boolean1);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Double double0 = new Double(1023.0);
      assertEquals(1023.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Boolean[] booleanArray2 = new Boolean[0];
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2, true);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      
      Map<Object, Object> map1 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map1);
      assertNotSame(map1, map0);
      assertEquals(0, objectArray0.length);
      assertTrue(map1.equals((Object)map0));
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) "O</~`hqXyU5g", 79);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 233);
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 233;
      doubleArray0[1] = (double) 233;
      doubleArray0[2] = (double) 233;
      int int1 = ArrayUtils.indexOf(doubleArray0, 1.5, (-2844));
      assertEquals((-1), int1);
      assertEquals(3, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {233.0, 233.0, 233.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0}, byteArray0);
      
      Byte[] byteArray1 = new Byte[0];
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) byteArray1, (Object) "");
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.String
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L, (-2145919781));
      assertEquals(0, int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2145919781);
      intArray0[1] = (-2145919781);
      intArray0[2] = (-2145919781);
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2145919781), (-2145919781), (-2145919781), 0}, intArray0);
      assertArrayEquals(new int[] {(-2145919781), (-2145919781), 0}, intArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'v'}, charArray0);
      assertArrayEquals(new char[] {'v'}, charArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 'v';
      Character character0 = new Character('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('0');
      assertEquals('0', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = new Character('l');
      assertEquals('l', (char)character2);
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(2564);
      assertEquals(2564, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      boolean boolean0 = Character.isSurrogate('V');
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean1);
      assertEquals(1, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 'V');
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'false', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte) (-95));
      assertEquals((byte) (-95), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-39);
      Byte byte2 = new Byte((byte) (-39));
      assertEquals((byte) (-39), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte1);
      assertEquals((byte) (-39), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)96);
      assertEquals((byte)96, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      
      byteArray0[3] = byte4;
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 3416, (int) (byte) (-39));
      assertNull(longArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (long) (byte) (-95), (int) (byte) (-95));
      assertEquals((-1), int0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(984.4);
      assertEquals(984.4, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-520.0739));
      assertEquals((-520.0739), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = Double.valueOf((double) doubleArray0[0]);
      assertEquals(984.4, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals(3, doubleArray0.length);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {984.4, (-520.0739), 984.4}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Double double0 = new Double(3012.7734);
      assertEquals(3012.7734, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-92.26011629));
      assertEquals((-92.26011629), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-71.229));
      assertEquals((-71.229), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Float float0 = new Float((-1.0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-611.06793F));
      assertEquals((-611.06793F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = new Float(0.0F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      Float float4 = new Float(3012.7734);
      assertEquals(3012.7734F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      Float float5 = new Float(1523.0F);
      assertEquals(1523.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      
      Float float6 = new Float(663.55010360702);
      assertEquals(663.5501F, (float)float6, 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertTrue(boolean1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1812.594304652);
      doubleArray0[1] = (-1812.594304652);
      boolean boolean2 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(boolean2);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {(-1812.594304652), (-1812.594304652)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean3 = ArrayUtils.isSameLength(doubleArray1, (double[]) null);
      assertTrue(boolean3);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray1);
      assertNotNull(booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      long[] longArray0 = new long[1];
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 48;
      floatArray0[3] = (float) 48;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = '<';
      Character character0 = Character.valueOf('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isSurrogate('<');
      assertFalse(boolean0);
      
      char char1 = Character.lowSurrogate(48);
      assertEquals('\uDC30', char1);
      assertFalse(char1 == char0);
      
      boolean boolean1 = Character.isIdeographic('^');
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Character.getName(0);
      assertEquals("NULL", string0);
      assertNotNull(string0);
      
      char char2 = Character.highSurrogate((-337));
      assertEquals('\uD7BF', char2);
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      
      ArrayUtils.reverse((int[]) null);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer('<');
      assertEquals(60, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compareUnsigned(Integer.MAX_VALUE, '<');
      assertEquals(1, int0);
      
      int int1 = Integer.compareUnsigned(0, 0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {60}, intArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = char0;
      charArray0[1] = '\uD7BF';
      charArray0[2] = char0;
      ArrayUtils.reverse(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '<', '\uD7BF', '<'}, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1970), 4934);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(integerArray0);
      assertTrue(boolean2);
      assertEquals(1, integerArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      Character character0 = Character.valueOf('N');
      assertEquals('N', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(921);
      assertEquals(921, (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertTrue(boolean1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short) (-1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1)}, shortArray2);
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-58));
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Integer integer0 = new Integer(1254);
      assertEquals(1254, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, (Object) "");
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)0;
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      char char0 = Character.highSurrogate((-4169));
      assertEquals('\uD7BB', char0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      Integer integer0 = new Integer(50);
      assertEquals(50, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compareUnsigned(Integer.MAX_VALUE, (-1288));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-8);
      shortArray0[1] = (short)0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-8);
      floatArray0[1] = (float) (short) (-8);
      floatArray0[2] = (float) (short) (-8);
      floatArray0[3] = (float) (short) (-8);
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-8.0F), (-8.0F), (-8.0F), (-8.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (-8.0F);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-8.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, (-8.0F), 0);
      assertEquals(0, int0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-8.0F), (-8.0F), (-8.0F), (-8.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertTrue(boolean1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray1, false);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1416;
      intArray0[1] = (int) (short) (-8);
      intArray0[2] = (int) (short)0;
      intArray0[3] = (-1);
      intArray0[4] = (int) (short)0;
      intArray0[5] = 0;
      intArray0[6] = (int) (short) (-8);
      boolean boolean2 = ArrayUtils.contains(intArray0, 0);
      assertTrue(boolean2);
      assertEquals(7, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {1416, (-8), 0, (-1), 0, 0, (-8)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-15);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-15)}, byteArray0);
      
      Integer integer0 = new Integer((byte) (-20));
      assertEquals((-20), (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("ec9_YSZ^l?*%cB", (String) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((AbstractMap.SimpleEntry<Object, String>[]) null, (int)  (-15), abstractMap_SimpleEntry0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -15, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1065.7667683), (-1065.7667683));
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Character[] characterArray0 = new Character[7];
      char char0 = '-';
      Character character0 = Character.valueOf('-');
      assertEquals('-', (char)character0);
      assertNotNull(character0);
      
      characterArray0[1] = character0;
      Character character1 = new Character('-');
      assertEquals('-', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      
      characterArray0[2] = character1;
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Integer integer0 = new Integer(char0);
      assertEquals(45, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) characterArray0, (Object[]) characterArray0);
      assertNotNull(objectArray0);
      assertNotSame(characterArray0, objectArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(14, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Integer integer0 = new Integer((-126));
      assertEquals((-126), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, (boolean[]) null);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray2));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = ", Length: 0";
      stringArray0[1] = "";
      stringArray0[2] = "Caught a SecurityException reading the system property '";
      stringArray0[3] = ")#]Y$G";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(8, stringArray1.length);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)1;
      Double double0 = new Double((byte)1);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((byte)1);
      assertEquals(1.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, 242);
      assertEquals(0, int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(charArray0);
      assertFalse(boolean2);
      assertEquals(0, charArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = (float) (byte) (-10);
      floatArray0[4] = (float) (byte) (-10);
      floatArray0[5] = (float) (byte) (-10);
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-10.0F), 0.0F, (-10.0F), (-10.0F), 0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$^FNf";
      stringArray0[1] = "$^FNf";
      stringArray0[2] = "$^FNf";
      stringArray0[3] = "nx7gXUoDye0f/";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = ArrayUtils.indexOf((Object[]) stringArray1, (Object) "nx7gXUoDye0f/", (-515));
      assertEquals(3, int0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      boolean boolean0 = Character.isSurrogate('^');
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      boolean boolean1 = ArrayUtils.contains(longArray0, (long) '^');
      assertFalse(boolean1);
      assertEquals(1, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.addAll((long[]) null, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'java.lang.Object@7ceef173', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.indexOf(longArray0, 0L, (-2145919740));
      assertEquals(0, int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      double[] doubleArray0 = new double[6];
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean1);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)4930;
      shortArray0[1] = (short) (-199);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1822);
      shortArray0[4] = (short) (-940);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)4930, (short) (-199), (short) (-1), (short) (-1822), (short) (-940)}, shortArray0);
      assertArrayEquals(new short[] {(short)4930, (short) (-199), (short) (-1), (short) (-1822), (short) (-940), (short)4930, (short) (-199), (short) (-1), (short) (-1822), (short) (-940)}, shortArray1);
      
      Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Long long0 = new Long(43L);
      assertEquals(43L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-2966L));
      assertEquals((-2966L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(2255L);
      assertEquals(2255L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      Long long3 = new Long(0L);
      assertEquals(0L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      
      Long long4 = new Long((-2966L));
      assertEquals((-2966L), (long)long4);
      assertNotNull(long4);
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      
      Long long5 = new Long(0L);
      assertEquals(0L, (long)long5);
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long4));
      
      long long6 = Long.max(2255L, (short) (-1822));
      assertEquals(2255L, long6);
      
      Long[] longArray0 = new Long[3];
      longArray0[1] = long4;
      longArray0[2] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-640L));
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-640L), (-2966L), 0L}, longArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-940);
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short) (-199);
      intArray0[3] = (int) (short) (-199);
      intArray0[4] = (int) (short) (-199);
      intArray0[5] = (int) (short) (-940);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1), (-199));
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-940), (-1), (-199), (-199), (-199), (-940)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-8);
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-8), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-8), (short)0}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short) (-1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-8), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-8), (short)0, (short) (-1)}, shortArray2);
      
      Character character0 = Character.valueOf('p');
      assertEquals('p', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'p', 'p', 'p', 'p'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray1);
      
      short[] shortArray2 = new short[5];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (-1);
      shortArray2[1] = (short) (-1);
      shortArray2[2] = (short) (-1);
      shortArray2[3] = (short)3343;
      shortArray2[4] = (short) (-1);
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray2);
      assertFalse(boolean1);
      assertNotSame(shortArray0, shortArray2);
      assertSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(5, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short)3343, (short) (-1)}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Object[] objectArray0 = new Object[0];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray0 = new short[5];
      shortArray0[3] = (short)36;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)36, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)36, (short)0}, shortArray1);
      
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertTrue(boolean2);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)36, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)36, (short)0}, shortArray1);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray2.length);
      
      Long[] longArray0 = new Long[4];
      long long0 = 1L;
      Long long1 = new Long(1L);
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      Long long2 = Long.getLong("java.lang.Object", long1);
      assertEquals(1L, (long)long2);
      assertNotNull(long2);
      assertTrue(long1.equals((Object)long0));
      assertTrue(long2.equals((Object)long0));
      
      longArray0[0] = long2;
      Long long3 = new Long((short)36);
      assertEquals(36L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      
      longArray0[1] = long3;
      Long long4 = new Long(3036L);
      assertEquals(3036L, (long)long4);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      
      longArray0[2] = long4;
      Long long5 = new Long(long0);
      assertEquals(1L, (long)long5);
      assertNotNull(long5);
      assertTrue(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long2));
      
      longArray0[3] = long5;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((-3203.84525));
      assertEquals((-3203.8452F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[1] = float0;
      Float float1 = new Float((double) floatArray0[1]);
      assertEquals((-3203.8452F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals(3, floatArray0.length);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[2] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      Integer integer0 = new Integer((-1417));
      assertEquals((-1417), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Long long0 = new Long((-285L));
      assertEquals((-285L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-2358L));
      assertEquals((-2358L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long((-1417));
      assertEquals((-1417L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-117L));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-117L)}, longArray1);
      
      float[] floatArray2 = new float[1];
      floatArray2[0] = (-4613.0F);
      float[] floatArray3 = ArrayUtils.nullToEmpty(floatArray2);
      assertNotNull(floatArray3);
      assertSame(floatArray2, floatArray3);
      assertSame(floatArray3, floatArray2);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray3.length);
      assertArrayEquals(new float[] {(-4613.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-4613.0F)}, floatArray3, 0.01F);
      
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray2);
      assertSame(longArray2, longArray0);
      assertSame(longArray0, longArray2);
      assertEquals(1, longArray2.length);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = new char[1];
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      charArray0[3] = '9';
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 1}, intArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1);
      assertEquals(8, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'g', '\u0000', '\u0000', '9', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)125);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), 3192);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)125;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = (double) (byte)125;
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean1);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 125.0, 0.0, (-1.0), 125.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 2333.9, 720, 0.0);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 125.0, 0.0, (-1.0), 125.0}, doubleArray0, 0.01);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertTrue(boolean2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray0, (int) (byte)0, (byte)125);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)125, (byte)0, (byte)0, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)21;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)5, (byte)57, (byte)57, (byte)57, (byte)49, (byte)0, (byte)21}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)57, (byte)57, (byte)57, (byte)49, (byte)0, (byte)21, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)21;
      doubleArray0[1] = (double) (byte)5;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {21.0, 5.0}, doubleArray0, 0.01);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-127));
      assertEquals((-127), (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) doubleArray1, (Object) null);
      assertNotNull(objectArray0);
      assertNotSame(doubleArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {21.0, 5.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L, (-2145919740));
      assertEquals(0, int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2145919740);
      intArray0[1] = (-2145919740);
      intArray0[2] = (-2145919740);
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2145919740), (-2145919740), (-2145919740), 0}, intArray0);
      assertArrayEquals(new int[] {(-2145919740), (-2145919740), 0}, intArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'v'}, charArray0);
      assertArrayEquals(new char[] {'v', 'v'}, charArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 'v';
      Integer integer0 = new Integer(764);
      assertEquals(764, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 218.95;
      doubleArray1[1] = (double) 'v';
      doubleArray1[2] = (double) (-2145919740);
      doubleArray1[3] = (double) 764;
      doubleArray1[4] = (double) (-2145919740);
      doubleArray1[5] = (double) (-2145919740);
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, (double[]) null);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {218.95, 118.0, (-2.14591974E9), 764.0, (-2.14591974E9), (-2.14591974E9)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {218.95, 118.0, (-2.14591974E9), 764.0, (-2.14591974E9), (-2.14591974E9)}, doubleArray2, 0.01);
      
      int[] intArray2 = ArrayUtils.add(intArray1, 605);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray2.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2145919740), (-2145919740), (-2145919740), 0}, intArray0);
      assertArrayEquals(new int[] {(-2145919740), (-2145919740), 0, 605}, intArray2);
      assertArrayEquals(new int[] {(-2145919740), (-2145919740), 0}, intArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 605;
      floatArray0[2] = (float) 764;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2145919740), 605);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 605.0F, 764.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 605.0F, 764.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Short short0 = new Short((short)496);
      assertEquals((short)496, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)496);
      assertEquals((short)496, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (short)496;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (short)496;
      doubleArray0[6] = 1587.00199508253;
      doubleArray0[7] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 496.0, 0.0, 496.0, 1587.00199508253, 0.0}, doubleArray0, 0.01);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (short)496;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray1, doubleArray1);
      assertTrue(boolean1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {496.0}, doubleArray1, 0.01);
      
      Long[] longArray1 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray1);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {496.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isSurrogate('<');
      assertFalse(boolean0);
      
      char char0 = Character.highSurrogate(330);
      assertEquals('\uD7C0', char0);
      
      char char1 = Character.lowSurrogate(48);
      assertEquals('\uDC30', char1);
      assertFalse(char1 == char0);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      String string0 = Character.getName(0);
      assertEquals("NULL", string0);
      assertNotNull(string0);
      
      char char2 = Character.highSurrogate(330);
      assertEquals('\uD7C0', char2);
      assertFalse(char2 == char1);
      assertTrue(char2 == char0);
      
      characterArray0[0] = character0;
      Integer integer0 = new Integer(743);
      assertEquals(743, (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Short short0 = Short.valueOf((short)10);
      assertEquals((short)10, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)10);
      assertEquals((short)10, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-338L);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1233;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)10, (int) (short)10);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1233, (short)0}, shortArray0);
      
      ArrayUtils.reverse((Object[]) byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-338L)}, longArray1);
      assertArrayEquals(new long[] {(-338L)}, longArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength(longArray1, longArray1);
      assertTrue(boolean2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-338L)}, longArray1);
      assertArrayEquals(new long[] {(-338L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 358;
      intArray0[4] = 358;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, 87);
      assertEquals((-1), int0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {3, 3, 3, 358, 358, 0, 0}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-153), (-1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) shortArray0, (Object[]) null);
      assertNotNull(objectArray0);
      assertNotSame(shortArray0, objectArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1211L;
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Character character0 = Character.valueOf('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1041;
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Integer integer1 = new Integer(2123622718);
      assertEquals(2123622718, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((double[]) null);
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Float float0 = Float.valueOf(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-927.206187674));
      assertEquals((-927.2062F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = Float.min((byte) (-51), (byte) (-51));
      assertEquals((-51.0F), float2, 0.01F);
      
      Short short0 = new Short((byte) (-51));
      assertEquals((short) (-51), (short)short0);
      assertNotNull(short0);
      
      int int0 = Short.toUnsignedInt((byte)88);
      assertEquals(88, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1.0F;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      
      ArrayUtils.reverse(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 88;
      intArray0[1] = 88;
      intArray0[2] = (int) (byte)88;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1777), 88);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {88, 88, 88}, intArray0);
      assertArrayEquals(new int[] {88, 88, 88}, intArray1);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-1447);
      shortArray0[3] = (short)2;
      char[] charArray0 = new char[1];
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short) (-1447);
      intArray0[4] = (int) (short) (-1);
      intArray0[5] = 0;
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) stringArray0);
      assertNotNull(objectArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, objectArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Double double0 = new Double(2686.67978827795);
      assertEquals(2686.67978827795, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-677L));
      assertEquals((-677L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long((byte)0);
      assertEquals(0L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      
      int int0 = Long.compare((-1697L), (-677L));
      assertEquals((-1), int0);
      
      longArray0[3] = long2;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false}, booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 202.0F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)10;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (int) (byte)1);
      assertEquals(1, int1);
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)44, (byte) (-1), (byte)1, (byte)10}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertNotNull(map0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      long[] longArray0 = new long[1];
      short[] shortArray0 = new short[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 48, (int) (short) (-1));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) 48;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray1);
      assertEquals(1, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      long[] longArray0 = new long[1];
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.add((short[]) null, (short) (-1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(1, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1)}, shortArray2);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 48, (int) (short) (-1));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray1, 1669L, 48);
      assertEquals((-1), int1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray2 = new boolean[3];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray2);
      assertFalse(boolean1);
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray2));
      
      double[] doubleArray0 = new double[0];
      boolean boolean2 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertTrue(boolean2);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      char char0 = 'U';
      Character character0 = new Character('U');
      assertEquals('U', (char)character0);
      assertNotNull(character0);
      assertTrue(character0.equals((Object)char0));
      
      Character character1 = new Character('#');
      assertEquals('#', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = character0;
      characterArray0[2] = character1;
      characterArray0[4] = character1;
      characterArray0[5] = character1;
      characterArray0[7] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'U', 'U', '#', 'U', '#', '#', 'U', 'U'}, charArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[1] = char0;
      charArray1[2] = '/';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray1);
      assertTrue(boolean0);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', 'U', '/'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-60);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)103, (byte)42, (byte) (-60), (byte)0, (byte) (-1), (byte)125, (byte)64, (byte)0}, byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)42;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {42L}, longArray0);
      assertArrayEquals(new long[] {42L, 42L}, longArray1);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((byte)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      long long0 = Short.toUnsignedLong((short)1070);
      assertEquals(1070L, long0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      
      Double double0 = new Double((-421.743138003081));
      assertEquals((-421.743138003081), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1064.83856286328));
      assertEquals((-1064.83856286328), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) null, 570);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1));
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[2] = (long) 570;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 570;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, 570L, (-1L), 570L}, longArray0);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)104;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)81, (byte) (-104), (byte) (-1), (byte)13, (byte)110, (byte)2, (byte) (-1), (byte)104}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) (byte)0;
      doubleArray1[2] = (double) (byte)0;
      doubleArray1[3] = (double) (byte)0;
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Float float0 = Float.valueOf((float) (byte) (-51));
      assertEquals((-51.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min((byte) (-51), (byte) (-51));
      assertEquals((-51.0F), float1, 0.01F);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'c';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'U', 'U', 'c'}, charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(2656);
      assertEquals(2656, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = Integer.toUnsignedString((-1990));
      assertEquals("4294965306", string0);
      assertNotNull(string0);
      
      Byte byte0 = new Byte((byte)88);
      assertEquals((byte)88, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) characterArray0, (Object) float0);
      assertNotNull(objectArray0);
      assertNotSame(characterArray0, objectArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertArrayEquals(new char[] {'U', 'U', 'c'}, charArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'U';
      floatArray0[1] = (float) (-1990);
      floatArray0[2] = (-51.0F);
      floatArray0[3] = (float) 'U';
      floatArray0[4] = (float) 'c';
      floatArray0[5] = (float) 'c';
      floatArray0[6] = (float) 'c';
      floatArray0[7] = (float) 'c';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1932735283, (int) (byte)88);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {85.0F, (-1990.0F), (-51.0F), 85.0F, 99.0F, 99.0F, 99.0F, 99.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      double double0 = new Double(842.0604471200705);
      assertEquals(842.0604471200705, double0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, (Object[]) null);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)4;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)4, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray2);
      
      Float[] floatArray0 = null;
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)4;
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = 1834;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1834;
      doubleArray0[1] = (double) 1834;
      short short0 = (short)50;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((byte)4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(integer0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray1);
      assertFalse(boolean1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 333.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {333.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.vm.spec#fication.name";
      stringArray0[1] = "java.vm.spec#fication.name";
      String[] stringArray1 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {333.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {333.0F, 333.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 'z';
      floatArray2[1] = (float) 'z';
      floatArray2[2] = (float) 'z';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 333.0F;
      doubleArray0[1] = 412.922;
      doubleArray0[2] = (double) 122.0F;
      doubleArray0[3] = (double) 122.0F;
      doubleArray0[4] = (double) 122.0F;
      doubleArray0[5] = (double) 122.0F;
      doubleArray0[6] = (double) 122.0F;
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean1);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {333.0, 412.922, 122.0, 122.0, 122.0, 122.0, 122.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 1834, (-960), 0.0);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {333.0, 412.922, 122.0, 122.0, 122.0, 122.0, 122.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Double double0 = new Double(598.321398041);
      assertEquals(598.321398041, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = ArrayUtils.addAll((Object[]) shortArray0, objectArray0);
      assertNotNull(objectArray1);
      assertNotSame(shortArray0, objectArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 598.321398041;
      doubleArray0[1] = 598.321398041;
      boolean boolean0 = ArrayUtils.isSameType(598.321398041, 598.321398041);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Character character0 = Character.valueOf('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-23));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23)}, byteArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) '^');
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Character character0 = Character.valueOf('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isSurrogate('^');
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-23));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23)}, byteArray0);
      
      String string0 = ArrayUtils.toString((Object) "CrCl:;fcoAYm", "CrCl:;fcoAYm");
      assertEquals("CrCl:;fcoAYm", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 0.0);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '<';
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1);
      assertEquals(1, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {60L}, longArray0);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0}, byteArray0);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-88));
      assertTrue(boolean1);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0}, byteArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte) (-88));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean boolean2 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertTrue(boolean2);
      assertEquals(0, charArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean3 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean3);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0}, byteArray0);
      
      long[] longArray0 = new long[0];
      boolean boolean4 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean4);
      assertEquals(0, longArray0.length);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = 'l';
      charArray0[3] = '2';
      charArray0[4] = '2';
      charArray0[5] = 's';
      charArray0[6] = '2';
      charArray0[7] = '2';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 's', 2);
      assertEquals((-1), int0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'2', '2', 'l', '2', '2', 's', '2', '2'}, charArray0);
      
      Float float0 = new Float((double) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1.0));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((-1.0));
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float((float) 2);
      assertEquals(2.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      Float float4 = new Float((float) (-1));
      assertEquals((-1.0F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      
      Float float5 = new Float(0.0F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      
      Float float6 = new Float((-2.1459186951765854E9));
      assertEquals((-2.14591872E9F), (float)float6, 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      
      Float float7 = new Float((float) (-1));
      assertEquals((-1.0F), (float)float7, 0.01F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertEquals((float)float7, (float)float0, 0.01F);
      assertEquals((float)float7, (float)float4, 0.01F);
      assertEquals((float)float7, (float)float2, 0.01F);
      
      Float float8 = new Float(1.0);
      assertEquals(1.0F, (float)float8, 0.01F);
      assertNotNull(float8);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L, (-2145919781));
      assertEquals(0, int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2145919781);
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      Integer integer0 = new Integer((-2192));
      assertEquals((-2192), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(46);
      assertEquals(46, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = new Integer((-295));
      assertEquals((-295), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      Integer integer3 = new Integer(36);
      assertEquals(36, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = Integer.getInteger("CPMQYS:\"Qb`]_U+ns{u", (-2145919781));
      assertEquals((-2145919781), (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer integer5 = new Integer(512);
      assertEquals(512, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      
      integerArray0[3] = integer5;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2192), (-2192), (-2192), 512}, intArray1);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)979;
      ArrayUtils.reverse(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)979, (short)0, (short)2, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 333.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {333.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((String[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2145865823);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2145865823)}, intArray0);
      assertArrayEquals(new int[] {(-2145865823), (-2145865823)}, intArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-2145865823);
      longArray0[1] = (long) (-328);
      longArray0[2] = 646L;
      longArray0[3] = (long) (-2929);
      longArray0[4] = 2193L;
      longArray0[5] = (long) (-1101);
      longArray0[6] = (long) 85;
      longArray0[7] = (long) (-1101);
      boolean boolean2 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean2);
      assertEquals(8, longArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new long[] {(-2145865823L), (-328L), 646L, (-2929L), 2193L, (-1101L), 85L, (-1101L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Integer integer0 = new Integer(172);
      assertEquals(172, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, objectArray0[1]);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(15, objectArray0.length);
      assertEquals(14, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.indexOf(longArray0, 0L, (-2145919740));
      assertEquals(0, int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2145919740);
      intArray0[0] = (-2145919740);
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)57);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)57}, byteArray0);
      
      Character character0 = new Character('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf(' ');
      assertEquals(' ', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2452.5144F;
      floatArray0[1] = (float) (-2145919740);
      intArray0[0] = (int) '-';
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {2452.5144F, (-2.14591974E9F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer((-2500));
      assertEquals((-2500), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertFalse(boolean1);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)57}, byteArray0);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)57}, byteArray1);
      assertArrayEquals(new byte[] {(byte)57}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1338;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)1338;
      doubleArray0[2] = (double) (-664);
      doubleArray0[3] = (-1158.197067249375);
      doubleArray0[4] = (double) (short)1338;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-126.6326189), (int) (short)0);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1338.0, (-664.0), (-1158.197067249375), 1338.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short)1338;
      objectArray0[1] = (Object) (-1158.197067249375);
      objectArray0[2] = (Object) 1338.0;
      objectArray0[3] = (Object) (short)1338;
      objectArray0[4] = (Object) 1338.0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)52, 1442);
      assertEquals(0, int1);
      assertEquals(1, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)52}, byteArray0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 1442);
      assertNull(intArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = (Byte) (byte)52;
      byteArray1[1] = (Byte) (byte)52;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-26));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)52, (byte)52}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertArrayEquals(new char[] {'y', 'y'}, charArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = byte1;
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      boolean boolean2 = ArrayUtils.isSameType("", object0);
      assertFalse(boolean2);
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertFalse(boolean2 == boolean0);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean3 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean3);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      boolean boolean4 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean4);
      assertEquals(0, intArray0.length);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      char[] charArray0 = new char[13];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(13, charArray0.length);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = Character.isSurrogate('^');
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean1);
      assertEquals(1, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (long) '^');
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 94L}, longArray1);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      
      objectArray0[5] = object5;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'java.lang.Object@6bf16230', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-15);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-15)}, byteArray0);
      
      Integer integer0 = new Integer((byte) (-20));
      assertEquals((-20), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-15)}, byteArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      char char0 = Character.lowSurrogate(48);
      assertEquals('\uDC30', char0);
      
      String string0 = Character.getName(0);
      assertEquals("NULL", string0);
      assertNotNull(string0);
      
      long long0 = Long.divideUnsigned(48, (-677L));
      assertEquals(0L, long0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 520.269919;
      long[] longArray0 = new long[6];
      longArray0[0] = 2224L;
      longArray0[1] = 2224L;
      longArray0[2] = 493L;
      Boolean boolean0 = new Boolean("E7V{J]akNQjKuh7");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray1));
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = '1';
      charArray0[2] = '?';
      long[] longArray0 = new long[9];
      longArray0[0] = (-677L);
      longArray0[1] = (-677L);
      longArray0[2] = (long) '1';
      longArray0[3] = (long) '0';
      longArray0[2] = 493L;
      longArray0[5] = (long) '0';
      longArray0[6] = 2224L;
      longArray0[7] = (-677L);
      longArray0[8] = (-2626L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-3416), (-3416));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-677L), (-677L), 493L, 48L, 0L, 48L, 2224L, (-677L), (-2626L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.indexOf(longArray0, 26L, (-2435));
      assertEquals((-1), int0);
      assertNotSame(longArray0, longArray1);
      assertEquals(9, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-677L), (-677L), 493L, 48L, 0L, 48L, 2224L, (-677L), (-2626L)}, longArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new char[] {'0', '1', '?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      Double double0 = new Double((-993.40004482));
      assertEquals((-993.40004482), (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0.0F);
      assertEquals(5, int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray2 = ArrayUtils.removeElement(floatArray0, (-1875.0894F));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (-2146923964);
      intArray0[2] = (-153);
      intArray0[3] = (-411);
      int int0 = ArrayUtils.indexOf(intArray0, 2, (-5692));
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2, (-2146923964), (-153), (-411)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      longArray0[3] = (-1655L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1209, Integer.MAX_VALUE);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1L, 0L, 0L, (-1655L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, 0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray1, 2263L, 1209);
      assertEquals((-1), int1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {1L, 0L, 0L, (-1655L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = Double.isFinite((byte) (-15));
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short) (-2502);
      longArray0[1] = (long) (byte) (-15);
      longArray0[2] = (long) (byte) (-15);
      longArray0[3] = (long) (byte) (-15);
      longArray0[4] = (long) (byte) (-15);
      longArray0[5] = (long) (byte) (-15);
      boolean boolean2 = ArrayUtils.contains(longArray0, (-2502L));
      assertTrue(boolean2);
      assertEquals(6, longArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new long[] {(-2502L), (-15L), (-15L), (-15L), (-15L), (-15L)}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {(-2502L), (-15L), (-15L), (-15L), (-15L), (-15L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (short)0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(boolean1);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean2 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (-493);
      intArray0[2] = (-1557);
      intArray0[3] = (int) (short)0;
      intArray0[4] = 0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = 0;
      intArray0[7] = (int) (short)0;
      boolean boolean3 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean3);
      assertEquals(8, intArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertArrayEquals(new int[] {0, (-493), (-1557), 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean4 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean4);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean5 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean5);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals(1, int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      Character character0 = new Character('.');
      assertEquals('.', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('Y');
      assertEquals('Y', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = new Character('d');
      assertEquals('d', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, (-518), 305);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(0, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Short short0 = new Short((short)496);
      assertEquals((short)496, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)496);
      assertEquals((short)496, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short1;
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Short short2 = new Short((short) (-2812));
      assertEquals((short) (-2812), (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      float float0 = Float.max((short)496, (-0.29829717F));
      assertEquals(496.0F, float0, 0.01F);
      
      float float1 = Float.max((float) shortArray0[0], (-1737.7F));
      assertEquals(496.0F, float1, 0.01F);
      assertEquals(5, shortArray0.length);
      assertEquals(float1, float0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)shortArray0[0];
      longArray0[1] = (-1861L);
      longArray0[2] = (long) (short)1820;
      longArray0[3] = (long) (short) (-2812);
      longArray0[4] = (long) (short) (-1);
      longArray0[5] = (long) (short) (-2812);
      longArray0[6] = (long) (short) (-2812);
      longArray0[7] = (long) (short) (-1);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(16, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {496L, (-1861L), 1820L, (-2812L), (-1L), (-2812L), (-2812L), (-1L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) shortArray0, (Object[]) null);
      assertFalse(boolean0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray0 = new short[5];
      shortArray0[3] = (short)36;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)36, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)36, (short)0}, shortArray1);
      
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertTrue(boolean2);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)36, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)36, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      boolean[] booleanArray0 = new boolean[11];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(11, booleanArray0.length);
      assertEquals(11, booleanArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)0;
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 36, (-1));
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Character character0 = new Character('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isSurrogate('^');
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-23));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23)}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '<';
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte) (-23), Integer.MAX_VALUE);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {60.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {60.0}, doubleArray1, 0.01);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (int) (short)496, 647);
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[2] = 521.0914139114232;
      String string0 = Character.getName(0);
      assertEquals("NULL", string0);
      assertNotNull(string0);
      
      char char0 = Character.highSurrogate((-1086));
      assertEquals('\uD7BE', char0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('X');
      assertEquals('X', (char)character0);
      assertNotNull(character0);
      assertFalse(character0.equals((Object)char0));
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      
      int int0 = Integer.compareUnsigned((-337), (-12));
      assertEquals((-1), int0);
      
      int int1 = Integer.compareUnsigned(2147021556, 46);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0}, byteArray0);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray2);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.reverse((boolean[]) null);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-88);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte) (-15);
      shortArray0[3] = (short) (byte) (-88);
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean1);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-88), (short)0, (short)0, (short) (-88), (short)0}, shortArray0);
      
      Float[] floatArray1 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
      assertEquals(0, int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[11];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(11, booleanArray0.length);
      assertEquals(11, booleanArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      doubleArray0[1] = (double) (byte)0;
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 36, 0);
      assertEquals((-1), int1);
      assertEquals(8, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-1354L));
      assertEquals((-1354L), (long)long0);
      assertNotNull(long0);
      
      int int0 = Long.compareUnsigned((-1354L), (-1354L));
      assertEquals(0, int0);
      
      long long1 = Long.sum((-1546L), (-1546L));
      assertEquals((-3092L), long1);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-1354L)}, longArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = '4';
      charArray0[2] = '\u0083';
      charArray0[3] = '0';
      charArray0[4] = '~';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'S', '4', '\u0083', '0', '~'}, charArray0);
      assertArrayEquals(new char[] {'S', '4', '\u0083', '0', '~', 'S', '4', '\u0083', '0', '~'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1818.853897820745), (-664));
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean1);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 333.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {333.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[2];
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      
      boolean boolean2 = ArrayUtils.isNotEmpty(stringArray0);
      assertTrue(boolean2);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Boolean boolean3 = new Boolean("{}");
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      
      Boolean boolean4 = Boolean.valueOf(false);
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Character character0 = Character.valueOf('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Y";
      stringArray0[1] = "~{GHD1mIgcmIE=";
      stringArray0[2] = "Arguments cannot both be null";
      boolean boolean1 = ArrayUtils.isNotEmpty(stringArray0);
      assertTrue(boolean1);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Boolean boolean2 = new Boolean("/mQ8_Jglio] -n RW");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-497.5));
      assertEquals((-497.5), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-497.5));
      assertEquals((-497.5), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1.5);
      assertEquals(1.5, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-3892.0));
      assertEquals((-3892.0), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      double double4 = Double.max(1.5, 1.5);
      assertEquals(1.5, double4, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[1]);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-497.5), (-497.5), 1.5, (-3892.0)}, doubleArray1, 0.01);
      
      String string0 = ArrayUtils.toString((Object) null, "Arguments cannot both be null");
      assertEquals("Arguments cannot both be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-15);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-15)}, byteArray0);
      
      Integer integer0 = new Integer((byte) (-20));
      assertEquals((-20), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-15)}, byteArray0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean2);
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      boolean boolean3 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertTrue(boolean3);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-8);
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-8), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-8), (short)0}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short) (-1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-8), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-8), (short)0, (short) (-1)}, shortArray2);
      
      Integer integer0 = new Integer((short)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray3 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray3, shortArray2);
      assertSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray3.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-8), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-8), (short)0}, shortArray3);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Short short0 = new Short((short)1233);
      assertEquals((short)1233, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)14);
      assertEquals((short)14, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short)1233);
      assertEquals((short)1233, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short1;
      shortArray0[1] = short2;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short2;
      shortArray0[5] = short2;
      int int0 = Short.compare((short) (-41), (short)14);
      assertEquals((-55), int0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)64);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)14, (short)1233, (short)1233, (short)1233, (short)1233, (short)1233}, shortArray1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'q');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = '<';
      Character character0 = Character.valueOf('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isSurrogate('<');
      assertFalse(boolean0);
      
      char char1 = Character.lowSurrogate(48);
      assertEquals('\uDC30', char1);
      assertFalse(char1 == char0);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      String string0 = Character.getName(0);
      assertEquals("NULL", string0);
      assertNotNull(string0);
      
      char char2 = Character.highSurrogate((-337));
      assertEquals('\uD7BF', char2);
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      
      characterArray0[0] = character0;
      Integer integer0 = new Integer(743);
      assertEquals(743, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) char0;
      doubleArray1[2] = (double) '<';
      boolean boolean2 = ArrayUtils.isSameLength((double[]) null, doubleArray1);
      assertFalse(boolean2);
      assertEquals(3, doubleArray1.length);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new double[] {0.0, 60.0, 60.0}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[28];
      charArray0[0] = char0;
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      charArray0[6] = '<';
      charArray0[7] = '<';
      charArray0[8] = char0;
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'<'}, charArray1);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) 48);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Integer[] integerArray0 = new Integer[6];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, 242);
      assertEquals(0, int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) null, 0);
      assertEquals(0, int1);
      assertEquals(6, integerArray0.length);
      assertTrue(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) booleanArray1, 1559, (int) 0);
      assertNotNull(objectArray0);
      assertNotSame(booleanArray1, objectArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(0, objectArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 242;
      int int2 = ArrayUtils.indexOf(doubleArray0, 46.0, 0, (double) 1559);
      assertEquals(0, int2);
      assertEquals(2, doubleArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new double[] {0.0, 242.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(111.0);
      assertEquals(111.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) 242);
      assertEquals(242.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) floatArray0[2]);
      assertEquals(242.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals(4, floatArray0.length);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      
      floatArray0[3] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 111.0F, 242.0F, 242.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      long[] longArray0 = new long[18];
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(18, longArray0.length);
      
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) '\\', (int) '\\');
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      charArray0[1] = ',';
      charArray0[2] = 'K';
      charArray0[3] = 'k';
      charArray0[4] = '\\';
      charArray0[5] = 'Q';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'p', ',', 'K', 'k', '\\', 'Q'}, charArray0);
      assertArrayEquals(new char[] {'p', ',', 'K', 'k', '\\', 'Q'}, charArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) ',';
      longArray0[1] = (long) '\\';
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {92L, 44L}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) ',';
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 44L, (-3296));
      assertEquals(0, int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {44.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2179;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)3185;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)2735;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)2179, (short) (-1), (short)3185, (short)1, (short)2735}, shortArray0);
      assertArrayEquals(new short[] {(short)2179, (short) (-1), (short)3185, (short)1, (short)2735}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      String string0 = ArrayUtils.toString((Object) "AZ_^^rC7}?Sf2tY!S");
      assertEquals("AZ_^^rC7}?Sf2tY!S", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'K');
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(7, int1);
      assertEquals(8, booleanArray0.length);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, false}, booleanArray0));
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(0.0);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      floatArray0[2] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[2]);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = '4';
      charArray0[2] = 'E';
      ArrayUtils.reverse(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'E', '4', ','}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-82.0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) '\u0000';
      characterArray0[1] = (Character) 'E';
      characterArray0[2] = (Character) '\u0000';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      
      Long long0 = new Long(514L);
      assertEquals(514L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(514L);
      assertEquals(514L, (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      Long long2 = new Long(514L);
      assertEquals(514L, (long)long2);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {514L}, longArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, 1L}, longArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = 'x';
      charArray0[2] = 'd';
      charArray0[3] = '0';
      charArray0[4] = '#';
      charArray0[5] = 'K';
      charArray0[6] = ')';
      charArray0[7] = 'K';
      boolean boolean1 = ArrayUtils.contains(charArray0, '0');
      assertTrue(boolean1);
      assertEquals(8, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'h', 'x', 'd', '0', '#', 'K', ')', 'K'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      float float0 = Float.max((-4613.0F), (short)0);
      assertEquals(0.0F, float0, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-4613.0F);
      doubleArray0[2] = (double) (-4613.0F);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-385.99188);
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = 1372.188657;
      doubleArray0[8] = (double) (-4613.0F);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-4613.0), 0.0);
      assertEquals(8, int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-4613.0), (-4613.0), 0.0, (-1.0), (-385.99188), 0.0, 1372.188657, (-4613.0)}, doubleArray0, 0.01);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      short[] shortArray3 = ArrayUtils.add(shortArray0, (short) (-596));
      assertNotNull(shortArray3);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray3, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray3.length);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-596)}, shortArray3);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 1372.188657, (double) 0.0F);
      assertEquals(7, int1);
      assertEquals(9, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, (-4613.0), (-4613.0), 0.0, (-1.0), (-385.99188), 0.0, 1372.188657, (-4613.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Character character0 = Character.valueOf('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((double[]) null);
      ArrayUtils.reverse((Object[]) stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Short[] shortArray0 = null;
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)798;
      shortArray0[1] = (short) (-3746);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 960.9);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1655L);
      longArray0[1] = (long) (short) (-3746);
      longArray0[2] = (long) (short) (-3746);
      longArray0[3] = 0L;
      longArray0[4] = (long) (short)798;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0L, 3716.620044);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      boolean boolean0 = Character.isSurrogate('^');
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean1);
      assertEquals(2, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      short[] shortArray0 = new short[8];
      boolean boolean2 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean2);
      assertEquals(2, longArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (byte)15;
      doubleArray1[2] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) (byte)15;
      doubleArray1[4] = 0.0;
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, (-1978.758236949));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {15.0, 0.0, 0.0, 15.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {15.0, 0.0, 0.0, 15.0, 0.0, (-1978.758236949)}, doubleArray2, 0.01);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)15;
      shortArray0[1] = (short) (byte)15;
      shortArray0[2] = (short) (byte)15;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte)15, (-1378));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)15, (short)15, (short)15}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 520.269919;
      long[] longArray0 = new long[6];
      longArray0[0] = 2224L;
      longArray0[1] = 2224L;
      longArray0[2] = 493L;
      longArray0[3] = (-677L);
      longArray0[4] = 493L;
      longArray0[5] = 493L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2224L, 2224L, 493L, (-677L), 493L, 493L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.indexOf(longArray1, (-677L), 0);
      assertEquals((-1), int0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2224L, 2224L, 493L, (-677L), 493L, 493L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int1 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_LONG_ARRAY, 493L, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2224L, 2224L, 493L, (-677L), 493L, 493L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = '}';
      charArray0[2] = 'Q';
      charArray0[3] = '$';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) '$', 2513);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'o', '}', 'Q', '$'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'o';
      doubleArray0[1] = (double) 'o';
      doubleArray0[2] = (double) '}';
      doubleArray0[3] = (double) '$';
      doubleArray0[4] = (double) 2513;
      doubleArray0[5] = (double) '$';
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-520.0739), (-520.0739));
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {111.0, 111.0, 125.0, 36.0, 2513.0, 36.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      long[] longArray0 = new long[1];
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) "", "CrCl:;fcoAYm");
      assertEquals("", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 563.379);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(doubleArray0, doubleArray2);
      assertSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)4630;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)4630, (-1989));
      assertEquals(0, int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)4630, (short)0}, shortArray0);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertEquals(7, objectArray1.length);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-921L);
      ArrayUtils.reverse(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-921L)}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-921L)}, longArray0);
      
      Character[] characterArray0 = new Character[6];
      char char0 = '0';
      Character character0 = new Character('0');
      assertEquals('0', (char)character0);
      assertNotNull(character0);
      assertTrue(character0.equals((Object)char0));
      
      characterArray0[0] = character0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 1523, 517);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      int int2 = ArrayUtils.indexOf((byte[]) null, (byte)64, 1523);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      Float[] floatArray1 = new Float[7];
      floatArray1[0] = (Float) (-1.0F);
      floatArray1[1] = (Float) (-1.0F);
      Float float0 = new Float((double) char0);
      assertEquals(48.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[2] = float0;
      floatArray1[3] = (Float) (-1.0F);
      floatArray1[4] = floatArray1[0];
      floatArray1[6] = (Float) (-1.0F);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) floatArray1[4]);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(7, floatArray2.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 48.0F, (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1372.188657, (double) (byte)0);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short)0);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1574.0), (double) (-1));
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Float float0 = Float.valueOf(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-927.206187674));
      assertEquals((-927.2062F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = Float.min((byte) (-51), (byte) (-51));
      assertEquals((-51.0F), float2, 0.01F);
      
      Short short0 = new Short((byte) (-51));
      assertEquals((short) (-51), (short)short0);
      assertNotNull(short0);
      
      int int0 = Short.toUnsignedInt((byte)88);
      assertEquals(88, int0);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte) (-51));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-51)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((long[]) null);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-3269);
      floatArray0[1] = (float) '\\';
      floatArray0[2] = (float) (-3269);
      floatArray0[3] = (float) (-3316);
      floatArray0[4] = (float) '\\';
      floatArray0[5] = (float) (-3269);
      int int0 = ArrayUtils.indexOf(floatArray0, (-581.1818F), (-4566));
      assertEquals((-1), int0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-3269.0F), 92.0F, (-3269.0F), (-3316.0F), 92.0F, (-3269.0F)}, floatArray0, 0.01F);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 202.0F);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-59), (int) (byte) (-59));
      assertEquals((-1), int1);
      assertEquals(0, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(921);
      assertEquals(921, (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray0 = new short[20];
      shortArray0[0] = (short) (byte) (-7);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(20, shortArray0.length);
      assertEquals(20, shortArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean1);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(doubleArray0);
      assertNotNull(map0);
      assertEquals(0, doubleArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), (-1));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (-1));
      assertEquals((-1), int0);
      
      long[] longArray2 = ArrayUtils.addAll(longArray1, longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 48;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {48.0, (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {48.0, (-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)57;
      shortArray0[1] = (short)57;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)57, (int) (short)4630);
      assertEquals((-1), int1);
      assertEquals(2, shortArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short)57, (short)57}, shortArray0);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(7, objectArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 64, (-1));
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Character character0 = new Character('N');
      assertEquals('N', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-8);
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-8), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-8), (short)0}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short) (-1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-8), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-8), (short)0, (short) (-1)}, shortArray2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-8);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 3);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-8L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-8L), 0L, 0L}, longArray1);
      
      Integer integer0 = new Integer((-2146053898));
      assertEquals((-2146053898), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray1);
      assertEquals(4, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-8L), 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1043.76F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-173.62F);
      floatArray0[5] = 111.32349F;
      floatArray0[6] = (-3296.0F);
      floatArray0[7] = (-1.0F);
      ArrayUtils.reverse(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-3296.0F), 111.32349F, (-173.62F), 1.0F, 1.0F, 1043.76F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-39);
      Boolean boolean0 = new Boolean("DNy*c)@7]DkJe@");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[9];
      boolean boolean1 = Boolean.logicalXor(false, true);
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      booleanArray0[6] = boolean0;
      booleanArray0[7] = boolean0;
      booleanArray0[8] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray1));
      
      Integer integer0 = new Integer(1885);
      assertEquals(1885, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = Integer.getInteger("DNy*c)@7]DkJe@", 64);
      assertEquals(64, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[2] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[6] = integer2;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1784);
      assertNotNull(intArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {1885, 1885, 1885, 1784, 1885, 1885, 1, 1885, 1885}, intArray0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 10;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)19);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)19}, byteArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-3504), (-2147449956));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)19}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Integer integer0 = new Integer((byte)19);
      assertEquals(19, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)19}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Character character0 = Character.valueOf('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isSurrogate('^');
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-23));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23)}, byteArray0);
      
      String string0 = ArrayUtils.toString((Object) "CrCl:;fcoAYm", "CrCl:;fcoAYm");
      assertEquals("CrCl:;fcoAYm", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 0.0);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '<';
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1);
      assertEquals(1, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {60L}, longArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2585;
      shortArray0[1] = (short) (byte) (-23);
      shortArray0[2] = (short)2348;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte) (-23), (int) (short)2585);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2585, (short) (-23), (short)2348}, shortArray0);
      assertArrayEquals(new short[] {(short)2585, (short) (-23), (short)2348}, shortArray1);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) (byte) (-23));
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-23);
      longArray0[1] = (long) (byte) (-23);
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-23L), (-23L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2038.6;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      float float0 = Float.max(0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Integer integer0 = Integer.valueOf((-2682));
      assertEquals((-2682), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer integer2 = new Integer((int) integerArray0[2]);
      assertEquals((-2682), (int)integer2);
      assertNotNull(integer2);
      assertEquals(7, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[5] = integer2;
      integerArray0[6] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[4]);
      assertNotNull(intArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, (-2682), (-2682), (-2682), (-2682), (-2682), (-2682)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[3];
      intArray0[0] = (-2145919740);
      intArray0[0] = (-2145919740);
      Character character0 = new Character('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf(' ');
      assertEquals(' ', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Long long0 = new Long(2589L);
      assertEquals(2589L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((byte)57);
      assertEquals(57L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long((byte)57);
      assertEquals(57L, (long)long2);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      Long[] longArray1 = new Long[5];
      longArray1[0] = long2;
      longArray1[1] = long1;
      longArray1[4] = long2;
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      boolean boolean1 = Boolean.logicalAnd(true, false);
      assertFalse(boolean1);
      
      int int1 = Boolean.compare((boolean) boolean0, true);
      assertEquals((-1), int1);
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(int1 == int0);
      
      Boolean boolean2 = new Boolean((boolean) boolean0);
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      int int2 = Boolean.compare(false, (boolean) boolean0);
      assertEquals(0, int2);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      booleanArray0[1] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean boolean3 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertTrue(boolean3);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean3 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int3 = ArrayUtils.indexOf((Object[]) booleanArray0, (Object) boolean2, 0);
      assertEquals(0, int3);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean3));
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean2.equals((Object)boolean3));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertEquals(4, booleanArray2.length);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean3));
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-897));
      assertEquals((-897), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int2));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int1));
      
      integerArray0[1] = integer1;
      try { 
        Integer.valueOf("F)cZ$MYn6$T'V", (-1941));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1941 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-8);
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short) (-12));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-8), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-12), (short) (-8), (short)0}, shortArray1);
      
      double[] doubleArray0 = new double[6];
      shortArray1[2] = (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (short) (-12);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-12.0)}, doubleArray0, 0.01);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertTrue(boolean1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '\\');
      assertNull(charArray0);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray2.length);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-12), (short) (-8), (short)0}, shortArray2);
      assertArrayEquals(new short[] {(short) (-8), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-12), (short) (-8), (short)0}, shortArray1);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-12.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      
      String[] stringArray0 = new String[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(stringArray0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Boolean boolean2 = new Boolean("/mQ8_Jglio] -n RW");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      Boolean[] booleanArray1 = new Boolean[1];
      booleanArray1[0] = boolean2;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(stringArray0, 1192, "java.lang.Boolean");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1192, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Double double0 = new Double(3012.7734);
      assertEquals(3012.7734, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-92.26011629));
      assertEquals((-92.26011629), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-92.26011629));
      assertEquals((-92.26011629), (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = 'O';
      charArray0[2] = '(';
      charArray0[3] = 'D';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {',', 'O', '(', 'D'}, charArray0);
      assertArrayEquals(new char[] {',', 'O', '(', 'D', ',', 'O', '(', 'D'}, charArray1);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {',', 'O', '(', 'D'}, charArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)4126;
      shortArray0[1] = (short) (-518);
      shortArray0[2] = (short) (-518);
      shortArray0[3] = (short)1637;
      shortArray0[4] = (short)4126;
      shortArray0[5] = (short)57;
      shortArray0[6] = (short)2;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)4126, (short) (-518), (short) (-518), (short)1637, (short)4126, (short)57, (short)2}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Double double0 = new Double(2686.67978827795);
      assertEquals(2686.67978827795, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-677L));
      assertEquals((-677L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long((byte)0);
      assertEquals(0L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      
      longArray0[3] = long2;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.indexOf(longArray0, 0L, (-2145919765));
      assertEquals(0, int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2145919765);
      intArray0[1] = (-2145919765);
      intArray0[2] = (-2145919765);
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2145919765), (-2145919765), (-2145919765), 0}, intArray0);
      assertArrayEquals(new int[] {(-2145919765), (-2145919765), 0}, intArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'v'}, charArray0);
      assertArrayEquals(new char[] {'v', 'v'}, charArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 'v';
      Integer integer0 = new Integer(764);
      assertEquals(764, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 218.95;
      doubleArray1[1] = (double) 'v';
      doubleArray1[2] = (double) (-2145919765);
      doubleArray1[3] = (double) 764;
      doubleArray1[4] = (double) (-2145919765);
      doubleArray1[5] = (double) (-2145919765);
      int[] intArray2 = ArrayUtils.add(intArray1, 605);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray2.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2145919765), (-2145919765), (-2145919765), 0}, intArray0);
      assertArrayEquals(new int[] {(-2145919765), (-2145919765), 0, 605}, intArray2);
      assertArrayEquals(new int[] {(-2145919765), (-2145919765), 0}, intArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) 605;
      floatArray0[2] = (float) 764;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      int[] intArray0 = null;
      int[] intArray1 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray1);
      assertTrue(boolean0);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) shortArray0, (Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertNotSame(shortArray0, objectArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 637.912421448922;
      boolean boolean2 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean2);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new double[] {637.912421448922}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = 'Q';
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)874;
      shortArray0[1] = (short)1361;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short) (-80);
      shortArray0[4] = (short)2916;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2916, (int) (short)874);
      assertEquals(4, int0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)874, (short)1361, (short)8, (short) (-80), (short)2916}, shortArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)1361;
      intArray0[1] = (int) (short)874;
      intArray0[2] = (int) (short) (-80);
      intArray0[3] = (int) (short) (-80);
      intArray0[4] = (int) (short)874;
      intArray0[5] = (int) (short)2916;
      intArray0[7] = (int) (short)8;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) 'Q');
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1361, 874, (-80), (-80), 874, 2916, 0, 8}, intArray1);
      assertArrayEquals(new int[] {1361, 874, (-80), (-80), 874, 2916, 0, 8}, intArray0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object1));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 1.0);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[10];
      floatArray0[7] = 0.0F;
      floatArray0[1] = (-9.807767F);
      floatArray0[2] = (-1130.2538F);
      floatArray0[3] = (float) (short) (-1993);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-169.69989F);
      floatArray0[6] = (-1130.2538F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 564, (-1101));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(10, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-9.807767F), (-1130.2538F), (-1993.0F), 0.0F, (-169.69989F), (-1130.2538F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      Map<Object, Object> map1 = ArrayUtils.toMap((Object[]) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Short[] shortArray0 = new Short[0];
      Double double0 = new Double((-520.0739));
      assertEquals((-520.0739), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1212.58112));
      assertEquals((-1212.58112), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double2 = Double.min((-1212.58112), (-1212.58112));
      assertEquals((-1212.58112), double2, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) shortArray0, (Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertNotSame(shortArray0, objectArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, objectArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertNotSame(shortArray0, objectArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, objectArray0.length);
      assertFalse(shortArray0.equals((Object)objectArray0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = '4';
      charArray0[2] = ',';
      charArray0[3] = '-';
      charArray0[4] = '*';
      ArrayUtils.removeElement(charArray0, ',');
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '4';
      floatArray0[1] = (float) ',';
      floatArray0[2] = (float) '4';
      floatArray0[3] = (float) ',';
      floatArray0[4] = (float) '-';
      ArrayUtils.lastIndexOf(floatArray0, 52.0F, (-925));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) ',';
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {45.0F, 44.0F, 52.0F, 44.0F, 52.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)64, 1669);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertEquals(0, int0);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\\');
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      shortArray0[0] = short1;
      Short short2 = new Short((short)0);
      shortArray0[1] = short2;
      Short short3 = new Short((short)496);
      shortArray0[2] = short3;
      Short short4 = new Short((short)0);
      shortArray0[3] = short4;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      short[] shortArray2 = new short[3];
      Short.toUnsignedLong((short) shortArray0[2]);
      assertSame(shortArray0, shortArray1);
      
      shortArray2[0] = (short)0;
      Short.toUnsignedLong(short0);
      shortArray2[1] = (short) shortArray0[2];
      shortArray2[2] = short0;
      boolean boolean0 = ArrayUtils.contains(shortArray2, (short)496);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)100);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) short0;
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) (byte) (-1);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 2061.0F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-1.0F), 2061.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)64;
      ArrayUtils.indexOf(shortArray0, (short)2192);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)64;
      intArray0[2] = (int) (short)2192;
      intArray0[4] = (int) (short)1;
      intArray0[5] = (int) (short)64;
      intArray0[6] = 1625;
      intArray0[7] = (int) (short)64;
      ArrayUtils.lastIndexOf(intArray0, 64, 0);
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 520.269919;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1392.8241F;
      floatArray0[1] = (float) 0L;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(46);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(46);
      Integer.getInteger("", (-2036));
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer2;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      ArrayUtils.isEmpty((boolean[]) null);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-8);
      shortArray0[1] = (short)0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      Double double0 = new Double(423.3541601);
      Double double1 = new Double((-993.40004482));
      ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-8));
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (int) (short) (-8), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -8, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Short[] shortArray0 = new Short[5];
      Double double0 = new Double((-521.1103070696277));
      long[] longArray0 = new long[0];
      ArrayUtils.isSameLength(longArray0, (long[]) null);
      Double.min(2520.5, 1.5);
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) shortArray0, (Object[]) shortArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      Integer integer0 = new Integer(1);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short)36;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)0);
      assertTrue(boolean1 == boolean0);
      
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotSame(byteArray2, byteArray1);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(14, floatArray1.length);
      
      ArrayUtils.toPrimitive((Short[]) null, (short) (-2007));
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(7, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      ArrayUtils.nullToEmpty((char[]) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (-312.89);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1;
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1372.188657, 0.0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-619);
      shortArray0[1] = (short)1910;
      shortArray0[2] = (short) (-962);
      shortArray0[3] = (short)1967;
      shortArray0[4] = (short) (-20);
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short) (-619), (short)1910, (short) (-962), (short)1967, (short) (-20), (short)0, (short)0}, shortArray1);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-619);
      floatArray0[1] = (float) (short) (-20);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      Byte byte0 = new Byte((byte)0);
      byteArray0[0] = byte0;
      byte byte1 = (byte)125;
      Byte byte2 = new Byte((byte)125);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte1);
      byteArray0[2] = byte3;
      byte byte4 = (byte)2;
      Byte byte5 = new Byte((byte)2);
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte1);
      byteArray0[4] = byte6;
      long[] longArray0 = new long[3];
      Byte.toUnsignedInt((byte)115);
      longArray0[0] = (long) byte1;
      Byte.toUnsignedInt((byte)116);
      longArray0[1] = 437L;
      longArray0[2] = (long) byte1;
      ArrayUtils.nullToEmpty(longArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 437L;
      doubleArray0[2] = (double) byte4;
      doubleArray0[3] = (double) (byte)125;
      doubleArray0[4] = (double) 115;
      doubleArray0[5] = (double) 437L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 116, 437.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 116, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      short[] shortArray0 = new short[1];
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-2145919781);
      longArray0[1] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      ArrayUtils.indexOf(longArray0, 0L, 13);
      int[] intArray0 = new int[3];
      intArray0[0] = 13;
      intArray0[1] = 13;
      intArray0[2] = 13;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      ArrayUtils.toObject((short[]) null);
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-2014));
      assertArrayEquals(new short[] {(short)0, (short) (-2014)}, shortArray1);
      
      ArrayUtils.subarray((long[]) null, 2145584825, 2145584825);
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, 2145584825);
      int int1 = ArrayUtils.lastIndexOf((long[]) null, (long) 1, (int) (short) (-2014));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) characterArray0, (Object[]) characterArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Character.valueOf('<');
      Character.isSurrogate('^');
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-23));
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-23)}, byteArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 0.0);
      assertNull(doubleArray0);
      
      ArrayUtils.nullToEmpty((double[]) null);
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      ArrayUtils.clone((int[]) null);
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      long[] longArray0 = new long[1];
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      
      ArrayUtils.reverse(longArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '\\';
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (-3296), (-3296));
      assertEquals((-1), int0);
      
      ArrayUtils.nullToEmpty((short[]) null);
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short) (-1), (int) (short) (-1));
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, 1);
      int int1 = ArrayUtils.lastIndexOf(longArray1, (long) (short) (-1), 48);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 520.269919;
      long[] longArray0 = new long[6];
      longArray0[0] = 2224L;
      longArray0[1] = 2224L;
      longArray0[2] = 493L;
      longArray0[3] = (-677L);
      longArray0[4] = 493L;
      longArray0[5] = 493L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
      ArrayUtils.indexOf(longArray1, (-677L), 0);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      char[] charArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertArrayEquals(new char[] {}, charArray0);
  }
}

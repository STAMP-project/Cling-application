/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 00:30:17 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_FLOAT_ARRAY, (int) '*');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 42, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[4];
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'o');
      assertArrayEquals(new char[] {'o', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, 0, (double) 0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) arrayUtils0.EMPTY_STRING_ARRAY, 48, (Object) arrayUtils0.INDEX_NOT_FOUND);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, 0, (long) 48);
      assertArrayEquals(new long[] {48L}, longArray0);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, 538, (Object) "java.lang.Integer");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 538, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) arrayUtils0.EMPTY_STRING_ARRAY, (-1), object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, (int) 0, objectArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((AbstractMap.SimpleEntry<Object, Object>[]) null, (AbstractMap.SimpleEntry<Object, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      String[] stringArray0 = ArrayUtils.add(arrayUtils0.EMPTY_STRING_ARRAY, "java.lang.Integer");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.add((String[]) null, "Cannot store ");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_LONG_ARRAY, (long[]) null);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(12, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.addAll((int[]) null, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, (int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, (short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, (byte[]) null);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[4];
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertNotNull(charArray1);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object[] objectArray0 = new Object[15];
      objectArray0[1] = (Object) arrayUtils0;
      // Undeclared exception!
      try { 
        ArrayUtils.addAll((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot store java.lang.Object in an array of java.lang.Byte
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, (Object[]) null);
      assertNotNull(objectArray1);
      assertEquals(1, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.addAll((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      short[] shortArray0 = new short[9];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[5];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long[] longArray0 = new long[8];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[5];
      boolean boolean0 = ArrayUtils.isNotEmpty(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_STRING_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      short[] shortArray0 = new short[5];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_CLASS_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[13];
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(13, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Boolean[] booleanArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = new Boolean("~DO%N");
      booleanArray0[0] = boolean0;
      booleanArray0[1] = booleanArray0[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) booleanArray0[1]);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, true);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean(true);
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (float) (-1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 3231.788F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(0.0);
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[1]);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(4166.93);
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {4166.93F, 4166.93F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1.0));
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (-1.0));
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 1.5);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Double double0 = new Double((-1L));
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Byte[] byteArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)124);
      assertArrayEquals(new byte[] {(byte)1}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (byte) (-110));
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)85);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-86));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-86), (byte) (-86), (byte) (-86)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = (Byte) (byte)0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      short[] shortArray0 = new short[8];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Short[] shortArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)2);
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)2);
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)947);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (short)947);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Short short0 = new Short((short) (-2223));
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      shortArray0[1] = (Short) (short)0;
      shortArray0[2] = short0;
      shortArray0[3] = (Short) (short)0;
      shortArray0[4] = (Short) (short)0;
      shortArray0[5] = (Short) (short)0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short) (-2223), (short)0, (short) (-2223), (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[3];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer[] integerArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-570));
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 7);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(828);
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertArrayEquals(new int[] {828, 828, 828, 828}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(1712);
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      integerArray0[2] = integerArray0[1];
      integerArray0[3] = integerArray0[0];
      integerArray0[4] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {1712, 1712, 1712, 1712, 1712}, intArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((byte)100);
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2940L));
      assertArrayEquals(new long[] {100L, (-2940L), (-2940L), (-2940L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1520L);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-1515L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long[] longArray0 = new long[2];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertEquals(2, longArray2.length);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[7];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(7, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      char char0 = '/';
      Character character0 = Character.valueOf('/');
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertArrayEquals(new char[] {'/', '/', '/', '/', '/', '/'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'q');
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '0');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Character character0 = new Character('f');
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false, 293);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Short short0 = new Short((short) (-1841));
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (int) short0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 4587.2485F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 4587.2485F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1739.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      float[] floatArray0 = new float[3];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 813);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      float[] floatArray0 = new float[8];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (-1), 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      float[] floatArray0 = new float[6];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2616.9404F, (-4091));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1), 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.indexOf(floatArray0, 2.14748365E9F, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, (double) 367);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (short) (-1);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short) (-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-464.689170666585));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 3711.85286018057;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2, (-464.689170666585));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), (-1), (-497.400796));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[26];
      doubleArray0[4] = (double) 786;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 786, (int) (short)1423);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 551.0399F, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-23.06), (-2146666971));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1890.3384348, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-849.0), (int) (byte)0, (-479.887));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.indexOf(doubleArray0, 864.48542249, (int) (short) (-2397), 651.6147644432847);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (byte)48, (double) (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = ArrayUtils.indexOf(doubleArray0, 2283.0, (-2229));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)52);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-65);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-65), (int) (short)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-65), (int) (short)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)3, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)13, (int) (byte)13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-17);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1), (int) (short) (-3022));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      boolean boolean0 = ArrayUtils.contains(charArray0, '\'');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = ArrayUtils.contains(charArray0, '`');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '[', 402);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = ArrayUtils.lastIndexOf(charArray0, ')', (int) (short)1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'H', (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '5', (-1296));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '9');
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = ArrayUtils.indexOf(charArray0, '9', (-640));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      short[] shortArray0 = new short[4];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)57);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      short[] shortArray0 = new short[9];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1015, (int) (short)1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      short[] shortArray0 = new short[8];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-442), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)2, (int) (short)2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1097);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1097));
      assertArrayEquals(new short[] {(short) (-1097), (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      short[] shortArray0 = new short[5];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)15382, (-1851));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '7';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (short) (-2628), (-2722));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 368);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = ArrayUtils.indexOf(intArray0, 15, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-1);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (byte) (-110));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      long[] longArray0 = new long[4];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-469L), 64);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      long[] longArray0 = new long[4];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 3);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2027L), (int) (byte) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-396L), Integer.MAX_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 41L);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      long[] longArray0 = new long[8];
      int int0 = ArrayUtils.indexOf(longArray0, 0L, (-493));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 3022L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[3]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "cUEtcQ[%/Zit";
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      int int0 = ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Integer integer0 = new Integer((-1));
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, (-88));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) arrayUtils0;
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, objectArray0[2]);
      assertEquals(2, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, (Object) "Windows NT");
      assertEquals(8, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) arrayUtils0;
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, objectArray0[2]);
      assertEquals(2, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      String[] stringArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_STRING_ARRAY, (Object) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.indexOf((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Object) arrayUtils0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      float[] floatArray0 = new float[2];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      char[] charArray0 = new char[4];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      short[] shortArray0 = new short[3];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      int[] intArray0 = new int[5];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.isSameType(arrayUtils0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(arrayUtils0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, arrayUtils0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = new boolean[3];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[6];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = new char[5];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = new short[3];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      short[] shortArray0 = new short[6];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, arrayUtils0.EMPTY_INT_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      int[] intArray0 = new int[5];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = new long[22];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      long[] longArray0 = new long[8];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      long[] longArray0 = new long[7];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object[] objectArray0 = new Object[5];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) booleanArray0, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, (Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), Integer.MAX_VALUE);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1047, 1047);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (int) (byte) (-49), 1402);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 1047);
      assertEquals(9, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (int) (byte) (-77), (int) (byte) (-77));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), (-1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3200), 8);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, 309, 309);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 402, (-1024));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-1296), (-1));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2223), 1);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BYTE_ARRAY, (-1), 3593);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte) (-107));
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 1531, 2664);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-792), 0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1567, 1567);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 2265, (-822));
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1296), 70);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-1097), 2785);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_SHORT_ARRAY, 64, 1);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (-1), 2141663909);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      int[] intArray0 = new int[3];
      char char0 = '9';
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1356), (int) char0);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      int[] intArray0 = new int[8];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2145801575, 48);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 478, 478);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), Integer.MAX_VALUE);
      assertEquals(9, longArray1.length);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 64, (-2495));
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 64, 35);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Object[] objectArray0 = new Object[15];
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, (-1), 2137);
      assertEquals(15, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) arrayUtils0.EMPTY_CLASS_ARRAY, (-1), (-1));
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      String[] stringArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_STRING_ARRAY, 5, 5);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) null, (-1), (-1));
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Double[] doubleArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Byte[] byteArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Character[] characterArray0 = new Character[4];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(4, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Short[] shortArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer[] integerArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Long[] longArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1.0);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(9, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      String[] stringArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_STRING_ARRAY);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(4, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 2326.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, 0.0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-1));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'E');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)2694);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-915));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Object, String>[] abstractMap_SimpleEntryArray0 = ArrayUtils.removeElement((AbstractMap.SimpleEntry<Object, String>[]) null, object0);
      assertNull(abstractMap_SimpleEntryArray0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) objectArray0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '[Ljava.lang.Object;@398a14c1', has a length less than 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Object[] objectArray0 = new Object[18];
      objectArray0[0] = (Object) objectArray0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 1, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Object object0 = new Object();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>((String) null, object0);
      AbstractMap.SimpleEntry<String, Object>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<String, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 1);
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      Map<Object, Object> map0 = ArrayUtils.toMap(abstractMap_SimpleEntryArray0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertArrayEquals(new int[] {(-1), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)94);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertEquals(8, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (-849L));
      assertArrayEquals(new long[] {(-849L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), (float) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)116);
      assertArrayEquals(new byte[] {(byte)116}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_CHAR_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'c');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 57, 1297.81321);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (short) (-285));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (-1));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1921.00250741943, (-1293), (double) 925.0F);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEquals(arrayUtils0, arrayUtils0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (-1), (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-395));
      assertArrayEquals(new short[] {(short) (-395)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)112);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      String string0 = ArrayUtils.toString((Object) arrayUtils0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      long[] longArray0 = new long[8];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) Integer.MAX_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1047, (double) 1047);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, 'B');
      assertArrayEquals(new char[] {'B'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) 'S');
      assertEquals((-1), int0);
  }
}

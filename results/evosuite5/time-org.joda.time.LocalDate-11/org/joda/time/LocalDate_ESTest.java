/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 16:48:21 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.Period;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LocalDate_ESTest extends LocalDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      String string0 = localDate0.toString((String) null, (Locale) null);
      assertEquals("2014-02-14", string0);
      assertNotNull(string0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      try { 
        localDate0.toString(",FBD\"I'l0/", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: F
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      String string0 = localDate0.toString((String) null);
      assertEquals("2014-02-14", string0);
      assertNotNull(string0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        localDate0.toString("org.joda.time.field.PreciseDurationField");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try { 
        localDate0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'clockhourOfHalfday' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        localDate0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.minusDays(0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.minusDays((-1155));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.minusWeeks(0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.minusWeeks(897);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.minusMonths(0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.minusMonths((-1114));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Chronology) null);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.minusYears(0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.minusYears(1614);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.plusDays(0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.plusWeeks(0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Chronology) null);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.plusWeeks(1594);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.plusMonths(0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.plusMonths(1);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.plusYears(0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.plusYears((-1345));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Minutes minutes0 = Minutes.THREE;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      assertEquals(3, minutes0.getMinutes());
      
      LocalDate localDate1 = localDate0.withPeriodAdded(minutes0, 0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(1, minutes0.size());
      assertEquals(3, minutes0.getMinutes());
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.plus((ReadablePeriod) null);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Chronology) null);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      assertNotNull(durationFieldType0);
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 13);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded(durationFieldType0, (-1078));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millis' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded((DurationFieldType) null, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Years years0 = Years.parseYears((String) null);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      assertEquals(0, years0.getYears());
      
      DurationFieldType durationFieldType0 = years0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals(1, years0.size());
      assertEquals(0, years0.getYears());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(1, years0.size());
      assertEquals(0, years0.getYears());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, (-1));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        localDate0.withField((DateTimeFieldType) null, 1670);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try { 
        localDate0.withField(dateTimeFieldType0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'clockhourOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.withFields((ReadablePartial) null);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.withFields(localDate0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(60000L, (Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      // Undeclared exception!
      try { 
        localDate0.toDateTime(localTime0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertNotNull(calendar0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      assertNotNull(localTime0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      
      DateTime dateTime0 = localDate0.toDateTime(localTime0);
      assertNotNull(dateTime0);
      assertEquals(3, localDate0.size());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      assertEquals(1392405681320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      LocalTime localTime0 = new LocalTime((-3799L), (Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try { 
        localDate0.toLocalDateTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        localDate0.toLocalDateTime((LocalTime) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The time must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalTime localTime0 = new LocalTime((-397L));
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
      assertNotNull(localDateTime0);
      assertEquals(3, localDate0.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        localDate0.compareTo((ReadablePartial) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+07:07", dateTimeZone0.getID());
      assertEquals("+07:07", dateTimeZone0.toString());
      
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      assertNotNull(localDate0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+07:07", dateTimeZone0.getID());
      assertEquals("+07:07", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      
      localDate0.hashCode();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+07:07", dateTimeZone0.getID());
      assertEquals("+07:07", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      
      localDate0.hashCode();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+07:07", dateTimeZone0.getID());
      assertEquals("+07:07", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      boolean boolean0 = localDate0.equals(gregorianChronology0);
      assertFalse(boolean0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      LocalDate localDate0 = new LocalDate((Chronology) julianChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Date date0 = localDate0.toDate();
      assertNotNull(date0);
      assertEquals(3, localDate0.size());
      assertEquals("Sat Feb 01 00:00:00 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      boolean boolean0 = localDate0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      boolean boolean0 = localDate0.isSupported((DateTimeFieldType) null);
      assertFalse(boolean0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        localDate0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        localDate0.getValue((-734));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -734
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        localDate0.getFieldType(935);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 935
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      assertNotNull(localDate0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("");
      assertNotNull(localDate0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.year();
      assertNotNull(localDate_Property0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate_Property0.addToCopy((-1));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      assertNotNull(dateTimeZone0);
      assertEquals("+07:07", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+07:07", dateTimeZone0.getID());
      
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals("+07:07", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+07:07", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
      assertNotNull(localDate_Property0);
      assertEquals("+07:07", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+07:07", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate_Property0.withMinimumValue();
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals("+07:07", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+07:07", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-702L), (Chronology) null);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate_Property0.roundCeilingCopy();
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Chronology) null);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate_Property0.roundHalfEvenCopy();
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Chronology) null);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      
      LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      
      LocalDate localDate1 = localDate_Property0.roundFloorCopy();
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate_Property0.getLocalDate();
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
      
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
      assertNotNull(localDate_Property0);
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        localDate_Property0.setCopy("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for dayOfMonth is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Chronology) null);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.year();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate_Property0.addWrapFieldToCopy(1);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Chronology) null);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate_Property0.roundHalfCeilingCopy();
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      
      LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      
      LocalDate localDate1 = localDate_Property0.withMaximumValue();
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
      
      LocalDate localDate1 = new LocalDate(localDate0, dateTimeZone0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
      assertEquals(3, localDate1.size());
      assertTrue(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.withWeekyear((-2740));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
      
      Date date0 = localDate1.toDate();
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(date0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals("Wed Feb 13 00:00:00 GMT 2741", date0.toString());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Period period0 = Period.millis(555);
      assertNotNull(period0);
      
      LocalDate localDate1 = localDate0.plus(period0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) iSOChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getEra();
      assertEquals(1, int0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertNotNull(dateTime0);
      assertEquals(3, localDate0.size());
      assertEquals(1392332400000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getWeekOfWeekyear();
      assertEquals(7, int0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        localDate0.withDayOfWeek((-1412));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1412 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTime((LocalTime) null);
      assertNotNull(dateTime0);
      assertEquals(3, localDate0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getYearOfEra();
      assertEquals(2014, int0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.era();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getWeekyear();
      assertEquals(2014, int0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = new LocalDate(localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertTrue(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
      
      LocalDate localDate0 = new LocalDate((-3504L), dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        localDate0.withYearOfCentury((-328));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -328 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      
      Chronology chronology0 = localDate_Property0.getChronology();
      assertNotNull(chronology0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getYearOfCentury();
      assertEquals(14, int0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.withYear(45);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(1000000000000L);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        localDate0.withDayOfMonth(630);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 630 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse("%s<[6kr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"%s<[6kr\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getCenturyOfEra();
      assertEquals(20, int0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getDayOfWeek();
      assertEquals(5, int0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.withWeekOfWeekyear(8);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight();
      assertNotNull(dateTime0);
      assertEquals(3, localDate0.size());
      assertEquals(1392332400000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+07:07", dateTimeZone0.toString());
      assertEquals("+07:07", dateTimeZone0.getID());
      
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      assertNotNull(localDate0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+07:07", dateTimeZone0.toString());
      assertEquals("+07:07", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getDayOfYear();
      assertEquals(46, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+07:07", dateTimeZone0.toString());
      assertEquals("+07:07", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.withCenturyOfEra(5);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
      
      boolean boolean0 = localDate1.isAfter(localDate0);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertFalse(boolean0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.withYearOfEra(8);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(3, localDate0.size());
      assertEquals(1392332400000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Months months0 = Months.NINE;
      assertNotNull(months0);
      assertEquals(9, months0.getMonths());
      assertEquals(1, months0.size());
      
      LocalDate localDate1 = localDate0.minus(months0);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(9, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Date date0 = localDate0.toDate();
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        localDate0.withMonthOfYear((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        localDate0.withDayOfYear((-1114));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1114 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      assertEquals(3, localDate0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Interval interval0 = localDate0.toInterval();
      assertEquals(1392418800000L, interval0.getEndMillis());
      assertEquals(1392332400000L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        localDate0.withEra(1900);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1900 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}

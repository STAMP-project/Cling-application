/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 15:39:54 GMT 2019
 */

package org.mockito.asm.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.mockito.asm.AnnotationVisitor;
import org.mockito.asm.FieldVisitor;
import org.mockito.asm.MethodVisitor;
import org.mockito.asm.util.ASMifierClassVisitor;
import org.mockito.asm.util.ASMifierMethodVisitor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ASMifierClassVisitor_ESTest extends ASMifierClassVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess(131072);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".clasg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess(4096);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visit(8192, 8192, "9#Y.}", "q}^!n-klDD{y[", "t!'", aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">}w$Zqu=");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess(16384);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">}w$Zqu=");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visitInnerClass("^#8{$pky6xi0vh(Lw", "S%#gr ", "^#8{$pky6xi0vh(Lw", 32767);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess(256);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visitInnerClass("Z#+&uU3Hdu.class", ", ", "Io5Sk]]", (-26634936));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      MockFile mockFile0 = new MockFile("4v$;h");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visit((-1638), (-1408), "d/8M\" h/swVlPz<y<", "d/8M\" h/swVlPz<y<", "4v$;h", stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("package asm..class", "package asm..class");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess(128);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      Object object0 = new Object();
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(201, "nx4HSB", "^.a&YNV,u=mI", "nx4HSB", object0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">}w$Zqu=");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess(64);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">}w$Zqu=");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visitInnerClass(">}w$Zqu=", "", "", (-1799764910));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">}w$Zqu=");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess((-576));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess(32);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=HJ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(2048, "=HJ", "=HJ", "=HJ", stringArray0);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      ASMifierMethodVisitor aSMifierMethodVisitor0 = aSMifierClassVisitor0.createASMifierMethodVisitor();
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(1010, ", ", ", ", ", ", aSMifierMethodVisitor0.OPCODES);
      assertNotSame(methodVisitor0, aSMifierMethodVisitor0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">}w$Zqu=");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visit(4, 698, ">}w$Zqu=", ">}w$Zqu=", ">}w$Zqu=", (String[]) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visit(196653, 512, "BrpU|'R*W(FMC", (String) null, (String) null, aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      ASMifierMethodVisitor aSMifierMethodVisitor0 = aSMifierClassVisitor0.createASMifierMethodVisitor();
      aSMifierClassVisitor0.visit(50, 34, "f,<`%T^q#O#{", ", ", ", ", aSMifierMethodVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      ASMifierMethodVisitor aSMifierMethodVisitor0 = aSMifierClassVisitor0.createASMifierMethodVisitor();
      aSMifierClassVisitor0.visit(48, 48, "boolean", "Seg:bU8U", "ACC_DEPRECATED.class.class", aSMifierMethodVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visit(47, (-1064), "", "Np", "mv.visitMethodInsn(", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      ASMifierMethodVisitor aSMifierMethodVisitor0 = aSMifierClassVisitor0.createASMifierMethodVisitor();
      aSMifierClassVisitor0.visit(46, 1024, "w$Zqu=", ", ", (String) null, aSMifierMethodVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">}w$Zqu=");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visit(193, 16384, ">}w$Zqu=", (String) null, "q", aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java/lang/Throwable";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\r";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Class not found
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Label .class";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-debug";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-debug";
      ASMifierClassVisitor.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".clasg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      ASMifierClassVisitor.main(aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASMifierClassVisitor.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      AnnotationVisitor annotationVisitor0 = aSMifierClassVisitor0.visitAnnotation("8<'", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.mockito.asm.util.ASMifierAbstractVisitor";
      ASMifierClassVisitor.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visitOuterClass("^SX", "^SX", ".clasg");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".clasg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visitSource(".clasg", ".clasg");
  }
}

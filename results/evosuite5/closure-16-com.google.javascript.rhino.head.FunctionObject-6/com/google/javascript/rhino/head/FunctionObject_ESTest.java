/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 06:31:34 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeGenerator;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaConstructor;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      Class<Integer> class0 = Integer.TYPE;
      Class<Method> class1 = Method.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeArray0, (Object) class0, (Class<?>) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"java.lang.reflect.Method\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      Class<Delegator> class0 = Delegator.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "delete");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"delete\" occurs multiple times in class \"com.google.javascript.rhino.head.Delegator\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Method[] methodArray0 = new Method[18];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "loadClass");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeIterator_StopIteration0, false);
      Double double0 = new Double(13);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeGenerator0, (Object) double0, 4);
      assertEquals(13.0, object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      Class<Boolean> class0 = Boolean.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeArray0, (Object) nativeArray0, (Class<?>) class0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      Class<Boolean> class0 = Boolean.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeArray0, (Object) context0.generateObserverCount, (Class<?>) class0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      NativeCall nativeCall0 = new NativeCall();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) context0, 1);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) null, (Object) context0, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) context0, 4);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Context context0 = Context.enter();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) "getLength", 1);
      assertEquals("getLength", object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Double> class0 = Double.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<NativeJavaConstructor> class0 = NativeJavaConstructor.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      Delegator delegator0 = new Delegator();
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("W0O|&08tx<mH4;bn", method0, delegator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Delegator", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      Class<Delegator> class0 = Delegator.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "call");
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("call", method0, (Scriptable) null);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"com.google.javascript.rhino.head.Context\" in method \"call\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }
}

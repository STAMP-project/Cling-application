/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 17:17:24 GMT 2019
 */

package com.google.javascript.rhino.head.regexp;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.Synchronizer;
import com.google.javascript.rhino.head.TopLevel;
import com.google.javascript.rhino.head.regexp.NativeRegExp;
import com.google.javascript.rhino.head.regexp.RegExpImpl;
import com.google.javascript.rhino.head.regexp.SubString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NativeRegExp_ESTest extends NativeRegExp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      
      int int0 = nativeRegExp0.findPrototypeId("exec");
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals(4, int0);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      int int0 = nativeRegExp0.findPrototypeId("a]b4'EP");
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals(0, int0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      int int0 = nativeRegExp0.findPrototypeId(".Ml$&e.");
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals(0, int0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      int int0 = nativeRegExp0.findPrototypeId("/l;K");
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals(0, int0);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      int int0 = nativeRegExp0.findPrototypeId("5eBU@");
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals(0, int0);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isSealed());
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      
      Synchronizer synchronizer0 = new Synchronizer(nativeRegExp0);
      assertNotNull(synchronizer0);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeRegExp0, synchronizer0, 11, 4);
      assertNotNull(idFunctionObject0);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(4, idFunctionObject0.getLength());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals(4, idFunctionObject0.getArity());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("", idFunctionObject0.getFunctionName());
      assertEquals(11, idFunctionObject0.methodId());
      assertTrue(idFunctionObject0.isEmpty());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      // Undeclared exception!
      try { 
        nativeRegExp0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      nativeRegExp0.activatePrototypeMap(237);
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.hasPrototypeMap());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      // Undeclared exception!
      try { 
        nativeRegExp0.getAllIds();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      nativeRegExp0.setInstanceIdValue(5, "RfgExz.p");
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertTrue(nativeRegExp0.isExtensible());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      nativeRegExp0.setInstanceIdValue(4, (Object) null);
      assertTrue(nativeRegExp0.isExtensible());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      nativeRegExp0.setInstanceIdValue(3, (Object) null);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      
      nativeRegExp0.setInstanceIdValue(2, (Object) null);
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertTrue(nativeRegExp0.isExtensible());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertFalse(topLevel0.isSealed());
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.hasPrototypeMap());
      assertEquals("object", topLevel0.getTypeOf());
      assertTrue(topLevel0.isExtensible());
      assertEquals("global", topLevel0.getClassName());
      assertFalse(topLevel0.avoidObjectDetection());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      // Undeclared exception!
      try { 
        nativeRegExp0.setInstanceIdValue(11, topLevel0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 11
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertTrue(nativeRegExp0.isExtensible());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      
      nativeRegExp0.setInstanceIdValue(1, "language version");
      assertTrue(nativeRegExp0.isExtensible());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, nativeRegExp0, context0.emptyArgs);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertNotNull(nativeRegExp1);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(nativeRegExp1.isEmpty());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertTrue(nativeRegExp1.isExtensible());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertFalse(nativeRegExp1.isSealed());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      
      Boolean boolean0 = (Boolean)nativeRegExp0.getInstanceIdValue(5);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertNotNull(boolean0);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(boolean0);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, nativeRegExp0, context0.emptyArgs);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertNotNull(nativeRegExp1);
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(nativeRegExp1.isEmpty());
      assertFalse(nativeRegExp1.isSealed());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertTrue(nativeRegExp1.isExtensible());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      
      Boolean boolean0 = (Boolean)nativeRegExp0.getInstanceIdValue(4);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertNotNull(boolean0);
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(boolean0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, nativeRegExp0, context0.emptyArgs);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertNotNull(nativeRegExp1);
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(nativeRegExp1.isSealed());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertTrue(nativeRegExp1.isExtensible());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertTrue(nativeRegExp1.isEmpty());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      Boolean boolean0 = (Boolean)nativeRegExp0.getInstanceIdValue(3);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertNotNull(boolean0);
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(boolean0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      
      // Undeclared exception!
      try { 
        nativeRegExp0.getInstanceIdValue((-2729));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2729
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isExtensible());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      // Undeclared exception!
      try { 
        nativeRegExp0.getInstanceIdValue(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      
      Object object0 = nativeRegExp0.getInstanceIdValue(1);
      assertNotNull(object0);
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals(0.0, object0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      
      // Undeclared exception!
      try { 
        nativeRegExp0.getInstanceIdName((-176));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -176
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      int int0 = nativeRegExp0.findInstanceIdInfo("enumerable");
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals(0, int0);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      int int0 = nativeRegExp0.findInstanceIdInfo("GZ,Znsst5");
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals(0, int0);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.RegExp;
      Scriptable scriptable0 = TopLevel.getBuiltinPrototype((Scriptable) nativeRegExp0, topLevel_Builtins0);
      assertNull(scriptable0);
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, nativeRegExp0, context0.emptyArgs);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertNotNull(nativeRegExp1);
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertFalse(nativeRegExp1.isSealed());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertTrue(nativeRegExp1.isExtensible());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertTrue(nativeRegExp1.isEmpty());
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      
      RegExpImpl regExpImpl0 = new RegExpImpl();
      assertNotNull(regExpImpl0);
      
      SubString subString0 = regExpImpl0.getParenSubString(3);
      assertNotNull(subString0);
      assertEquals("", subString0.toString());
      
      regExpImpl0.lastMatch = subString0;
      assertEquals("", subString0.toString());
      assertEquals("", regExpImpl0.lastMatch.toString());
      
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        nativeRegExp1.executeRegExp(context0, nativeRegExp0, regExpImpl0, "a]b4'EP", intArray0, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, nativeRegExp0, context0.emptyArgs);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertNotNull(nativeRegExp1);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertTrue(nativeRegExp1.isEmpty());
      assertTrue(nativeRegExp1.isExtensible());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertFalse(nativeRegExp1.isSealed());
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      
      RegExpImpl regExpImpl0 = new RegExpImpl();
      assertNotNull(regExpImpl0);
      
      int[] intArray0 = new int[4];
      Boolean boolean0 = (Boolean)nativeRegExp0.executeRegExp(context0, nativeRegExp1, regExpImpl0, "com.google.javascript.rhino.head.JavaMembers$MuthodSignature", intArray0, 0);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(boolean0);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertTrue(nativeRegExp1.isEmpty());
      assertTrue(nativeRegExp1.isExtensible());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertFalse(nativeRegExp1.isSealed());
      assertTrue(boolean0);
      assertEquals(4, intArray0.length);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      
      RegExpImpl regExpImpl0 = new RegExpImpl();
      assertNotNull(regExpImpl0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 100;
      // Undeclared exception!
      try { 
        nativeRegExp0.executeRegExp(context0, nativeRegExp0, regExpImpl0, "error reporter", intArray0, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      
      Object[] objectArray0 = new Object[1];
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, nativeRegExp0, objectArray0);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertNotNull(nativeRegExp1);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertFalse(nativeRegExp1.isSealed());
      assertTrue(nativeRegExp1.isEmpty());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertTrue(nativeRegExp1.isExtensible());
      assertEquals(1, objectArray0.length);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeObject nativeObject0 = new NativeObject();
      assertNotNull(nativeObject0);
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      RegExpImpl regExpImpl0 = new RegExpImpl();
      assertNotNull(regExpImpl0);
      
      int[] intArray0 = new int[4];
      Object object0 = nativeRegExp1.executeRegExp(context0, nativeObject0, regExpImpl0, "language version", intArray0, 0);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNull(object0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertFalse(nativeRegExp1.isSealed());
      assertTrue(nativeRegExp1.isEmpty());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertTrue(nativeRegExp1.isExtensible());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals(1, objectArray0.length);
      assertEquals(4, intArray0.length);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertNull(context0);
      
      Object object0 = NativeRegExp.compileRE(context0, "{gRPr+", (String) null, false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      
      Object object0 = NativeRegExp.compileRE(context0, "(?:)", "", false);
      assertNotNull(object0);
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "\\u";
      Object object0 = NativeRegExp.compileRE((Context) null, string0, (String) null, false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertNull(context0);
      
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, "=yE7T57ku(", (String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: Unterminated parenthetical 
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertNull(context0);
      
      Object object0 = NativeRegExp.compileRE(context0, "E,<7Y|l_L8BHJ%u<.", (String) null, false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = NativeRegExp.compileRE((Context) null, ":9}rS=+>Br", (String) null, false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, "#[gr>f3zqp:` )p", (String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: Unterminated character class 
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, "*t;Kc';w'ptU>ICFx", (String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: Invalid quantifier *
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      
      Object object0 = NativeRegExp.compileRE(context0, "J,Kn&`NB|ZIe-?mY+GQ", (String) null, false);
      assertNotNull(object0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      
      Object object0 = NativeRegExp.compileRE(context0, "(c:)", "", false);
      assertNotNull(object0);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      
      Object object0 = NativeRegExp.compileRE(context0, "Q+5O`{1Y&", (String) null, false);
      assertNotNull(object0);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object object0 = NativeRegExp.compileRE((Context) null, "i", "i", false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertNull(context0);
      
      Object object0 = NativeRegExp.compileRE(context0, "w", (String) null, true);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertNull(context0);
      
      Object object0 = NativeRegExp.compileRE(context0, "", (String) null, true);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertNull(context0);
      
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, "language version", "msg.overlarge.max", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: invalid flag after regular expression
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(6, Context.FEATURE_E4X);
      
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, "g\"l?D", "g\"l?D", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: invalid flag after regular expression
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertNull(context0);
      
      Object object0 = NativeRegExp.compileRE(context0, "/J6^_D$U{= fw4&", "i", true);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      
      Object[] objectArray0 = new Object[1];
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, nativeRegExp0, objectArray0);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertNotNull(nativeRegExp1);
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(nativeRegExp1.isExtensible());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertTrue(nativeRegExp1.isEmpty());
      assertFalse(nativeRegExp1.isSealed());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertEquals(1, objectArray0.length);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      
      NativeArray nativeArray0 = (NativeArray)nativeRegExp1.call(context0, nativeRegExp0, nativeRegExp0, objectArray0);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertNotNull(nativeArray0);
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(nativeRegExp1.isExtensible());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertTrue(nativeRegExp1.isEmpty());
      assertFalse(nativeRegExp1.isSealed());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertEquals(1L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(1L, nativeArray0.getLength());
      assertEquals(1, objectArray0.length);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Context context0 = Context.getCurrentContext();
      assertNull(context0);
      
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        nativeRegExp0.compile(context0, nativeRegExp0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: invalid flag after regular expression
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      
      Context context0 = Context.getCurrentContext();
      assertNull(context0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) nativeRegExp0;
      // Undeclared exception!
      try { 
        nativeRegExp0.compile(context0, nativeRegExp0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Only one argument may be specified if the first argument to RegExp.prototype.compile is a RegExp object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) nativeRegExp0;
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, nativeRegExp0, objectArray0);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertNotNull(nativeRegExp1);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertTrue(nativeRegExp1.isExtensible());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertFalse(nativeRegExp1.isSealed());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertTrue(nativeRegExp1.isEmpty());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertEquals(1, objectArray0.length);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, nativeRegExp0, context0.emptyArgs);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertNotNull(nativeRegExp1);
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(nativeRegExp1.isEmpty());
      assertFalse(nativeRegExp1.isSealed());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertTrue(nativeRegExp1.isExtensible());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      
      // Undeclared exception!
      try { 
        nativeRegExp1.call(context0, nativeRegExp0, nativeRegExp0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: no input for /(?:)/
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test49()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      
      Synchronizer synchronizer0 = new Synchronizer(nativeRegExp0, context0);
      assertNotNull(synchronizer0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      
      // Undeclared exception!
      try { 
        synchronizer0.construct(context0, nativeRegExp0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      
      String string0 = nativeRegExp0.getClassName();
      assertNotNull(string0);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", string0);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Object[] objectArray0 = nativeRegExp0.getAllIds();
      assertNotNull(objectArray0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals(5, objectArray0.length);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      
      String string0 = nativeRegExp0.getTypeOf();
      assertNotNull(string0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", string0);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      //  // Unstable assertion: assertNotNull(nativeRegExp0);
      //  // Unstable assertion: assertFalse(nativeRegExp0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeRegExp0.getTypeOf());
      //  // Unstable assertion: assertEquals("RegExp", nativeRegExp0.getClassName());
      //  // Unstable assertion: assertFalse(nativeRegExp0.isSealed());
      //  // Unstable assertion: assertTrue(nativeRegExp0.isExtensible());
      //  // Unstable assertion: assertTrue(nativeRegExp0.isEmpty());
      //  // Unstable assertion: assertFalse(nativeRegExp0.avoidObjectDetection());
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(1, NativeRegExp.MATCH);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(1, NativeRegExp.JSREG_GLOB);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(0, NativeRegExp.TEST);
      //  // Unstable assertion: assertEquals(2, NativeRegExp.PREFIX);
      //  // Unstable assertion: assertEquals(2, NativeRegExp.JSREG_FOLD);
      
      Context context0 = new Context();
      //  // Unstable assertion: assertNotNull(context0);
      //  // Unstable assertion: assertFalse(context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertFalse(context0.isSealed());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertFalse(context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertTrue(context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(170, Context.VERSION_1_7);
      //  // Unstable assertion: assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      //  // Unstable assertion: assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      //  // Unstable assertion: assertEquals(130, Context.VERSION_1_3);
      //  // Unstable assertion: assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      //  // Unstable assertion: assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      //  // Unstable assertion: assertEquals(180, Context.VERSION_1_8);
      //  // Unstable assertion: assertEquals(0, Context.VERSION_DEFAULT);
      //  // Unstable assertion: assertEquals(140, Context.VERSION_1_4);
      //  // Unstable assertion: assertEquals(6, Context.FEATURE_E4X);
      //  // Unstable assertion: assertEquals(110, Context.VERSION_1_1);
      //  // Unstable assertion: assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      //  // Unstable assertion: assertEquals(160, Context.VERSION_1_6);
      //  // Unstable assertion: assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      //  // Unstable assertion: assertEquals(120, Context.VERSION_1_2);
      //  // Unstable assertion: assertEquals(100, Context.VERSION_1_0);
      //  // Unstable assertion: assertEquals(9, Context.FEATURE_STRICT_EVAL);
      //  // Unstable assertion: assertEquals((-1), Context.VERSION_UNKNOWN);
      //  // Unstable assertion: assertEquals(150, Context.VERSION_1_5);
      //  // Unstable assertion: assertEquals(8, Context.FEATURE_STRICT_VARS);
      //  // Unstable assertion: assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      //  // Unstable assertion: assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      //  // Unstable assertion: assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      //  // Unstable assertion: assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertEquals(11, Context.FEATURE_STRICT_MODE);
      
      Object[] objectArray0 = new Object[1];
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, nativeRegExp0, objectArray0);
      //  // Unstable assertion: assertSame(nativeRegExp0, nativeRegExp1);
      //  // Unstable assertion: assertSame(nativeRegExp1, nativeRegExp0);
      //  // Unstable assertion: assertNotNull(nativeRegExp1);
      //  // Unstable assertion: assertFalse(nativeRegExp0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeRegExp0.getTypeOf());
      //  // Unstable assertion: assertEquals("RegExp", nativeRegExp0.getClassName());
      //  // Unstable assertion: assertFalse(nativeRegExp0.isSealed());
      //  // Unstable assertion: assertTrue(nativeRegExp0.isExtensible());
      //  // Unstable assertion: assertTrue(nativeRegExp0.isEmpty());
      //  // Unstable assertion: assertFalse(nativeRegExp0.avoidObjectDetection());
      //  // Unstable assertion: assertFalse(context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertFalse(context0.isSealed());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertFalse(context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertTrue(context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertFalse(nativeRegExp1.isSealed());
      //  // Unstable assertion: assertEquals("RegExp", nativeRegExp1.getClassName());
      //  // Unstable assertion: assertTrue(nativeRegExp1.isEmpty());
      //  // Unstable assertion: assertFalse(nativeRegExp1.avoidObjectDetection());
      //  // Unstable assertion: assertEquals("object", nativeRegExp1.getTypeOf());
      //  // Unstable assertion: assertFalse(nativeRegExp1.hasPrototypeMap());
      //  // Unstable assertion: assertTrue(nativeRegExp1.isExtensible());
      //  // Unstable assertion: assertEquals(1, objectArray0.length);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(1, NativeRegExp.MATCH);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(1, NativeRegExp.JSREG_GLOB);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(0, NativeRegExp.TEST);
      //  // Unstable assertion: assertEquals(2, NativeRegExp.PREFIX);
      //  // Unstable assertion: assertEquals(2, NativeRegExp.JSREG_FOLD);
      //  // Unstable assertion: assertEquals(170, Context.VERSION_1_7);
      //  // Unstable assertion: assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      //  // Unstable assertion: assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      //  // Unstable assertion: assertEquals(130, Context.VERSION_1_3);
      //  // Unstable assertion: assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      //  // Unstable assertion: assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      //  // Unstable assertion: assertEquals(180, Context.VERSION_1_8);
      //  // Unstable assertion: assertEquals(0, Context.VERSION_DEFAULT);
      //  // Unstable assertion: assertEquals(140, Context.VERSION_1_4);
      //  // Unstable assertion: assertEquals(6, Context.FEATURE_E4X);
      //  // Unstable assertion: assertEquals(110, Context.VERSION_1_1);
      //  // Unstable assertion: assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      //  // Unstable assertion: assertEquals(160, Context.VERSION_1_6);
      //  // Unstable assertion: assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      //  // Unstable assertion: assertEquals(120, Context.VERSION_1_2);
      //  // Unstable assertion: assertEquals(100, Context.VERSION_1_0);
      //  // Unstable assertion: assertEquals(9, Context.FEATURE_STRICT_EVAL);
      //  // Unstable assertion: assertEquals((-1), Context.VERSION_UNKNOWN);
      //  // Unstable assertion: assertEquals(150, Context.VERSION_1_5);
      //  // Unstable assertion: assertEquals(8, Context.FEATURE_STRICT_VARS);
      //  // Unstable assertion: assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      //  // Unstable assertion: assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      //  // Unstable assertion: assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      //  // Unstable assertion: assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertEquals(11, Context.FEATURE_STRICT_MODE);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(2, NativeRegExp.JSREG_FOLD);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(1, NativeRegExp.MATCH);
      //  // Unstable assertion: assertEquals(0, NativeRegExp.TEST);
      //  // Unstable assertion: assertEquals(2, NativeRegExp.PREFIX);
      //  // Unstable assertion: assertEquals(1, NativeRegExp.JSREG_GLOB);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      // Undeclared exception!
      try { 
        nativeRegExp0.call(context0, nativeRegExp1, nativeRegExp1, context0.emptyArgs);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // SyntaxError: no input for /null/
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      
      // Undeclared exception!
      try { 
        nativeRegExp0.getFlags();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      
      NativeRegExp nativeRegExp1 = null;
      try {
        nativeRegExp1 = new NativeRegExp(nativeRegExp0, nativeRegExp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.head.regexp.NativeRegExp cannot be cast to com.google.javascript.rhino.head.regexp.RECompiled
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }
}

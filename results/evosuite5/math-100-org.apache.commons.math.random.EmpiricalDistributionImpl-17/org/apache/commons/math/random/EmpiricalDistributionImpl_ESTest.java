/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 16:01:21 GMT 2019
 */

package org.apache.commons.math.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import org.apache.commons.math.random.EmpiricalDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class EmpiricalDistributionImpl_ESTest extends EmpiricalDistributionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.2;
      doubleArray0[1] = 357.033954788788;
      empiricalDistributionImpl0.load(doubleArray0);
      empiricalDistributionImpl0.getNextValue();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      File file0 = MockFile.createTempFile("}R;v%", "}R;v%");
      empiricalDistributionImpl0.load(file0);
      // Undeclared exception!
      try { 
        empiricalDistributionImpl0.getNextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No bin selected
         //
         verifyException("org.apache.commons.math.random.EmpiricalDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      try { 
        empiricalDistributionImpl0.getNextValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // distribution not loaded
         //
         verifyException("org.apache.commons.math.random.EmpiricalDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      double[] doubleArray0 = new double[3];
      empiricalDistributionImpl0.load(doubleArray0);
      empiricalDistributionImpl0.getNextValue();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      double[] doubleArray0 = new double[4];
      empiricalDistributionImpl0.load(doubleArray0);
      File file0 = MockFile.createTempFile("variance: ", "Vs:Eb.cM#\"iA_}2 m");
      empiricalDistributionImpl0.load(file0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl((-1));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/CltlWzf9y#;h>N0");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "=65S{");
      File file0 = MockFile.createTempFile("CltlWzf9y#;h>N", "");
      try { 
        empiricalDistributionImpl0.load(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // For input string: \"=65S{\"
         //
         verifyException("org.apache.commons.math.random.EmpiricalDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl(0);
      empiricalDistributionImpl0.getBinStats();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      empiricalDistributionImpl0.getSampleStats();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      // Undeclared exception!
      try { 
        empiricalDistributionImpl0.getUpperBounds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.random.EmpiricalDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      empiricalDistributionImpl0.isLoaded();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      empiricalDistributionImpl0.getBinCount();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmpiricalDistributionImpl empiricalDistributionImpl0 = new EmpiricalDistributionImpl();
      double[] doubleArray0 = new double[3];
      empiricalDistributionImpl0.load(doubleArray0);
      File file0 = MockFile.createTempFile("}R;v%", "}R;v%");
      empiricalDistributionImpl0.load(file0);
      empiricalDistributionImpl0.load(file0);
      empiricalDistributionImpl0.load(file0);
      empiricalDistributionImpl0.load(file0);
      empiricalDistributionImpl0.load(doubleArray0);
      empiricalDistributionImpl0.load(file0);
      double[] doubleArray1 = empiricalDistributionImpl0.getUpperBounds();
      assertTrue(empiricalDistributionImpl0.isLoaded());
      
      empiricalDistributionImpl0.load(doubleArray1);
      assertEquals(1000, empiricalDistributionImpl0.getBinCount());
  }
}
